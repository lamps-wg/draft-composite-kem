{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-11-14T01:46:18.127457+00:00",
  "repo": "lamps-wg/draft-composite-kem",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "pull request",
      "description": "This issue is addressed by an open PR",
      "color": "67267D"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKRPFO85wlqLV",
      "title": "Comments from Stephen Ferrell",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/1",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(June 20, 2023)\r\n\r\nA couple of specific comments in case those help:\r\n\r\n    the title refers to \"Internet PKI\" so I don't know if it\r\n    will in fact be possible to usefully unwind this from the\r\n    other composite drafts\r\n\r\n[[MO]] We haven't changed the title since draft-ounsworth-pq-composite-sigs-00 in 2019. Happy to change that.\r\n\r\n    describing this as layering seems wrong\r\n\r\n    kema-CompositeKEM and the other ASN.1 structures seem very\r\n    complex and overly-generic\r\n    [[MO]] It's really just machinery to make the ASN.1 module shorter. Without it, the module would be many hundreds of lines longer. We can unroll it if that's the will of the WG.\r\n\r\n    PUBLIC-KEYS in table 1 refers to signatures, I didn't get\r\n    why?\r\n    [[MO]] copy&paste error. Thanks.\r\n\r\n    section 7.2 (\"OR\" modes) seems odd\r\n    [[MO]] OR modes are now covered by draft-pala-klaussner-composite-kofn; that section should have been removed.\r\n\r\n    appendix C confused me: this I-D has no IPR declaration\r\n    but states that an IPR declaration \"relates\" to this\r\n    draft\r\n    [[MO]] There's IPR on draft-ounsworth-pq-composite-sigs, which probably applies to all three drafts.\r\n",
      "createdAt": "2023-08-23T21:04:10Z",
      "updatedAt": "2024-02-14T15:44:01Z",
      "closedAt": "2024-02-14T15:44:01Z",
      "comments": []
    },
    {
      "number": 2,
      "id": "I_kwDOKRPFO85wlqMj",
      "title": "WGLC issue: Remove Informative reference to draft-cfrg-kem-combiners ?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/2",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a procedural issue: this draft is adopted by LAMPS, but it depends Informatively on draft-ounsworth-cfrg-kem-combiners, which is not yet adopted by CFRG. That will cause a problem at WGLC.\r\n\r\nI propose to leave this issue for now and revisit it as we approach WGLC.",
      "createdAt": "2023-08-23T21:03:13Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": []
    },
    {
      "number": 9,
      "id": "I_kwDOKRPFO8506Rus",
      "title": "Add Max, Jan, Scott as co-authors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/9",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They are equally part of the author's group.",
      "createdAt": "2023-10-25T13:29:03Z",
      "updatedAt": "2024-02-06T15:33:08Z",
      "closedAt": "2024-02-06T15:33:08Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by https://github.com/lamps-wg/draft-composite-kem/commit/29abd8be525ad993279667b166571e5e56bfdce2",
          "createdAt": "2024-02-06T15:33:04Z",
          "updatedAt": "2024-02-06T15:33:04Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKRPFO851Oimq",
      "title": "Fix references to both id-sha3-256 and mda-shake256",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/10",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It should be one or the other, but not both.",
      "createdAt": "2023-10-28T21:32:12Z",
      "updatedAt": "2024-02-06T15:39:00Z",
      "closedAt": "2024-02-06T15:39:00Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOKRPFO859-Xx1",
      "title": "Add a section \"Use in CMS\"",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/12",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This draft should define how you take a composite KEM and stuff it into a KEMRI.",
      "createdAt": "2024-02-01T21:18:51Z",
      "updatedAt": "2024-03-02T22:17:51Z",
      "closedAt": "2024-03-02T22:17:51Z",
      "comments": []
    },
    {
      "number": 13,
      "id": "I_kwDOKRPFO85-a9m-",
      "title": "If the X-Wing PR does not get merged, then re-run aspell",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/13",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I ran the aspell spell checker on #11 and found some embarrassing spelling mistakes. If that PR is ultimately rejected, then re-run aspell over the main branch. ",
      "createdAt": "2024-02-06T14:59:43Z",
      "updatedAt": "2024-03-02T22:24:49Z",
      "closedAt": "2024-03-02T22:24:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done on main.",
          "createdAt": "2024-03-02T22:24:49Z",
          "updatedAt": "2024-03-02T22:24:49Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOKRPFO85-dY23",
      "title": "I think info should be ASN.1 DER TLV for the combiner OID",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/16",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "Motivation: converting the ASCII name of the OID to bytes could be a source interop problems.\r\nComment from Ilari: https://mailarchive.ietf.org/arch/msg/spasm/JUISSb8kzHvly6iwEaY4jYGG_yE/",
      "createdAt": "2024-02-06T20:42:51Z",
      "updatedAt": "2024-07-07T14:18:49Z",
      "closedAt": "2024-07-07T14:18:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is worth putting an EDNOTE in the document that once we do this, we will need IANA to pre-allocate the OIDs so that we can re-compile the domain separators and update the table in the doc.\r\n(and also put the same EDNOTE in composite-sigs)",
          "createdAt": "2024-02-13T20:45:06Z",
          "updatedAt": "2024-02-13T22:43:02Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Align with composite signatures with a similar table for domain separators (DER encoded OID values).  ",
          "createdAt": "2024-07-04T19:58:02Z",
          "updatedAt": "2024-07-04T19:58:02Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Added table in section 2.5, and also updated the definition of the fixedInfo value.   See Merge here:  https://github.com/lamps-wg/draft-composite-kem/commit/e9db1fa3e40edcca15acbee1d19db1c3b7ea9089\r\n",
          "createdAt": "2024-07-04T21:09:12Z",
          "updatedAt": "2024-07-04T21:09:12Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOKRPFO85-0YTv",
      "title": "Copy the Key Usage section from composite-sigs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/17",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-09T18:31:50Z",
      "updatedAt": "2024-02-14T15:42:33Z",
      "closedAt": "2024-02-14T15:42:33Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOKRPFO85_fTKA",
      "title": "Add a new section: explicitly list SPKI AlgIds",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/20",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "We should add a section listing explicitly the DER-encoded AlgorithmIdentifiers for the components of each composite public key and signature algorithm. This is important to resolve ambiguity on, for example, whether the RSA should have a NULL param, and the ECC curve params.\r\n\r\nExample, for id-MLDSA44-ECDSA-P256-SHA256 the ML-DSA SPKI would have an AlgorithmIdentifier of:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ml-dsa\r\n    }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  }\r\nAnd the ECDSA-P256-SHA256 would have a SPKI would have an AlgorithmIdentifier of:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ecPublicKey,\r\n       secp256r1  \r\n  }\r\nwhich is:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 },\r\n       iso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3) prime(1) 7}\r\nAnd the signature algorithm for id-MLDSA44-ECDSA-P256-SHA256, the first component signature algorithm would have an AlgorithmIdentifier of\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ml-dsa\r\n    }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  }\r\nand the second component signature algorithm would have an AlgorithmIdentifier of\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n          ecdsa-with-SHA256\r\n  }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n           {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 2\r\n       }\r\n  }\r\nWith that done, we should replace the message prefix values in Sectien 2.4 with the SHA256 hash of the signature AlgorithmIdentifiers. This has two nice properties that are better than using the ASCII encoding of the OID name: 1) they are all the same length (ie the length of SHA256), and 2) if the inner OIDs change, for example with a new Kyber version, then the message prefix changes, which prevents cryptographic compatibility issues; or otherwise stated: provides signature domain-separation based on the component OIDs.\r\n\r\n--- SHA256 of the DER encoding of the following ASN.1 value\r\n--- Security Consideration note: the choice of SHA256 here is not security-relevant since it is only to generate fixed string values.\r\n\r\nSEQUENCE {\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  },\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n           {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 2\r\n       }\r\n  }\r\n}\r\n",
      "createdAt": "2024-02-16T16:01:24Z",
      "updatedAt": "2024-10-18T20:10:02Z",
      "closedAt": "2024-10-18T20:10:02Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Jan to work on this one and align with what is in composite signatures",
          "createdAt": "2024-07-04T19:57:18Z",
          "updatedAt": "2024-07-04T19:57:18Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For now I have added the following section as an appendix. We'll need to fill it out later.\r\n\r\n# Fixed Component Algorithm Identifiers\r\n\r\nThe following table lists explicitely the DER encoded `AlgorithmID` that MUST be used when reconstructing `SubjectPublicKeyInfo` objects for each component public key, which may be required for example if cryptographic library requires the public key in this form in order to process each component algorithm. The public key `BIT STRING` should be taken directly from the respective component of the CompositeKEMPublicKey.\r\n\r\n| Composite KEM     | First AlgorithmID | Second AlgorithmID |\r\n| --------------    | ----------------- | ------------------ |\r\n| TODO              | TODO              | TODO               |\r\n",
          "createdAt": "2024-07-07T15:20:38Z",
          "updatedAt": "2024-07-07T15:20:53Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See parallel issue in composite-sigs: https://github.com/lamps-wg/draft-composite-sigs/issues/7",
          "createdAt": "2024-07-07T15:24:09Z",
          "updatedAt": "2024-07-08T15:16:24Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOKRPFO85_3gER",
      "title": "Should we instead or in addition support RSA-OAEP?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/21",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sophie Schmieg made the excellent point:\r\n\r\n> on the classical side, nobody uses RSA-KEM (a shame, but alas), leaving RSA-OAEP",
      "createdAt": "2024-02-20T20:48:46Z",
      "updatedAt": "2024-07-07T20:05:40Z",
      "closedAt": "2024-07-07T20:05:40Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What about RSA-PKCS#1 ?",
          "createdAt": "2024-02-20T21:13:11Z",
          "updatedAt": "2024-02-20T21:13:11Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Asking Lamps WG about this at the IETF 120 presentation",
          "createdAt": "2024-07-04T19:56:33Z",
          "updatedAt": "2024-07-04T19:56:33Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOKRPFO86BCuSl",
      "title": "Use KMAC KDF",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/22",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Russ updated [https://datatracker.ietf.org/doc/draft-ietf-lamps-cms-sha3-hash/](https://urldefense.com/v3/__https:/datatracker.ietf.org/doc/draft-ietf-lamps-cms-sha3-hash/__;!!FJ-Y8qCqXTj2!cYbj0IFUu8cOAbr5KOWWSxyYfXh5w296ho-g74KbHiGYlyk4u-kb3ezx67vbdcKnOz-kTEU2FZYFBrVeQy500d5Kp4AOfwQq3r6ZVBFpCAo$) with KMAC KDF OIDs, so I\u2019ve updated cms-kyber to specify KMAC KDF as MTI instead of HKDF-with-SHA3.",
      "createdAt": "2024-03-02T20:52:34Z",
      "updatedAt": "2024-03-02T22:55:45Z",
      "closedAt": "2024-03-02T22:55:45Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just steal it from\r\n\r\nhttps://github.com/lamps-wg/cms-kyber/pull/7",
          "createdAt": "2024-03-02T21:08:49Z",
          "updatedAt": "2024-03-02T21:08:49Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOKRPFO86BC5Oy",
      "title": "Is section \"## RSA-KEM Parameters\" actually needed?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/24",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " Go read 5990bis more carefully.\r\n\r\nAlso, maybe not needed at all if we go with RSA-OAEP.",
      "createdAt": "2024-03-02T23:03:41Z",
      "updatedAt": "2024-07-07T20:05:40Z",
      "closedAt": "2024-07-07T20:05:40Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOKRPFO86BDDgi",
      "title": "Consider lifting AES-192 to AES-256",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/25",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In cms-kyber, we specified id-aes256-wrap for NIST level 3 / 192 bit security, even though it's stronger than necessary, because of a suggestion from Scott that AES-192 isn't as widely supported.  Consider doing the same here.",
      "createdAt": "2024-03-03T01:20:43Z",
      "updatedAt": "2024-07-07T15:11:23Z",
      "closedAt": "2024-07-07T15:11:23Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We will update this for IETF 120.",
          "createdAt": "2024-07-04T19:32:50Z",
          "updatedAt": "2024-07-04T19:32:50Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOKRPFO86GAx2N",
      "title": "Compliant KEM Combiner",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/26",
      "state": "CLOSED",
      "author": "bencemali",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In NIST's guidelines for key derivation (see https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf) in section 2 they specify an approved method for combining a compliant secret with auxiliary shared secret like so:\r\n\r\n> In addition to the currently approved techniques for the generation of the shared secret Z as\r\n> specified in SP 800-56A and SP 800-56B, this Recommendation permits the use of a \u201chybrid\u201d\r\n> shared secret of the form Z\u2032 = Z || T, a concatenation consisting of a \u201cstandard\u201d shared secret Z that\r\n> was generated during the execution of a key-establishment scheme (as currently specified in [SP\r\n> 800-56A] or [SP 800-56B]) followed by an auxiliary shared secret T that has been generated using\r\n> some other method. The content, format, length, and method used to generate T must be known\r\n> and agreed upon by all parties that will rely upon the derived keying material, as well as by any\r\n> agents trusted to act on their behalf.\r\n\r\nThe present combiner in this draft doesn't include the secret from an approved method first in the input of the KDF:\r\n\r\n> Combiner(ct1, ss1, ct2, ss2, fixedInfo) =\r\n>   KDF(counter || ct1 || ss1 || ct2 || ss2 || fixedInfo, outputBits)\r\n\r\nWe suggest moving either ss1 or ss2 to the beginning of the input to the KDF since concatenating any auxiliary secret to a compliant secret will result in a compliant key when feeding it to a compliant KDF. Even better, if we choose the classical key to be at the beginning (ss2 in the proposed combinations) it would mean that this construction would be considered compliant by NIST even if used with a non-standardized/compliant post-quantum algorithm.\r\n\r\nThe fixed counter value was added to in this draft to be compliant, but in the nist specification the counter must be followed by the compliant secret. In this specification ct1 is not a compliant secret, so this doesn't seem to be a good solution.",
      "createdAt": "2024-04-17T13:49:28Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you for the comment! That is an interesting point.\r\n\r\nEarlier versions of this draft had exactly that: the shared secrets before the ciphertexts. We received feedback that we should swap the order so that it is more friendly to embedded devices: the device will have access to the ciphertext first, and only later will it have access to the shared secret, so if it can stream the ciphertext into the combiner hash function, then it does not need to keep the ciphertext in memory.\r\n\r\nRegardless, if this change makes it impossible to FIPS-certify this under SP 800-56Cr2 (or the r3 that is coming to explicitly allow these hybrids), then that could be a more important consideration.\r\n\r\nI will ask a contact at NIST.",
          "createdAt": "2024-05-08T14:43:13Z",
          "updatedAt": "2024-05-08T14:43:13Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LAMPS discussion thread about this:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/yHFJkBs5qhQ0PIXP4NPK1vC9DAs/",
          "createdAt": "2024-07-04T19:14:59Z",
          "updatedAt": "2024-07-04T19:14:59Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Conclusion of the LAMPS discussion is:\r\n\r\n> [Dang, Quynh H. (Fed)] The above is not compliant with 56C. it needs to be KDF(counter || ss1 || ss2 || ciphertexts).",
          "createdAt": "2024-07-06T01:29:13Z",
          "updatedAt": "2024-07-06T01:29:13Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOKRPFO86OptfQ",
      "title": "Place AlgID at the end of FixedInfo",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/27",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Falko said:\r\n> In order to avoid any possible collisions in the input it is important \r\nthe algID is placed at the end of the fixedInfo string. This ensures \r\nthat the string is uniquely parsable from the rear end, because algID \r\ndefines the lengths of the other strings.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/3Rul4GQ6kgpVZUXaE-kbr-bV9Ck/\r\n\r\nNeeds to be done after #20 .",
      "createdAt": "2024-07-06T01:24:53Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOKRPFO86OqEZI",
      "title": "Slides for LAMPS 120",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/28",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] I think we're converging on a consensus solution with LAMPS mailing list discussions, the parallel openpgp-pqc draft, and CFRG KEM Combiners DT (Mike Ounsworth is a member).\r\n- [ ] The goal is to get this \"within a stone's throw\" of ready so that we can finish it up and get it into WGLC shortly after FIPS 203 (ML-KEM) is final.\r\n- [ ] We're close.\r\n- [ ] Go through changelog\r\n- [ ] Go through open issues:\r\n   - [ ]  #29: The unnecessary OCTET STRING wrapping \r\n- [ ] Discuss Pros / Cons of including the `tradPK` in the combiner.\r\n- [ ] Why `KDF = SHA3` and without a SHA2 option?\r\n   - [ ] We are aware of the feedback (Deb, Joe) that some implementations will not have easy access to SHA-3 at the layer that is implementing the combiner. We have chosen SHA3 because that aligns security analysis with X-Wing and openpgp-pqc. We could _also_ add HMAC-SHA2 variants, but that will 2x the numbers of algs that we're registering (note: you can't just replace SHA3 with SHA2 without losing security properties; it has to be HMAC-SHA2).\r\n- [ ] binary compatibility with X-Wing b/c of LAMPS-specific domSep. Good? Bad?\r\n- [ ] Despite making breaking changes, we did not rev the OIDs; but we are unaware of any working implementations yet (hackathon), so we think this is ok.\r\n- [ ] We have included a USE IN CMS section, but traditionally LAMPS likes to specify the algorithms, and the CMS conventions in separate documents. Do you want us to split them?",
      "createdAt": "2024-07-06T05:01:56Z",
      "updatedAt": "2024-07-19T01:09:37Z",
      "closedAt": "2024-07-19T01:09:37Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "I_kwDOKRPFO86OsrLg",
      "title": "ML-KEM public keys should be unwrapped BIT STRINGS with no ASN.1 typing",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/29",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See parallel issue in composite-sigs:\r\n\r\n* https://github.com/lamps-wg/draft-composite-sigs/issues/9",
      "createdAt": "2024-07-07T14:19:51Z",
      "updatedAt": "2024-09-26T14:45:17Z",
      "closedAt": "2024-09-26T14:45:17Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "I_kwDOKRPFO86OtEHv",
      "title": "Synchronize sections and writing style of composite sigs and kems",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/31",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "By \"synchronize writing style\" I mean that there are probably very similar sections in both drafts that were written independently; we should choose the better text and apply it to both drafts.",
      "createdAt": "2024-07-07T19:05:22Z",
      "updatedAt": "2024-10-21T19:49:17Z",
      "closedAt": "2024-10-21T19:49:17Z",
      "comments": []
    },
    {
      "number": 33,
      "id": "I_kwDOKRPFO86Ot-R_",
      "title": "Send an email to LAMPS about RSA-KEM -> RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/33",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Email draft:\r\n\r\nTO: Douglas Stebila <dstebila@uwaterloo.ca>; Deirdra; bas; Russ Housley <housley@vigilsec.com>; John Gray <John.Gray@entrust.com>; Max Pala <M.Pala@cablelabs.com>; Klau\u00dfner, Jan <Jan.Klaussner@bdr.de>; spams@ietf.org\r\n\r\n> Hi all,\r\n>\r\n>Based on discussion on-list, I have changed the RSA combinations from RSA-KEM [RFC5990] to  RSA-OAEP [RFC3560]. I am not >confident that I have made this change properly, so I would like review of the RSA parts of draft-ietf-lamps-pq-composite-kem-04.\r\n>\r\n>The pull request for just the RSA-KEM -> RSA-OAEP change can be found here:\r\n>\u2022\thttps://github.com/lamps-wg/draft-composite-kem/pull/32\r\n>\r\n>Thanks.\r\n",
      "createdAt": "2024-07-08T01:48:48Z",
      "updatedAt": "2024-07-09T12:58:13Z",
      "closedAt": "2024-07-09T12:58:13Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Z5746qbrg027Jvah8vI-S3ffCR8/",
          "createdAt": "2024-07-09T12:58:12Z",
          "updatedAt": "2024-07-09T12:58:12Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOKRPFO86O8OhA",
      "title": "Issues with the ASN.1 module",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/34",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/LDfrRz-vV8JAZyIk3Xmp7ijtnHE/",
      "createdAt": "2024-07-09T12:58:46Z",
      "updatedAt": "2024-09-08T14:32:30Z",
      "closedAt": "2024-09-08T14:32:30Z",
      "comments": []
    },
    {
      "number": 35,
      "id": "I_kwDOKRPFO86O83wq",
      "title": "Russ feedback on RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/35",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/e7OlkcpDMtOWbGLPQB1hEPyyjXQ/\r\n\r\n---\r\nMike:\r\n\r\nI think you should reference Section 7.1 of RFC 8017 for the RSA-OAEP specification.\r\n\r\nThen, the description should use RSAES-OAEP-ENCRYPT and RSAES-OAEP-DECRYPT as specified there.\r\n\r\nI assume that you are thinking about the L parameter being an empty string.\r\n\r\nThe Mask Generation Function needs to be specified.  I assume you want to use MGF1 from Appendix B.2.1 of RFC 8017.  I think you can state the maskLen for the two cases that you are supporting.\r\n\r\nRuss\r\n\r\n\r\n",
      "createdAt": "2024-07-09T14:02:42Z",
      "updatedAt": "2024-09-12T20:56:14Z",
      "closedAt": "2024-09-12T20:56:14Z",
      "comments": []
    },
    {
      "number": 37,
      "id": "I_kwDOKRPFO86PbIhZ",
      "title": "Create RSA-4096 combos",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/37",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "We have been asked to add RSA-4096 combos for existing infrastructures where deployed software or policy requires 4096 bit keys.\r\n\r\nSuggestion is that since RSA 4096 is not much above 128 bit security (certainly not as much as AES-192 or SHA-384), we should pair it with the same cipher suites as the RSA-3072 combo. Or maybe even replace the 4096 combo?",
      "createdAt": "2024-07-12T20:01:06Z",
      "updatedAt": "2024-08-29T20:39:44Z",
      "closedAt": "2024-08-29T20:39:44Z",
      "comments": []
    },
    {
      "number": 38,
      "id": "I_kwDOKRPFO86PxLVR",
      "title": "Add back text to not reuse component keys",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/38",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "For the security proofs, it is imperative that the RSA / ECC keys be generated fresh for the composite and not re-used from existing deployments. I swear we had text to this effect. Certainly this deserves its own Security Consideration section.\r\n\r\nOnce we have this text ready, ping Sophie Schmieg to review it.",
      "createdAt": "2024-07-16T20:58:05Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOKRPFO86QccBJ",
      "title": "NIST is suggesting that both PQ L3 + L5 should be paired with P-384",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/39",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://datatracker.ietf.org/doc/slides-120-openpgp-pqc-with-nist-and-brainpool-curves/",
      "createdAt": "2024-07-22T17:19:21Z",
      "updatedAt": "2024-09-28T17:01:44Z",
      "closedAt": "2024-09-28T17:01:44Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOKRPFO86QcgDZ",
      "title": "Both ss1||ss2 or ss2||ss1 are allowed in SP.800-56Cr2",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/40",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Wow. Ok. I completely mis-read Quynh's email to LAMPS:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Yh5AelwiAOXhhdjEPzWPmWekYLA/\r\n\r\n> Similarly, the order of ss1 and ss2 may be in reverse and run the \"Process\" on page14 in SP 800-56r2 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf .\r\n\r\nThat means we can un-twist the order in which the ss inputs are fed into the KDF; because in fact we do not need to put the traditional alg first -- keep everything consistent with the order (mlkem, trad).",
      "createdAt": "2024-07-22T17:28:56Z",
      "updatedAt": "2024-08-28T14:34:29Z",
      "closedAt": "2024-08-28T14:34:29Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To the extent possible, synchronize with the equivalent OpenPGP drafts:\r\n\r\nhttps://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220386567\r\n\r\nRequest a meeting with Quynh, Falko, Aron.\r\nWe also want to discuss whether we can (and whether we should) synchronize domain separators so that our composite KEMs are binary compatible.",
          "createdAt": "2024-07-22T17:30:38Z",
          "updatedAt": "2024-07-26T22:18:14Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOKRPFO86Qk3iK",
      "title": "More comments from Carl",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/41",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Looking at this fresh today, I have a new question.\r\n\r\nSections 2.3.4 and 2.3.5 have this:\r\n\r\nss = Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep)\r\n\r\nSection 4.3 has this:\r\n\r\nKEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n  KDF(counter || tradSS || mlkemSS || tradCT || tradPK ||\r\n       domSep, outputBits)\r\n\r\nI don't understand the <- followed by =. Is it fair to say that 2.3.4 and 2.3.5 could be written this way:\r\n\r\ncompositeSS = Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep)\r\n\r\nAnd 4.3 written this way:\r\n\r\nKEK = KDF(counter || compositeSS, outputBits)",
      "createdAt": "2024-07-23T16:08:39Z",
      "updatedAt": "2024-09-12T21:21:15Z",
      "closedAt": "2024-09-12T21:21:14Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revisit this after PR #55 is merged (it should resolve Carl's comment, but should double-check).",
          "createdAt": "2024-08-24T18:29:37Z",
          "updatedAt": "2024-08-24T18:29:37Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOKRPFO86QlCWx",
      "title": "Add security consideration about reliance on X-Wing pre-image",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/42",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/Kxol5ZgDR777Y58XsLPHwvl6uY8/\r\n\r\n\r\nFrom Peter C:\r\n\r\n> Secondly, X-Wing fundamentally relies on ML-KEM remaining ciphertext second pre-image resistant.  This means that it cannot mitigate ML-KEM implementation vulnerabilities.  If decapsulation fails to perform the ciphertext check properly, for example, then it's trivial to find ML-KEM second pre-images and break the IND-CCA2 security of X-Wing.  This isn't an issue if your goal is only to mitigate algorithmic vulnerabilities, but you need to be explicit about that.  At the very least, you need to reconsider \"we also cannot immediately place complete trust in post-quantum replacements until they have undergone extensive scrutiny and real-world testing to uncover and rectify potential implementation flaws\" in the introduction.\r\n\r\n\r\nWe either need to add Security Consideration text to this effect, or strengthen the combiner. I believe that binding the ML-KEM CT and PK would solve this?",
      "createdAt": "2024-07-23T16:31:37Z",
      "updatedAt": "2024-09-28T17:01:31Z",
      "closedAt": "2024-09-28T17:01:31Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Comment from Britta Hale:\r\n\r\n> SHA3 does offer more properties...\r\n>Then, if all of the above holds, I would just suggest adding a remark that the draft is based on analyzed component choices, and should not be extrapolated to SHA2 or other constructions without analysis. (Basically, something to preempt someone making a draft in 5 yrs and saying \"but they did it, it must work generically!\").\r\n",
          "createdAt": "2024-07-26T22:21:04Z",
          "updatedAt": "2024-07-26T22:21:04Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- [ ] TODO: find a citation for SHA3 being equivalent to HKDF-SHA2 -- probably the X-Wing paper will do.\r\n\r\n- [ ] ping Brita, Peter C, and Falko to specifically review the added Sec-Cons text tagged against this issue.",
          "createdAt": "2024-08-24T18:30:37Z",
          "updatedAt": "2024-09-08T15:25:24Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOKRPFO86Qnc3R",
      "title": "Clarify the SHA3 OIDs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/43",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Mike Ounsworth: Yeah, it should be referencing id-sha3-256 and friends from here:\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-sha3-hash-04#name-message-digest-algorithms\r\n\r\nThat should be made clearer in the composite-KEM draft and actually reference them by OID.\r\nSpecifically, this is in the \"## Underlying Components\" section where the OIDs are needed for CMS.",
      "createdAt": "2024-07-23T23:10:05Z",
      "updatedAt": "2024-09-28T17:00:30Z",
      "closedAt": "2024-09-28T17:00:30Z",
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOKRPFO86Q5Eu3",
      "title": "Update the acknowledgements",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/44",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Add\r\n\r\n> The authors thank the following people for providing review of the cryptographic constructs\r\n\r\nPeter C, Sophie Schmieg, Deirdre Connolly, Douglas Stebila, Falko",
      "createdAt": "2024-07-25T19:55:01Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Make sure that Dan van Geest is also mentioned.",
          "createdAt": "2024-07-25T19:55:43Z",
          "updatedAt": "2024-07-25T19:55:43Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOKRPFO86Q5LX1",
      "title": "Can we remove the stupid counter?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/45",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "From Falko:\r\n\r\n> Actually it seems the counter can be omitted if there is only one hash function invocation in the KDF: see Quynh's comment here: [https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10#issuecomment-2220090284](https://urldefense.com/v3/__https:/github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10*issuecomment-2220090284__;Iw!!FJ-Y8qCqXTj2!eom3NkR-W2xoJGcKEtuusgLkqyA-uDOgHpv07v2OjzKuONz1STgLKCE-u6KLON2NO08W7OUuyGCGEM-Tbn2hnr-0fygp6Q$)",
      "createdAt": "2024-07-25T20:14:32Z",
      "updatedAt": "2024-08-28T14:34:29Z",
      "closedAt": "2024-08-28T14:34:29Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Make sure to update the FIPS Compliance section, especially to reference  the secondary NIST documents that make this ok. -- basically we want someone to be able to hand this section to their FIPS lab, and the argument is all laid out for them.\r\n\r\nFrom Quynh on the above openpgp thread:\r\n> The counter is allowed to be skipped when the hash function is executed only once as specified on page 159 here: https://csrc.nist.gov/csrc/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/FIPS%20140-3%20IG.pdf\r\n> When X is a pseudorandom key, not a raw shared secret,  KMAC-KDF in SP 800-108 (on page 11 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-108r1-upd1.pdf ) is an approved KDF where the Key Derivation Key (K) is a concatenation of multiple pseudorandom keys as specified in Section 6.3 pages 21 & 22 here :  https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-133r2.pdf",
          "createdAt": "2024-07-26T21:37:35Z",
          "updatedAt": "2024-07-26T21:37:35Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOKRPFO86Q5YkH",
      "title": "Editorial comments from Piotr",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/46",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/\r\n\r\n2. Notes on the document \"Composite KEM\" version 4 (order of appearance)\r\na) Section 2.3.1\r\n> (\u2026) it produces a composite public key pk as per Section 3.2 and a composite\r\n>   secret key sk is per Section 3.3.\r\nit produces a composite public key pk as per Section 3.2 and a composite\r\nsecret key sk as per Section 3.3.\r\n\r\nb) Section 2.3.2\r\n> DHKEM.Encaps(pkR):\r\nRSA-OAEP.Encaps(pkR):\r\n\r\n> DHKEM.Decap(skR, enc):\r\nRSA-OAEP.Decap(skR, enc):\r\n\r\nc) Section 3.1\r\n> pk-MLKEM512-ECDH-P256 PUBLIC-KEY ::=\r\n>     pk-CompositeKEM {\r\n>       id-MLKEM512-ECDH-P256,\r\n>        OCTET STRING, ECPoint }\r\npk-MLKEM512-ECDH-P256 PUBLIC-KEY ::=\r\n     pk-CompositeKEM {\r\n       id-MLKEM512-ECDH-P256,\r\n       BIT STRING, ECPoint }\r\n\r\nd) Section 3.2\r\n> A composite key MUST contain two component public keys.  The order \r\n> of the component keys is determined by the definition of the corresponding\r\n> algorithm identifier as defined in section Section 5.\r\nA composite key MUST contain two component public keys as SEQUENCE of\r\ntwo bit strings.  The order of the component keys is determined by the\r\ndefinition of the corresponding algorithm identifier as defined in \r\nSection 5.\r\n\r\ne) Section 3.3\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n>\r\n>   Each element is a OneAsymmetricKey` [RFC5958] object for a component\r\n>   private key.\r\n>\r\n>   The parameters field MUST be absent.\r\n>\r\n>   The order of the component keys is the same as the order defined in\r\n>  Section 3.2 for the components of CompositeKEMPublicKey.\r\n>\r\n>   When a CompositePrivateKey is conveyed inside a OneAsymmetricKey\r\n>   structure (version 1 of which is also known as PrivateKeyInfo)\r\n>  [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n>  corresponding composite algorithm identifier defined according to\r\n>   Section 5, the privateKey field\r\n>   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n>   NOT be present. Associated public key material MAY be present in the\r\n>   CompositeKEMPrivateKey.\r\n\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\n   Each element is a OneAsymmetricKey` [RFC5958] object for a component\r\n   private key (privateKey field).\r\n\r\n   The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.\r\n\r\n   When a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\nf) Section 4.2\r\n> 4.2.  CompositeCiphertextValue\r\n>\r\n>   The compositeCipherTextValue is a concatenation of the\r\n>   ciphertexts of the underlying component algorithms.  It is represented\r\n>   in ASN.1 as follows:\r\n\r\n4.2.  CompositeCipherTextValue\r\n\r\n   The compositeCipherTextValue is a sequence of the\r\n   ciphertexts of the underlying component algorithms.  It is represented\r\n   in ASN.1 as follows:\r\n\r\ng) Section 4.3\r\n> KEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n>      KDF(counter || tradSS || mlkemSS || tradCT || tradPK ||\r\n>          domSep, outputBits)\r\n>\r\n>                Figure 1: Generic KEM combiner construction\r\n>\r\n>   where:\r\n>\r\n>   *  KDF(message, outputBits) represents a hash function suitable to\r\n>      the chosen KEMs according to {tab-kem-combiners}.\r\n>\r\n>   *  counter SHALL be the fixed 32-bit value 0x00000001 which is placed\r\n>      here solely for the purposes of compliance with [SP.800-56Cr2].\r\n>\r\n>   *  tradSS is the shared secret from the traditional component\r\n>      (elliptic curve or RSA).\r\n>\r\n>   *  mlkemSS is the shared secret from the ML-KEM componont.\r\n>\r\n>   *  tradCT is the ciphertext from the traditional component (elliptic\r\n>      curve or RSA).\r\n>\r\n>   *  tradPK is the public key of the traditional component (elliptic\r\n>      curve or RSA).\r\n>   *  domSep SHALL be the DER encoded value of the object identifier of\r\n>      the composite KEM algorithm as listed in Section 5.1.\r\n>\r\n>   *  || represents concatenation.\r\n> \r\n> Each registered composite KEM algorithm must specify the choice of\r\n>   KDF, demSep, and outputBits to be used.\r\nKEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n\r\n   SHA3(counter || tradSS || mlkemSS || tradCT || tradPK || domSep)\r\n         ([SP.800-56Cr2] Section 4.1 Option 1 (when KDF is SHA3))\r\n\r\n                Figure 1: Generic KEM combiner construction\r\n\r\n   where:\r\n\r\n   *  counter SHALL be the fixed 32-bit value 0x00000001 which is placed\r\n      here solely for the purposes of compliance with [SP.800-56Cr2].\r\n\r\n   *  tradSS is the shared secret from the traditional component (ECDH or RSA).\r\n\r\n   *  mlkemSS is the shared secret from the ML-KEM component.\r\n\r\n   *  tradCT is the ciphertext from the traditional component (ECDH or RSA).\r\n      Note: In the case of ECDH, this is the sender's ephemeral public key.\r\n\r\n   *  tradPK is the recipient's public key of the traditional component (ECDH or RSA).\r\n\r\n   *  domSep SHALL be the DER encoded value of the object identifier of\r\n      the composite KEM algorithm as listed in Section 5.1.\r\n\r\n   *  || represents concatenation.\r\n\r\n   Each registered composite KEM algorithm (see {tab-kem-combiners}) must\r\n   specify the choice of KDF (ie. type of SHA3 function) and domSep\r\n   to be used.\r\nComment:\r\n1. The use of the counter parameter is probably redundant - see Falko Strenzke email from 2024/07/24\r\n2. Removing outputBits is related to replacing KMAC with SHA3.\r\n\r\nh) Section 4.4\r\n> This construction is specifically designed to conform with\r\n>   Section 4.1 Option 1 (when KDF is SHA3) or Option 3 (when KDF is\r\n>   KMAC) in the following way:\r\n>\r\n>   In both cases we match exactly the construction using the allowed\r\n>   \"hybrid\" shared secret of the form Z' = Z || T to yield the\r\n>   construction\r\nThis construction is specifically designed to conform with [SP.800-\r\n56Cr2] Section 4.1 Option 1 (when KDF is SHA3). In any cases we match exactly the\r\nconstruction using the allowed \"hybrid\" shared secret of the form\r\n   Z' = Z || T (see Section 2 of the [SP.800-56Cr2]) to yield the construction:\r\n\r\n(\u2026)\r\nThe last sentence starting with: \u201cIn the case that KDF is KMAC,\u2026\u201d\r\nshould be removed.\r\n\r\n------\r\nPiotr Popis\r\n",
      "createdAt": "2024-07-25T20:54:30Z",
      "updatedAt": "2024-09-27T08:20:19Z",
      "closedAt": "2024-09-26T21:11:00Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More editorial feedback here:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/",
          "createdAt": "2024-07-31T23:07:55Z",
          "updatedAt": "2024-07-31T23:07:55Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Piotr,\r\n\r\nThank you so much for this detailed review. I have incorporated most of your feedback in <commit>.\r\n\r\nThe one that I didn't understand is your comment \"e) Section 3.3\". You are suggesting changing \r\n\r\nOLD\r\n\"\"\"\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key.\r\n\"\"\"\r\n\r\nNEW\r\n\"\"\"\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key (privateKey field).\r\n\"\"\"\r\n\r\nI suppose that basically means SEQUENCE OF OCTET STRING{ DER{ OneAsymmetricKey } }\r\n\r\nCan you explain the advantage of this vs just encoding the OneAsymetricKey directly? Or have I misunderstood your suggestion?\r\n\r\n\r\n\r\nYou made a suggestion that the \"Use in CMS\" section should specify a mandatory-to-implement subset of the larger table of composite algorithms:\r\n\r\n\"\"\"\r\n6.1.  Underlying Components\r\n\r\nA CMS implementation that supports a composite KEM algorithm MUST\r\n\r\nsupport at least the following underlying components:\r\n\r\nid-MLKEM512-ECDH-P256\r\n\r\nid-MLKEM512-RSA (RSA 2048 and RSA 3072)\r\n\r\nid-MLKEM1024-ECDH-P521\r\n\"\"\"\r\n\r\nUnless the WG feels strongly, I am going to leave out any concept of \"mandatory-to-implement\" from this draft. X.509 and CMS are used in such broad and diverse applications and jurisdictions that I don't think we are in a position to make policy recommendations.\r\n",
          "createdAt": "2024-09-12T22:22:12Z",
          "updatedAt": "2024-09-12T22:22:12Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Section 3.3\r\nIn your proposal there is:\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n\r\nAccording to RFC 5958:\r\nOneAsymmetricKey ::= SEQUENCE {\r\nversion                      Version,\r\nprivateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\nprivateKey                PrivateKey,\r\nattributes [0]  Attributes OPTIONAL,\r\n...,\r\n[[2: publicKey [1] PublicKey OPTIONAL ]],\r\n...\r\n}\r\nPrivateKey ::= OCTET STRING\r\n\r\nI believe that to specify a pair of composite private keys, a single sequence of OneAsymmetricKey is sufficient, in which the privateKey field will be a sequence of two OCTET STRING, each of which contains the private key of the appropriate algorithm (order by OID). Ie.:\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\nPrivateKey ::= CompositeKEMPrivateKey  \r\n\r\nOne OneAsymmetricKey sequence (instead of two) allows the use of a composite OID pointer to the algorithm identifier (it is not clear to me whether in your proposal of two OneAsymmetricKey sequences there would be a repeated composite OID as stated the text into Section 3,3?; or rather separate OIDs pointing to individual algorithms?).\r\n\r\nFurthermore, there is an incomprehensible note in your proposal:\r\nWhen a Composite(KEM?)PrivateKey is conveyed inside a OneAsymmetricKey structure (...)\r\nthe privateKey field SHALL contain the CompositeKEMPrivateKey...\r\nConsidering that \r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\nthis means that \r\nPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey,\r\nand yet the privateKey field is inside the OneAsymmetricKey sequence.\r\n\r\nAfter my corrections the relevant text is rather understandable:\r\nWhen a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\n\r\n",
          "createdAt": "2024-09-13T09:59:38Z",
          "updatedAt": "2024-09-13T09:59:38Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @PiotrPopis \r\n\r\nYou propose:\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\ninstead of\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\nThis point is covered by #59, and is currently being discussed on the LAMPS mailing list. Let's see how that discussion plays out.\r\n\r\n\r\n> One OneAsymmetricKey sequence (instead of two) allows the use of a composite OID pointer to the algorithm identifier (it is not clear to me whether in your proposal of two OneAsymmetricKey sequences there would be a repeated composite OID as stated the text into Section 3,3?; or rather separate OIDs pointing to individual algorithms?)\r\n\r\nGood point! The text does not state which AlgorithmIDs should be placed in the component OneAsymmetricKeys. Thanks for pointing this out. I don't have an opinion yet, but I'll add it to the list to think about. I have added #72 and https://github.com/lamps-wg/draft-composite-sigs/issues/55 to track this.\r\n\r\n\r\n\r\n> Furthermore, there is an incomprehensible note in your proposal:\r\n\r\nSounds like you comprehended it just fine :)\r\n\r\nThe intention is exactly what you figured out: we are putting `PrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey` inside another OneAsymmetricKey. This is the topic being discussed in #59 ",
          "createdAt": "2024-09-26T21:08:39Z",
          "updatedAt": "2024-09-26T21:08:39Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that everything has either been addressed, or has other issues open, so I am closing this issue. @PiotrPopis please let me know if I missed anything.",
          "createdAt": "2024-09-26T21:11:00Z",
          "updatedAt": "2024-09-26T21:11:00Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "1. Editorial comments - OK.\r\n2. Considering Section 3.3 I would like to make a small change: \r\nOLD (draft):\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key.\r\nNEW:\r\nEach element is a OCTED STRING for a component\r\nprivate key placed in the privateKey field of the OneAsymmetricKey [RFC5958].\r\n\r\nComment:\r\nI stand by my earlier arguments for changing the two OneAsymmetricKey sequences for private keys to a single OneAsymmetricKey sequence and a privateKey field containing the two private keys in a two-element sequence.\r\n\r\nI also note that there is agreement for public keys to be stored in a two-element sequence:\r\nCompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n\r\n[draft] (as well as RFC 5958) allows for the optional placement of the public key in the OneAsymmetricKey. In the case of two OneAsymmetricKey structures, both would contain two public keys (two-element sequence), which is a bad solution. My proposal is free from this problem - one OneAsymmetricKey structure with a privateKey field containing two private keys, an optional publicKey field containing two public keys, and one privateKeyAlgorithm field containing an OID pointing to the composite pair and indicating the order.\r\n",
          "createdAt": "2024-09-27T08:20:18Z",
          "updatedAt": "2024-09-27T08:20:18Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOKRPFO86Q5ZAy",
      "title": "Reducing the algorithm list",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/47",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/\r\n\r\nSophie suggests removing ML-KEM512 and possibly the ML-KEM1024 combinations.\r\n\r\nPiotr proposes a full updated table with a reduced list.",
      "createdAt": "2024-07-25T20:55:51Z",
      "updatedAt": "2024-09-28T17:01:13Z",
      "closedAt": "2024-09-28T17:01:13Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The other consideration here is aligning with OpenPGP, and particularly the combinations suggested by Quynh Dang in his OpenPGP slides.\r\n\r\nhttps://datatracker.ietf.org/meeting/120/materials/slides-120-openpgp-pqc-with-nist-and-brainpool-curves",
          "createdAt": "2024-07-25T20:59:06Z",
          "updatedAt": "2024-07-25T20:59:06Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More comment from Sophie:\r\n\r\n> For compliance, the most important considerations are on the classic side of the hybrid, with the only PQC compliance requirements going beyond the security analysis above being CNSA's wish for ML-KEM1024. But CNSA2 also prefers non-hybrid solutions, so I'm not sure whether we should hybridize with ML-KEM1024 at all. For ML-KEM512, there currently seems to be no compliance forcing its adoption over ML-KEM768, with only some performance considerations having slight preferences, but in my opinion the security considerations weigh heavier here, and we should find other ways to alleviate the performance issues.",
          "createdAt": "2024-07-29T14:37:12Z",
          "updatedAt": "2024-07-29T14:37:12Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can remove any ML-KEM512/brainpool combinations: https://mailarchive.ietf.org/arch/msg/spasm/hgqa5pfwrg6-I5BTA4mjw3vMs1Y/\r\n\r\nANSSI/BSI are the brainpool proponents, however they only allow ML-KEM768/1024.",
          "createdAt": "2024-08-02T08:20:54Z",
          "updatedAt": "2024-08-02T08:20:54Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has been merged.",
          "createdAt": "2024-09-28T17:01:13Z",
          "updatedAt": "2024-09-28T17:01:13Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOKRPFO86RBFo0",
      "title": "Don't name-collide \"DHKEM\" with 9180",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/48",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "Call it something else?\r\nNot sure what.\r\nThis with Peter Campbell's comment in LAMPS 120 chat.\r\n\r\nSophie suggested ECIES -- but I don't think that's quite right either since we are not doing the symmetric encryption + MAC step.\r\n\r\nPersonally, I think we should leave it as \"DHKEM\" -- I don't think 9180 should have a monopoly on this term.",
      "createdAt": "2024-07-26T21:10:03Z",
      "updatedAt": "2024-10-21T19:49:07Z",
      "closedAt": "2024-10-21T19:49:07Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOKRPFO86RBNxj",
      "title": "Are we sufficiently clear about what encoding of the public key to feed into the KDF?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/49",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "I assume it should be the raw bits from the SPKI, and not hash in any ASN.1 wrapping. This will make it the most binary-compatible with OpenPGP and others.",
      "createdAt": "2024-07-26T21:41:14Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOKRPFO86Rcyi6",
      "title": "Add text in private key section that requires the public key ",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/50",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "If we require binding of the public key for RSA/EC then we need to update the private key section to indicate the public key is needed (or a copy of it needs to be kept somewhere).\r\n",
      "createdAt": "2024-07-31T14:45:10Z",
      "updatedAt": "2024-09-28T17:00:30Z",
      "closedAt": "2024-09-28T17:00:30Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOKRPFO86Rdc9A",
      "title": "SHA2 and SHA3 combinations",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/51",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "The authors suggest, rather than 2x'ing the whole list, we do the following:\r\n\r\nAll RSA combinations use HKDF-SHA2.\r\nEach of the P256 and brainpoolP256 combinations are offered with both SHA3 (to align with X-Wing), and HKDF-SHA2. The new list would then be:\r\n\r\n```\r\n| Composite KEM                     | KDF       |\r\n|---------                          | --------  |\r\n| id-MLKEM512-ECDH-P256             | SHA3-256  |\r\n| id-MLKEM512-ECDH-P256             | HKDF-SHA2 |\r\n| id-MLKEM512-ECDH-brainpoolP256r1  | SHA3-256  |\r\n| id-MLKEM512-ECDH-brainpoolP256r1  | HKDF-SHA2 |\r\n| id-MLKEM512-X25519                | SHA3-256  |\r\n| id-MLKEM512-RSA2048               | HKDF-SHA2 |\r\n| id-MLKEM512-RSA3072               | HKDF-SHA2 |\r\n| id-MLKEM512-RSA4096\u2003\u2003\u2003\u2003        | HKDF-SHA2 |\r\n| id-MLKEM768-ECDH-P256             | SHA3-384  |\r\n| id-MLKEM768-ECDH-P256             | HKDF-SHA2 |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | SHA3-384  |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | HKDF-SHA2 |\r\n| id-MLKEM768-X25519                | SHA3-384  |\r\n| id-MLKEM1024-ECDH-P384            | SHA3-512  |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | SHA3-512  |\r\n| id-MLKEM1024-X448                 | SHA3-512  |\r\n{: #tab-kem-algs title=\"Composite KEM key types\"}\r\n```",
      "createdAt": "2024-07-31T16:09:54Z",
      "updatedAt": "2024-08-29T20:39:44Z",
      "closedAt": "2024-08-29T20:39:44Z",
      "comments": []
    },
    {
      "number": 52,
      "id": "I_kwDOKRPFO86Rf-xg",
      "title": "Re-assign all OIDs and update domain separators",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/52",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T22:54:23Z",
      "updatedAt": "2024-09-06T21:02:12Z",
      "closedAt": "2024-09-06T21:02:12Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "I assigned the OID internally for prototype testing:\r\n\r\n2.16.840.1.114027.80.5.2.21   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA2048 060B6086480186FA6B50050215\r\n2.16.840.1.114027.80.5.2.22   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA3072 060B6086480186FA6B50050216\r\n2.16.840.1.114027.80.5.2.23   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA4096 060B6086480186FA6B50050217\r\n2.16.840.1.114027.80.5.2.24   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-X25519  060B6086480186FA6B50050218\r\n2.16.840.1.114027.80.5.2.25   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P384             060B6086480186FA6B50050219\r\n2.16.840.1.114027.80.5.2.26   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-brainpoolP256r1  060B6086480186FA6B5005021A\r\n2.16.840.1.114027.80.5.2.27   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-P384            060B6086480186FA6B5005021B\r\n2.16.840.1.114027.80.5.2.28   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-brainpoolP384r1 060B6086480186FA6B5005021C\r\n2.16.840.1.114027.80.5.2.29   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-X448                 060B6086480186FA6B5005021D",
          "createdAt": "2024-08-29T20:51:58Z",
          "updatedAt": "2024-08-29T20:51:58Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOKRPFO86RpPjG",
      "title": "Should we have a security proof for the ML-KEM+RSA-OAEP composite KEM?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/54",
      "state": "OPEN",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For a security proof of the ML-KEM + ECDH combos, we can point to the X-Wing paper. We should have a similar proof for the RSA-OAEP combos. Not sure how to go about attracting someone to help with this, or if we should attempt proof-writing ourselves.",
      "createdAt": "2024-08-01T21:31:58Z",
      "updatedAt": "2024-08-01T21:31:58Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 58,
      "id": "I_kwDOKRPFO86S31jH",
      "title": "Update draft to support official ML-KEM Standard",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/58",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The final standard was released today.  We need to update the draft to reference the official ML-KEM standard\r\nhttps://csrc.nist.gov/pubs/fips/203/ipd\r\n",
      "createdAt": "2024-08-13T19:54:12Z",
      "updatedAt": "2024-08-29T19:39:10Z",
      "closedAt": "2024-08-29T19:39:10Z",
      "comments": []
    },
    {
      "number": 59,
      "id": "I_kwDOKRPFO86S_CbX",
      "title": "Public key and private key compression",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/59",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "See: https://github.com/lamps-wg/draft-composite-sigs/issues/6\r\n\r\nThe work here is just to copy over the fix from Sigs.",
      "createdAt": "2024-08-14T14:22:21Z",
      "updatedAt": "2024-10-20T01:33:26Z",
      "closedAt": "2024-10-20T01:33:26Z",
      "comments": []
    },
    {
      "number": 60,
      "id": "I_kwDOKRPFO86S_LVT",
      "title": "List security strength of each composite",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/60",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See:\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/29",
      "createdAt": "2024-08-14T14:35:22Z",
      "updatedAt": "2024-10-17T19:54:36Z",
      "closedAt": "2024-10-17T19:54:36Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "It is hard to quantify the overall strength at any given point it time, because it changes based on cryptanalysis. Therefore, we don't think this table would add value. We have added a strong security considerations section that talks about the strength of the algorithms in terms of their underlying notions.",
          "createdAt": "2024-10-17T19:54:36Z",
          "updatedAt": "2024-10-17T19:54:36Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOKRPFO86TA-ma",
      "title": "List overall strength estimates for each composite",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/61",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: https://mailarchive.ietf.org/arch/msg/spasm/s0wPyhHpaxKsSKMwLBypagm4iL0/",
      "createdAt": "2024-08-14T18:10:08Z",
      "updatedAt": "2024-08-26T19:56:53Z",
      "closedAt": "2024-08-26T19:56:52Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #60 ",
          "createdAt": "2024-08-26T19:56:52Z",
          "updatedAt": "2024-08-26T19:56:52Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOKRPFO86TQ4or",
      "title": "Digicert feedback",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/62",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/ReWx7kichMke-HuTHjCih3iZpD0/\r\n\r\nDigiCert's CA engineering team has some comments on the open issues related\r\nto the composite-sigs draft. We're going to put them in one email just\r\nbecause we have comments on quite a few of them.\r\n\r\nISSUE #1\r\n(Github issue:  https://github.com/lamps-wg/draft-composite-sigs/issues/9)\r\n\r\nASN.1 wrapping confuses people. This came up in the hash-based signatures\r\nupdates last call. Nobody knows what ASN.1 is, or what the consequences\r\nof omiting it are (to be clear, there are really none).\r\n\r\nWe agree that this is largely a question of people being unfamiliar with\r\nASN.1, and that explanatory text is sufficient. All that is needed is a\r\nclear explanation of example what the BIT STRING is, and explaining that\r\nit's simply the bits of the key itself seems pretty straightforward.\r\n\r\nOne can then say something similar to: \r\n\r\n\"In some situations and protocols, the key might be wrapped in ASN.1 or \r\nmay have some other additional decoration or encoding. If so, such wrapping \r\nMUST be removed prior to encoding the key itself as a BIT STRING.\"\r\n\r\nHopefully that makes things crystal clear.\r\n\r\nISSUE #2\r\n(Github Issue: https://github.com/lamps-wg/draft-composite-sigs/issues/19)\r\n\r\nWe don't think it's worth the extra complexity and expense of an additional\r\nhash operation just to achieve a fixed size output. The variation in size\r\nis already pretty small.\r\n\r\nISSUE #3\r\n(Github issue: https://github.com/lamps-wg/draft-composite-sigs/issues/6)\r\n\r\nAgain, we don't believe the additional complexity is worth it for a pretty\r\ntrivial improvement in the private key size. But it's not a strong opinion,\r\nwe could go either way.\r\n\r\nOpen Issues affect both Composite Signatures and Composite KEM:\r\nISSUE #4\r\n\r\nChair hat off, I and the CA team are concerned about the slow progress of \r\nthe composite signature work. In particular, tying it to the Composite KEM\r\ndraft and waiting for the CFRG work on KEM Combiners seems like an\r\nabsolutely horrible idea to us. We would like to see Composite Signatures\r\nprogress ASAP.\r\n\r\nISSUE #5\r\n(Github issues:\r\nhttps://github.com/lamps-wg/draft-composite-kem/issues/37\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/24\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/23)\r\n\r\nThis is a fun one, and we've spent quite a bit of time discussing it\r\ninternally.\r\n\r\nIn particular, we're still debating the question about exactly how many\r\nbackwards compatibility options are really necessary. For example, given\r\nthat you already need to add lattice, is it really necessary to allow\r\nPKCS15 to continue to exist? For RSA, there's the reasonable argument that\r\nthat might be all you have in your validated hardware/software, but if you\r\nhave RSA as a primitive, can't you do PSS instead of PKCS15? Remember, you\r\nalready have to make changes on both the signing and verify side anyway.\r\n\r\nWe're trending in the direction of thinking that the primary decision is\r\nthe security level and post-quantum algorithm, and the classical side is\r\njust determined by what \"makes sense\" for that security level and algorithm.\r\n\r\nSo what you really want is something like \"id-SL1-MLKEM-RSA\" where the\r\ndocument specifies exactly what \"RSA\" means in the context of a SL1 MLKEM512\r\ncomposite, e.g. RSA4096-PSS-SHA512. This basically means striving for\r\nat most one combination for each triple of (security level, PQC flavor, classical \r\nflavor) and eliminating unnecessary complexity and diversity of options in what \r\nis essentially a redundancy/backup mechanism.\r\n\r\nThe basic idea is to more aggressively standardize the backwards \r\ncompatibility options to only what's actually necessary, instead of\r\ntrying to be backwards compatible with the universe of current behavior,\r\nwhich both unnecessarily complicates things, and preserves some practices\r\n(e.g. PKCS15) longer than is perhaps prudent.\r\n\r\n-Tim\r\n",
      "createdAt": "2024-08-16T17:29:56Z",
      "updatedAt": "2024-10-19T22:51:36Z",
      "closedAt": "2024-10-19T22:51:35Z",
      "comments": []
    },
    {
      "number": 63,
      "id": "I_kwDOKRPFO86UGsob",
      "title": "Update the Sec Con about alg choice criteria once the on-list discussion settles",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/63",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "",
      "createdAt": "2024-08-24T18:29:20Z",
      "updatedAt": "2024-09-28T17:00:32Z",
      "closedAt": "2024-09-28T17:00:32Z",
      "comments": []
    },
    {
      "number": 64,
      "id": "I_kwDOKRPFO86UjRPn",
      "title": "Align with SP 800-227",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/64",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] Align the combiner.\r\n- [ ] Fix \"## FIPS Compliance {#sec-fips-compliance}\" to match.",
      "createdAt": "2024-08-28T14:34:52Z",
      "updatedAt": "2024-10-17T19:55:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting with NIST happened on October 17th 2024.  We did not find out any new details of content, it is still an open issue.",
          "createdAt": "2024-10-17T19:55:35Z",
          "updatedAt": "2024-10-17T19:55:35Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOKRPFO86Vrjy6",
      "title": "Align CMS KDF choice to Dan vG's cms-kyber draft",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/65",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current CMS KEMRI Conventions:\r\n\r\n| Composite KEM OID                 | KDF         | Key Encryption Alg |\r\n|---------                          | ---         | ---                |\r\n| id-MLKEM768-RSA2048               | SHA3-256 | id-aes128-Wrap     |\r\n| id-MLKEM768-RSA3072               | SHA3-256 | id-aes128-Wrap     |\r\n| id-MLKEM768-ECDH-P384             | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM768-X25519                | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM1024-ECDH-P384            | SHA3-512 | id-aes256-Wrap     |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | SHA3-512 | id-aes256-Wrap     |\r\n| id-MLKEM1024-X448                 | SHA3-512 | id-aes256-Wrap     |\r\n{: #tab-cms-kdf-wrap title=\"REQUIRED pairings for CMS KDF and WRAP\"}\r\n\r\n\r\nWhich does not currently align with the KDFs used internally within the Composite KEM Combiner, and in fact here it needs to be a proper variable-length KDF since KEMRI has an `L' parameter, so this needs to be fixed. I guess it makes sense for me to align to whatever Dan picks in draft-cms-kyber.\r\n",
      "createdAt": "2024-09-06T21:35:29Z",
      "updatedAt": "2024-10-19T22:44:47Z",
      "closedAt": "2024-10-19T22:44:47Z",
      "comments": []
    },
    {
      "number": 67,
      "id": "I_kwDOKRPFO86WZ6M2",
      "title": "specify behaviour in light of KEMs with a non-zero failure probability?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/67",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> TODO: as per https://www.enisa.europa.eu/publications/post-quantum-cryptography-integration-study section 4.2, might need to specify behaviour in light of KEMs with a non-zero failure probability.",
      "createdAt": "2024-09-12T21:17:54Z",
      "updatedAt": "2024-10-17T19:50:26Z",
      "closedAt": "2024-10-17T19:50:26Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We probably need to at least mention that decapsulation failure is a possible result of calling CompositeML-KEM.decaps(). Borrow language from, or reference, `draft-ietf-lamps-cms-kyber` ?",
          "createdAt": "2024-10-11T08:20:20Z",
          "updatedAt": "2024-10-11T08:20:20Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOKRPFO86WfqqZ",
      "title": "Max suggests dropping SEQUENCE OF wrapper",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/68",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi Max,\r\n\r\nIf I understand your proposal, you are suggesting that\r\n\r\nCompositeSignaturePublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\nCompositeSignatureValue ::= SEQUENCE SIZE (2) OF BIT STRING\r\n\r\n\r\nBecomes\r\n\r\nCompositeSignaturePublicKey ::= BIT STRING\r\nCompositeSignatureValue ::= BIT STRING\r\n\r\nAn then you need to specify that for id-MLDSA44-RSA2048-PSS-SHA256 the first X bits are the ML-DSA-44 public key / signature, and the remaining Y bits are the RSA-2048.\r\n\r\n\r\nThe original reason for an ASN.1 wrapper was to gracefully handle algorithms with variable-length publickeys, signatures, or ciphertexts, which I believe there were some of in NIST Round 1. This is no longer a concern with FIPS 203 / 204, so we could now remove it. However, I think it will be a fair amount of editorial work (we will need to accurately list out the bit position to split at for each composite alg), and it is asking all existing composite implementations to change, then will require a lot of interop testing. Is this change really worth it?\r\n\r\nIf you feel strongly about this, then perhaps you could prepare the change to the document on a side-branch, and we could bring it to the LAMPS mailing list?\r\n",
      "createdAt": "2024-09-13T13:40:43Z",
      "updatedAt": "2024-09-26T14:41:29Z",
      "closedAt": "2024-09-26T14:41:28Z",
      "comments": [
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Since the current specifications indicate specific key lengths, concatenation instead of 2 sequences is an acceptable solution. However, I agree with Mike that the potential \"gain\" is not proportionate to the cost of changing the specifications, as well as the changes in the implementations currently being developed. My company has been implementing the structures in the \"composite-sign\" and \"comosite-KEM\" drafts for several months; we allow changes, but we do not support this one.\r\nPiotr Popis",
          "createdAt": "2024-09-18T10:04:33Z",
          "updatedAt": "2024-09-18T10:04:33Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Max withdrew the suggestion. Closing this issue.",
          "createdAt": "2024-09-26T14:41:28Z",
          "updatedAt": "2024-09-26T14:41:28Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOKRPFO86XXSQf",
      "title": "Clarifications on ASN.1 representations",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/69",
      "state": "CLOSED",
      "author": "codespree",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- [\u2753] What is the ASN.1 format of composite **public keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite public key pk as per Section 3.2\r\n\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.2 specifies:\r\n    ```\r\n    CompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n    ```\r\n    Are the two component public keys raw public keys without any OIDs? Are they the sequence of bit strings based on the component KEM KeyGen() functions?\r\n\r\n- [\u2753] What is the ASN.1 format of composite **secret keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite private key pk as per Section 3.3\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.3 specifies:\r\n    ```\r\n    CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n    ```\r\n\r\n    `OneAsymmetricKey` is defined in [RFC5912](https://tools.ietf.org/html/rfc5912) as:\r\n    ```\r\n    OneAsymmetricKey ::= SEQUENCE {\r\n        version Version,\r\n        privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\n        privateKey PrivateKey,\r\n        attributes [0] Attributes OPTIONAL,\r\n        ...,\r\n        [[2: publicKey [1] PublicKey OPTIONAL ]],\r\n        ...\r\n    }\r\n    ```\r\n\r\nSo, the composite private key is a sequence of two `OneAsymmetricKey` structures. What are the OID values for the `privateKeyAlgorithm` fields of the two `OneAsymmetricKey` structures? Are we to assume the OID values are the same as the OID values of the component KEM algorithms - i.e:\r\n\r\n    For elliptic curve component KEM:\r\n    ```\r\n    KemType::P256 => \"1.2.840.10045.3.1.7\".to_string(),\r\n    KemType::P384 => \"1.3.132.0.34\".to_string(),\r\n    // RFC 8410\r\n    KemType::X25519 => \"1.3.101.110\".to_string(),\r\n    KemType::X448 => \"1.3.101.110\".to_string(),\r\n    // RFC 5639\r\n    KemType::BrainpoolP256r1 => \"1.3.36.3.3.2.8.1.7\".to_string(),\r\n    KemType::BrainpoolP384r1 => \"1.3.36.3.3.2.8.1.11\".to_string(),\r\n    ```\r\n\r\n    For RSA component KEM:\r\n    ```\r\n    KemType::RsaOAEP2048 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP3072 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP4096 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    ```\r\n\r\n    For ML-KEM component KEM:\r\n    ```\r\n    KemType::MlKem512 => \"2.16.840.1.101.3.4.4.1\".to_string(),\r\n    KemType::MlKem768 => \"2.16.840.1.101.3.4.4.2\".to_string(),\r\n    KemType::MlKem1024 => \"2.16.840.1.101.3.4.4.3\".to_string(),\r\n    ```\r\n\r\n- [\u2753] Why do we need `CompositeKEM.Decap(ct, mlkemSK, tradSK)` as a function signature of the Decap function, why not just use the `CompositeKEMPrivateKey` DER and implement `CompositeKEM.Decap(ct, compositeSK)`? The `CompositeKEM.KeyGen()` function in any case returns `CompositeKEMPrivateKey` as DER according to my understanding. This way the composite KEMs also follow the same interface as the non-composite counterparts.\r\n\r\n- [\u2753] What is the ASN.1 format of RSA keys? Is it `pkcs1_der`?\r\n\r\n-  [\u2705] Composite Decap doesn't accept tradPK as an argument:\r\n    Adressed [here](https://github.com/lamps-wg/draft-composite-kem/pull/56/commits/1907c2ded1bc4e0ffd294169f64aa494b683fd7f) ",
      "createdAt": "2024-09-20T18:54:29Z",
      "updatedAt": "2024-09-25T10:23:01Z",
      "closedAt": "2024-09-24T16:36:02Z",
      "comments": [
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "@ounsworth @dconnolly @danvangeest  @opencrypto  I am new to the community. I have implemented the Editor's draft version in Rust:\r\nhttps://github.com/codespree/quantcrypt\r\n\r\nWould appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n\r\nAll the KEM algorithms mentioned in the draft are implemented. \r\n\r\nTest bytes of expected input would be good so that we can track if the implementations are correct.",
          "createdAt": "2024-09-21T09:16:07Z",
          "updatedAt": "2024-09-21T09:16:07Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Section 3.3 [composite-kem] should be as follows:\r\nUse cases that require an inter-operable encoding for composite\r\n   private keys, such as when private keys are carried in PKCS #12\r\n   [RFC7292], CMP [RFC4210] or CRMF [RFC4211] MUST use the following\r\n   structure.\r\n\r\n   CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\n  Each element of this sequence is a private key, and this sequence is contained in the privateKey field of the OneAsymmetricKey structure [RFC5958].\r\n\r\n   The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.\r\n\r\n   When a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\n   In some use-cases the private keys that comprise a composite key may\r\n   not be represented in a single structure or even be contained in a\r\n   single cryptographic module; for example if one component is within\r\n   the FIPS boundary of a cryptographic module and the other is not; see\r\n   Appendix C.1 for more discussion.  The establishment of\r\n   correspondence between public keys in a CompositeKEMPublicKey and\r\n   private keys not represented in a single composite structure is\r\n   beyond the scope of this document.\r\n\r\nI especially draw your attention to the sentence that does not change:\r\n **The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.**\r\nThis sentence indicates that we could have one OID for the composite algorithm, hence one OneAsymmetricKey sequence with two private keys (two sequences in the privateKey field) is enough.\r\n",
          "createdAt": "2024-09-23T09:14:01Z",
          "updatedAt": "2024-09-23T09:14:01Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @codespree,\r\n\r\nThere is an IETF hackathon repo with test artifacts: https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n\r\nIn addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting.  We can invite you to the next one, just give an email address to send the invitation to.\r\n\r\n> @ounsworth @dconnolly @danvangeest @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust: https://github.com/codespree/quantcrypt\r\n> \r\n> Would appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n> \r\n> All the KEM algorithms mentioned in the draft are implemented.\r\n> \r\n> Test bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\n",
          "createdAt": "2024-09-24T11:53:37Z",
          "updatedAt": "2024-09-24T11:53:37Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Hi\r\n\r\nThank you for the invitation. My email address: ***@***.***\r\n\r\nI only have concerns about the time zone differences for online meetings.\ud83d\ude0a\r\n\r\nRegards \u2013 Piotr Popis\r\n\r\n \r\n\r\nFrom: Daniel Van Geest ***@***.***> \r\nSent: Tuesday, September 24, 2024 1:54 PM\r\nTo: lamps-wg/draft-composite-kem ***@***.***>\r\nCc: PiotrPopis ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [lamps-wg/draft-composite-kem] Clarifications on ASN.1 representations (Issue #69)\r\n\r\n \r\n\r\nHi  <https://github.com/codespree> @codespree,\r\n\r\nThere is an IETF hackathon repo with test artifacts:  <https://github.com/IETF-Hackathon/pqc-certificates> https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n\r\nIn addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting. We can invite you to the next one, just give an email address to send the invitation to.\r\n\r\n <https://github.com/ounsworth> @ounsworth  <https://github.com/dconnolly> @dconnolly  <https://github.com/danvangeest> @danvangeest  <https://github.com/opencrypto> @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust:  <https://github.com/codespree/quantcrypt> https://github.com/codespree/quantcrypt\r\n\r\nWould appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n\r\nAll the KEM algorithms mentioned in the draft are implemented.\r\n\r\nTest bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\n\u2014\r\nReply to this email directly,  <https://github.com/lamps-wg/draft-composite-kem/issues/69#issuecomment-2371049605> view it on GitHub, or  <https://github.com/notifications/unsubscribe-auth/BLIOPUVAJ6V77MURZKIAGVLZYFHFRAVCNFSM6AAAAABOSVU73OVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZRGA2DSNRQGU> unsubscribe.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n\r\n",
          "createdAt": "2024-09-24T12:10:57Z",
          "updatedAt": "2024-09-24T12:10:57Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Piotr,\r\n\r\nYou email address is blanked out in github, but I have found it from the LAMPS emails.\r\n\r\nAnd for @codespree if you'd like an invite, you can find my email address in https://datatracker.ietf.org/doc/draft-ietf-lamps-x509-slhdsa/, just send me a note and we'll get you invited.",
          "createdAt": "2024-09-24T12:29:38Z",
          "updatedAt": "2024-09-24T12:29:38Z"
        },
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "- [\u2705] What is the ASN.1 format of composite **public keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite public key pk as per Section 3.2\r\n\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.2 specifies:\r\n    ```\r\n    CompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n    ```\r\n    Are the two component public keys raw public keys without any OIDs? Are they the sequence of bit strings based on the component KEM KeyGen() functions?\r\n\r\n# \ud83d\udc4d\ud83c\udffc Using the examples from [here](https://datatracker.ietf.org/doc/draft-ietf-lamps-pq-composite-sigs/) makes it very clear. As long as this draft is following the specs in version 2 of that draft. \r\n\r\nI have implemented it in this here:\r\n\r\n- [Composite Public Key](https://github.com/codespree/quantcrypt/blob/main/src/asn1/composite_public_key.rs)\r\n- [Composite Private Keys](https://github.com/codespree/quantcrypt/blob/main/src/asn1/composite_private_key.rs)\r\n\r\nReferring to the DSA draft from the KEM draft would be helpful.\r\n\r\n<hr>\r\n\r\n- [\u2705] What is the ASN.1 format of composite **secret keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite private key pk as per Section 3.3\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.3 specifies:\r\n    ```\r\n    CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n    ```\r\n\r\n    `OneAsymmetricKey` is defined in [RFC5912](https://tools.ietf.org/html/rfc5912) as:\r\n    ```\r\n    OneAsymmetricKey ::= SEQUENCE {\r\n        version Version,\r\n        privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\n        privateKey PrivateKey,\r\n        attributes [0] Attributes OPTIONAL,\r\n        ...,\r\n        [[2: publicKey [1] PublicKey OPTIONAL ]],\r\n        ...\r\n    }\r\n    ```\r\n\r\nSo, the composite private key is a sequence of two `OneAsymmetricKey` structures. What are the OID values for the `privateKeyAlgorithm` fields of the two `OneAsymmetricKey` structures? Are we to assume the OID values are the same as the OID values of the component KEM algorithms - i.e:\r\n\r\n    For elliptic curve component KEM:\r\n    ```\r\n    KemType::P256 => \"1.2.840.10045.3.1.7\".to_string(),\r\n    KemType::P384 => \"1.3.132.0.34\".to_string(),\r\n    // RFC 8410\r\n    KemType::X25519 => \"1.3.101.110\".to_string(),\r\n    KemType::X448 => \"1.3.101.110\".to_string(),\r\n    // RFC 5639\r\n    KemType::BrainpoolP256r1 => \"1.3.36.3.3.2.8.1.7\".to_string(),\r\n    KemType::BrainpoolP384r1 => \"1.3.36.3.3.2.8.1.11\".to_string(),\r\n    ```\r\n\r\n    For RSA component KEM:\r\n    ```\r\n    KemType::RsaOAEP2048 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP3072 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP4096 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    ```\r\n\r\n    For ML-KEM component KEM:\r\n    ```\r\n    KemType::MlKem512 => \"2.16.840.1.101.3.4.4.1\".to_string(),\r\n    KemType::MlKem768 => \"2.16.840.1.101.3.4.4.2\".to_string(),\r\n    KemType::MlKem1024 => \"2.16.840.1.101.3.4.4.3\".to_string(),\r\n    ```\r\n\r\n# \ud83d\udc4d\ud83c\udffc Same as above\r\n\r\n<hr>\r\n\r\n- [\u2705] Why do we need `CompositeKEM.Decap(ct, mlkemSK, tradSK)` as a function signature of the Decap function, why not just use the `CompositeKEMPrivateKey` DER and implement `CompositeKEM.Decap(ct, compositeSK)`? The `CompositeKEM.KeyGen()` function in any case returns `CompositeKEMPrivateKey` as DER according to my understanding. This way the composite KEMs also follow the same interface as the non-composite counterparts.\r\n\r\n# \ud83d\udc4d\ud83c\udffc I understand this is pseudocode\r\n\r\n<hr>\r\n\r\n- [\ud83e\udd14] What is the ASN.1 format of RSA keys? Is it `pkcs1_der`?\r\n\r\n# Sample keys using RSA would be helpful\r\n\r\n<hr>\r\n\r\n-  [\u2705] Composite Decap doesn't accept tradPK as an argument:\r\n    Adressed [here](https://github.com/lamps-wg/draft-composite-kem/pull/56/commits/1907c2ded1bc4e0ffd294169f64aa494b683fd7f) ",
          "createdAt": "2024-09-24T16:27:01Z",
          "updatedAt": "2024-09-24T16:27:01Z"
        },
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "Thanks @danvangeest . I am closing this issue. Samples on RSA keys (with and without PSS) would be very helpful in wither of the two drafts.",
          "createdAt": "2024-09-24T16:36:02Z",
          "updatedAt": "2024-09-24T16:36:02Z"
        },
        {
          "author": "carl-wallace",
          "authorAssociation": "NONE",
          "body": "> Hi @codespree,\r\n> \r\n> There is an IETF hackathon repo with test artifacts: https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n> \r\n> In addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting. We can invite you to the next one, just give an email address to send the invitation to.\r\n> \r\n> > @ounsworth @dconnolly @danvangeest @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust: https://github.com/codespree/quantcrypt\r\n> > Would appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n> > All the KEM algorithms mentioned in the draft are implemented.\r\n> > Test bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\nI implemented composite KEM support a few months back but have not tested against any other implementation. The work is here: https://github.com/carl-wallace/kemri_toy/commits/composite.",
          "createdAt": "2024-09-25T10:23:00Z",
          "updatedAt": "2024-09-25T10:23:00Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOKRPFO86YFUFI",
      "title": "PrivateKey section is not explicit about which AlgID OIDs to place in the component OneAsymmetricKeys",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/72",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Relates to #59 \r\n\r\nIf we decide to do the private key compression, then this issue will become moot.",
      "createdAt": "2024-09-26T21:05:02Z",
      "updatedAt": "2024-09-28T17:00:32Z",
      "closedAt": "2024-09-28T17:00:32Z",
      "comments": []
    },
    {
      "number": 73,
      "id": "I_kwDOKRPFO86YoByu",
      "title": "Algorithm identifier table KDF columns contain hash algorithms",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/73",
      "state": "CLOSED",
      "author": "bluegate010",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It is a bit confusing on first read to see hash algorithms in the section 5 & 6.1 tables' KDF columns (SHA3-256, SHA3-384, SHA3-512).\r\n\r\nFrom reading footnotes under the table in section 6.1, it appears those shortnames refer to [this](https://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-sha3-hash-01#name-hkdf-with-sha3) draft RFC. It might be clearer to prepend the shortnames in the section 6.1 table with HKDF-* (HKDF-SHA3-256 etc).\r\n\r\nIt is not clear what the hash algorithms in table 5's KDF column refer to.",
      "createdAt": "2024-10-02T04:03:17Z",
      "updatedAt": "2024-10-19T22:51:25Z",
      "closedAt": "2024-10-19T22:51:25Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @bluegate010 Thank you for the comment.\r\n\r\nThis has been adjusted a bit in the most recent version. We now use either `HKDF-SHA256/256` or `SHA3-256` for the internal KEM combiner KDF -- note that there is no cryptographic reason why we need HKDF-SHA3 because a single iteration of SHA3 by already has the necessary DualPRF properties (but SHA2 does not, hence needing the HMAC / HKDF wrapper).\r\n\r\nFor the KDF used as the CMS KEMRecipientInfo layer we need a proper KDF, not for security property reasons, but because it needs to be variable-length output, so here we use either HKDF-SHA2 or KMAC.\r\n\r\n\r\nPlease see the updated version here (which will be posted to IETF Datatracker on Oct 21). Please let me know if this is still unclear. I am going to close this ticket for now, but feel free to re-open it.\r\n\r\nhttps://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html\r\n\r\n\r\n",
          "createdAt": "2024-10-19T22:51:25Z",
          "updatedAt": "2024-10-19T22:51:25Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDOKRPFO86Z09PE",
      "title": "Make sure it's sufficiently clear that all inputs to the KEM combiner are fixed-length",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/74",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "... at least fixed length for a given composite alg.\r\n\r\nThis came from a private discussion with Russ.",
      "createdAt": "2024-10-11T08:39:01Z",
      "updatedAt": "2024-10-17T19:50:26Z",
      "closedAt": "2024-10-17T19:50:26Z",
      "comments": []
    },
    {
      "number": 77,
      "id": "I_kwDOKRPFO86ar2r9",
      "title": "Add table of PK, CT sizes",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/77",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/zfWx5fYjvuvohTOI7asQG4m-NDI/\r\n\r\n> Hi Mike,\r\n>\r\n> Your draft:\r\n> https://datatracker.ietf.org/doc/draft-ietf-lamps-pq-composite-kem/\r\n> could do with table  on Npk, Nsk, and NSig sizes. Such tables greatly help\r\n> in implementation.\r\n>\r\n> The idea is from RFC 9180, Section 7.1\r\n> <https://datatracker.ietf.org/doc/rfc9180/>\r\n>\r\n> [image: image.png]\r\n>\r\n> The details of the calculations can be found here:\r\n>\r\n> https://github.com/codespree/quantcrypt/blob/main/additional_info_keysize.md\r\n>\r\n> All the best,\r\n> Varun\r\n\r\nIn my opinion, we should get sample keys, signatures, and ciphertexts for all algorithms, and then measure them. This sounds like a hackathon project.",
      "createdAt": "2024-10-17T16:15:59Z",
      "updatedAt": "2024-10-18T09:53:19Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ZPDSSAI",
          "authorAssociation": "NONE",
          "body": "Hi Mike,\r\n\r\nI am Peiduo and I am from Varun(@codespree)'s team. We have computed the public key, secrete key and signature lengths for ML-DSA and its composite variations, and the public key, secrete key, shared secret, and cipher text lengths for ML-KEM and its composite variations. The full table documentation, together with notes on overhead computation, can be found in our project repo [here](https://github.com/codespree/quantcrypt/blob/main/additional_info_keysize.md).\r\n\r\nPlease check if the tables meet the requirement of this issue :)\r\n\r\nBest regards,\r\nZhao Peiduo",
          "createdAt": "2024-10-18T09:53:18Z",
          "updatedAt": "2024-10-18T09:53:18Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOKRPFO86a0wRy",
      "title": "Should be clear that the CompositeML-KEM output is a key, not just a shared secret",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/79",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Go diving into FIPS 203 and borrow language about what properties the output value has.",
      "createdAt": "2024-10-18T13:27:03Z",
      "updatedAt": "2024-10-19T23:07:47Z",
      "closedAt": "2024-10-19T23:07:47Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've changed \"shared secret\" to \"shared secret key\" throughout.",
          "createdAt": "2024-10-19T22:59:15Z",
          "updatedAt": "2024-10-19T22:59:15Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOKRPFO86a9fP2",
      "title": "Do we need to define smime caps for each kema?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/81",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-20T01:28:32Z",
      "updatedAt": "2024-10-21T19:49:25Z",
      "closedAt": "2024-10-21T19:49:25Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "I_kwDOKRPFO86bfcql",
      "title": "The DER Encoded ML-KEM ObjectID are incorrect",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/83",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently has this:\r\n\r\n*ML-KEM-768*\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-768   -- (2.16.840.1.101.4.2)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 04 02\r\n\r\n   *ML-KEM-1024*\r\n\r\n   ASN.1:\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-1024   -- (2.16.840.1.101.4.3)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 04 03\r\n\r\nIT should be:\r\n\r\n*ML-KEM-768*\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-768   -- (2.16.840.1.101.3.4.4.2)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 03 04 04 02\r\n\r\n   *ML-KEM-1024*\r\n\r\n   ASN.1:\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-1024   -- (2.16.840.1.101.3.4.4.3)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 03 04 04 03",
      "createdAt": "2024-10-23T13:54:13Z",
      "updatedAt": "2024-10-23T14:55:26Z",
      "closedAt": "2024-10-23T14:55:26Z",
      "comments": []
    },
    {
      "number": 86,
      "id": "I_kwDOKRPFO86c9Qle",
      "title": "Add a MLKEM768 and P-256 variant",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/86",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "P-256 is missing from the draft, yet this will definitely be needed in practice. ",
      "createdAt": "2024-11-04T16:42:03Z",
      "updatedAt": "2024-11-11T16:04:38Z",
      "closedAt": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "NONE",
          "body": "@ounsworth do you welcome PRs for this?",
          "createdAt": "2024-11-11T16:04:36Z",
          "updatedAt": "2024-11-11T16:04:36Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOKRPFO86c9SAL",
      "title": "HKDF-based hybrid variants are unimplementable ",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/87",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The generic combiner effectively shoves everything into a KDF to produce a new shared secret, e.g.:\r\n\r\n```\r\nss = KDF(mlkemSS || tradSS || tradCT || tradPK || Domain)\r\n```\r\n\r\nHowever, for HKDF-based KDFs, this simply doesn't make sense. HKDF requires _multiple_ inputs, not just a single input (`mlkemSS || tradSS || tradCT || tradPK || Domain`). As it stands, none of the HKDF-based variants in table 2 can be implemented.",
      "createdAt": "2024-11-04T16:44:03Z",
      "updatedAt": "2024-11-04T16:44:03Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 88,
      "id": "I_kwDOKRPFO86c9S4B",
      "title": "Drop DER encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/88",
      "state": "OPEN",
      "author": "chris-wood",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "An implementation of these KEMs should _not_ need any DER encoding or parsing logic to function. The spec should drop all use of DER encoding for KEM public keys and ciphertexts. Applications or protocols which require DER can wrap them as desired, but for the relevant hybrids here, they are simply not needed and add unnecessary complexity.",
      "createdAt": "2024-11-04T16:45:41Z",
      "updatedAt": "2024-11-11T16:04:15Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup. We will do this. It's become clear in the past few weeks that non-PKIX protocols would like to directly re-use our construction.",
          "createdAt": "2024-11-09T18:49:35Z",
          "updatedAt": "2024-11-09T18:49:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "NONE",
          "body": "Great! Do you want PRs for this, or do you intend to make the change yourself?",
          "createdAt": "2024-11-11T16:04:14Z",
          "updatedAt": "2024-11-11T16:04:14Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOKRPFO86dZEqO",
      "title": "Maybe reverse the domain encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/89",
      "state": "OPEN",
      "author": "ilaril",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The KDF input `mlkemSS || tradSS || tradCT || tradPK || Domain` is not parsable, as a domain may be suffix of another. This means the inputs might collide even between what are supposed to be separate domains.\r\n\r\nThe simplest way I can come up to make it parsable (and thus prevent inter-domain collisions) is to reverse the domain encoding:\r\n\r\n`mlkemSS || tradSS || tradCT || tradPK || reverse(Domain)` \r\n\r\n(Since it is possible to parse in reverse from the end.)",
      "createdAt": "2024-11-07T10:38:24Z",
      "updatedAt": "2024-11-09T21:07:07Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari, I have no idea what you are trying to say. What do you mean \"not parsable\"? Can you please explain another way?",
          "createdAt": "2024-11-09T18:52:03Z",
          "updatedAt": "2024-11-09T18:52:03Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "The domain separation is not guaranteed: Even if two inputs have different domains, the input to the KDF might still be the same.\r\n\r\nWhile such thing seems to be very unlikely to happen and low impact in practice, cryptography is traditionally conservative and would rather eliminate the possibility altogether.\r\n\r\n",
          "createdAt": "2024-11-09T21:07:05Z",
          "updatedAt": "2024-11-09T21:07:05Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOKRPFO86dZMXP",
      "title": "Drop id-MLKEM768-X25519",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/90",
      "state": "CLOSED",
      "author": "ilaril",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As far as I can tell, this is just an incompatible (different domain) duplicate of the X-Wing.\r\n\r\nIt would be easier for crypto implementers to just have one construction to combine X25519 and MLKEM768, not two.",
      "createdAt": "2024-11-07T10:46:10Z",
      "updatedAt": "2024-11-09T20:47:29Z",
      "closedAt": "2024-11-09T18:54:55Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari, were you in LAMPS? This point was discussed fairly extensively.\r\n\r\nCurrently this combination IS X-Wing (or at least, it is attempting to be), and as such, I am very confused about why the X-Wing draft bothered to include OIDs. Currently the only (substantial) difference between this and X-Wing is their \"simultaneous KeyGen\". We are in discussions with the X-Wing authors about whether we want them to be separate or not.",
          "createdAt": "2024-11-09T18:54:34Z",
          "updatedAt": "2024-11-09T18:54:34Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since this is an open discussion point, I am going to remove this github issue.",
          "createdAt": "2024-11-09T18:54:55Z",
          "updatedAt": "2024-11-09T18:54:55Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "There is another substantial difference besides the keygen: The domain separators are different (060B6086480186FA6B5005021A versus 5c2e2f2f5e5c). So changing the object identifier in public key does not work (whereas it would if the only difference was the keygen).\r\n\r\nRe-watching the session recording, the closest comments I can find are about having two close things being a bad idea, and the keygen difference justifying a new object identifier.",
          "createdAt": "2024-11-09T20:47:28Z",
          "updatedAt": "2024-11-09T20:47:28Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOKRPFO86dvTHi",
      "title": "Composite KEM does not fully protect against implementation errors in ML-KEM",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/91",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See comment from Peter C:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Fq06ghviNMejesJNR4XzP5x0ecI/",
      "createdAt": "2024-11-09T18:50:30Z",
      "updatedAt": "2024-11-09T18:50:30Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "PR_kwDOKRPFO85bsBcD",
      "title": "Adding a ML-KEM512_RSA2048 combo",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/3",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-02T15:59:27Z",
      "updatedAt": "2024-08-03T23:21:22Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "8ecdef1572329af10c78e3ebb26ed087116dd22e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mlkem512-rsa2048",
      "headRefOid": "fc99e0e2f27f08b26cc5c858b17cbbf901122c3e",
      "closedAt": "2023-10-02T22:53:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have changed the ASN.1 substantially enough in #4 that it's easier to just start this PR over again once that PR is merged.",
          "createdAt": "2023-10-02T22:53:29Z",
          "updatedAt": "2023-10-02T22:53:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 4,
      "id": "PR_kwDOKRPFO85buNe6",
      "title": "Removing CompositeKEMParams",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/4",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-02T22:17:04Z",
      "updatedAt": "2023-10-03T14:22:46Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e18c3c43c266b1c703dc03e6e438d5b2ef91046d",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_asn1_remove_params",
      "headRefOid": "3e56992462b1c2adcfb2e2194d96c1dbbcc43697",
      "closedAt": "2023-10-03T14:22:20Z",
      "mergedAt": "2023-10-03T14:22:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "1fb6913195222dfd8e61349c1fc2e7f73b9e494e"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Looks good! Other than needing to define the ASN.1 module OID: id-mod-composite-kems\r\n> \r\n> I was able to compile the ASN.1, so that is great!\r\n\r\nYeah, I replace the `TBDMOD` with `999` when I'm test-compiling, but I've gotta leave something that's easy for IANA to CTRL+F replace.",
          "createdAt": "2023-10-03T14:18:19Z",
          "updatedAt": "2023-10-03T14:18:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85ikr5T",
          "commit": {
            "abbreviatedOid": "3a3f3d3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!   Other than needing to define the ASN.1 module OID:\r\nid-mod-composite-kems\r\n\r\nI was able to compile the ASN.1, so that is great!",
          "createdAt": "2023-10-03T00:02:33Z",
          "updatedAt": "2023-10-03T00:02:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKRPFO85bzF-Z",
      "title": "Added id-MLKEM512-RSA2048-KMAC128",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/5",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-03T14:30:06Z",
      "updatedAt": "2023-10-04T15:23:29Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "1fb6913195222dfd8e61349c1fc2e7f73b9e494e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_add_MLKEM512-RSA2048",
      "headRefOid": "4cdaef1fa7c88ec971b57ec0a16dd0c9476d189a",
      "closedAt": "2023-10-04T15:23:20Z",
      "mergedAt": "2023-10-04T15:23:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "dc2a6d100628b032e9bfac40a57edf842ef43e09"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOKRPFO85b61Iv",
      "title": "Demoted RSA 3072 to 128-bit Level 1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/6",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This relates to the LAMPS mailist discussion:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/xSKIRjtMSJ8M7N7Fx3X09ASUHC8/\r\n\r\nThe main branch is option 3.1.\r\nThis PR is option 3.2.\r\n\r\nWe should wait to merge this PR pending the results of that discussion thread.",
      "createdAt": "2023-10-04T16:09:56Z",
      "updatedAt": "2024-08-03T23:21:06Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6f3d6ee7dfb5df2492b5d6a8bcd2495884ae6e27",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_downgrade_RSA3072",
      "headRefOid": "efba46de1223f1868aa6d0e94686fdd96ad239d2",
      "closedAt": "2023-10-24T17:56:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This was already included in the john_integration branch Merge #8 ",
          "createdAt": "2023-10-24T17:56:28Z",
          "updatedAt": "2023-10-24T17:56:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85jHrif",
          "commit": {
            "abbreviatedOid": "efba46d"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-10-07T01:46:16Z",
          "updatedAt": "2023-10-07T01:46:41Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "On Line 12 you do not need to import SIGNATURE-ALGORITHM or ParamOptions.   I removed them and was able to compile this ASN.1  ",
              "createdAt": "2023-10-07T01:46:16Z",
              "updatedAt": "2023-10-07T01:46:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOKRPFO85b9Pfi",
      "title": "synced with cfrg-kem-combiners-04 and rfc5990bis-05",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/7",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-05T02:31:29Z",
      "updatedAt": "2024-08-03T23:20:54Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6f3d6ee7dfb5df2492b5d6a8bcd2495884ae6e27",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_sync_cfrg-kem-combiner-04",
      "headRefOid": "12f2ba3d9e6f87ab863797c798e0746d5e834309",
      "closedAt": "2023-10-24T17:53:45Z",
      "mergedAt": "2023-10-24T17:53:45Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "12f2ba3d9e6f87ab863797c798e0746d5e834309"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85jHrcO",
          "commit": {
            "abbreviatedOid": "12f2ba3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look good Mike.   Thanks for making sure it is up to date.",
          "createdAt": "2023-10-07T01:43:27Z",
          "updatedAt": "2023-10-07T01:43:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO85k8PYr",
          "commit": {
            "abbreviatedOid": "12f2ba3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look great!",
          "createdAt": "2023-10-23T21:00:18Z",
          "updatedAt": "2023-10-23T21:00:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOKRPFO85dqxZ6",
      "title": "John integration",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/8",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The version of this .md file and asn1 module integrated Mike's other two pull request plus fixes up a few other nits.   ",
      "createdAt": "2023-10-24T17:52:40Z",
      "updatedAt": "2023-10-24T17:53:42Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "945a58d29ce79bd8ad302f47e03cf5d52869378e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "john_integration",
      "headRefOid": "746c0b1eb4d160cf9df130d8ebffe186310a22dc",
      "closedAt": "2023-10-24T17:53:42Z",
      "mergedAt": "2023-10-24T17:53:42Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "d6a1ebdc2a5b920fbbd20f1cc33410304471e3c3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOKRPFO85lPYQe",
      "title": "Aligned with X-Wing",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/11",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-27T22:50:55Z",
      "updatedAt": "2024-07-07T15:01:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e9db1fa3e40edcca15acbee1d19db1c3b7ea9089",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_xwing",
      "headRefOid": "b355af26d5fdfc0f009fee63d3a6d6739d78f57e",
      "closedAt": "2024-07-07T15:01:39Z",
      "mergedAt": "2024-07-07T15:01:39Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "5c9f8ea429ce1d2bcd9ff0c8e65908c19dc2911f"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #13 ",
          "createdAt": "2024-02-06T14:59:53Z",
          "updatedAt": "2024-02-06T14:59:53Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should align with the openpgp-pqc draft:\r\n\r\n~~~\r\nKEK = SHA3-256(counter || ecdhKeyShare || mlkemKeyShare || ecdhCipherText ||\r\n ecdhPublicKey  || mlkemCipherText || mlkemPublicKey || domSep || len(domSep) \r\n || algID )\r\n~~~\r\n\r\nSee parallel github issue: \r\nhttps://github.com/openpgp-pqc/draft-openpgp-pqc/issues/127",
          "createdAt": "2024-07-06T01:33:02Z",
          "updatedAt": "2024-07-06T01:33:02Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TODO: this is a massive PR. Review again when I'm less sleep-deprived.",
          "createdAt": "2024-07-06T04:15:02Z",
          "updatedAt": "2024-07-06T04:15:02Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #27 \r\nCloses #2 \r\nCloses #26 ",
          "createdAt": "2024-07-06T04:15:27Z",
          "updatedAt": "2024-07-06T04:17:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85uG_7x",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-27T23:41:09Z",
          "updatedAt": "2024-01-27T23:41:09Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Nice to see X-Wing is a FIPS standard ;).",
              "createdAt": "2024-01-27T23:41:09Z",
              "updatedAt": "2024-01-27T23:41:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHdDk",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:03:21Z",
          "updatedAt": "2024-01-28T09:05:56Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "\ud83d\udc4d",
              "createdAt": "2024-01-28T09:03:21Z",
              "updatedAt": "2024-01-28T09:05:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHihZ",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:47:04Z",
          "updatedAt": "2024-01-28T09:47:29Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "```suggestion\nHowever, optimizations may be made in the following ways:\n```\n",
              "createdAt": "2024-01-28T09:47:05Z",
              "updatedAt": "2024-01-28T09:47:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHi48",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:54:15Z",
          "updatedAt": "2024-01-28T09:54:19Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "This is a good question, not sure yet",
              "createdAt": "2024-01-28T09:54:15Z",
              "updatedAt": "2024-01-28T09:54:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85vL6sc",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T14:33:41Z",
          "updatedAt": "2024-02-06T14:33:41Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Good catch. Fixed.",
              "createdAt": "2024-02-06T14:33:41Z",
              "updatedAt": "2024-02-06T14:33:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85vhC6P",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "csosto-pk",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T18:12:55Z",
          "updatedAt": "2024-02-08T18:12:55Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "> Similarly, RSA-KEM {{I-D.ietf-lamps-rfc5990bis}} is a bijective map between the shared secret `Z` and the ciphertext `C` and so is naturally immune to ciphertext collision. This leaves only ECDH, X25519 and X448 which are not ciphertext collision resistant and for which the ciphertexts need to be included in the derivation of the shared secret.\r\n\r\nI am not sure I get that. Why is RSA-KEM in rfc5990bis CCR?\r\n\r\nrfc5990bis defines\r\n\r\n```\r\nCEK <-  random 256-bits\r\nz <-$ [0, n);\r\nc <- z^e mod n;\r\nWK <- ENCRYPT(KDF(z), CEK);\r\nCC <- (WK, c)\r\nRSA-ENCAPS(pubkey=(e,n)) :=  (CC, CEK) \r\n```\r\n\r\nSomeone that can break `c` or `WK` can produce a different `CC'` which leads to the same `CEK` by producing a different value of  `c`. ML-KEM did not have that issue because there is only one random `m` used for the encapsulation.\r\n\r\n",
              "createdAt": "2024-02-08T18:12:55Z",
              "updatedAt": "2024-02-08T18:12:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85wTysv",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dstebila",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-16T02:56:57Z",
          "updatedAt": "2024-02-16T02:56:57Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "I'm just looking at this now, so apologies if I'm mistaken. But I think the argument that the mapping between RSA ciphertext and plaintext is bijective only holds once you fix the modulus.  So I think you would need some binding to the modulus in the KDF input to achieve bijectivity.  (But do not take this as a proof that it's okay if you have this -- would need more careful consideration than I've given it so far.)",
              "createdAt": "2024-02-16T02:56:57Z",
              "updatedAt": "2024-02-16T02:56:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86A1Adq",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T04:14:40Z",
          "updatedAt": "2024-07-06T04:14:41Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "To err on the safe side, this has been changed to:\r\n\r\n> Ciphertext collision resistance is not guaranteed for either RSA-KEM or ECDH, therefore these ciphertexts are bound to the key derivation.",
              "createdAt": "2024-07-06T04:14:41Z",
              "updatedAt": "2024-07-06T04:14:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86A21dx",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-07T13:13:09Z",
          "updatedAt": "2024-07-07T13:13:09Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Isn't the definition of CCR that we care about here that you can't have `z -> c` and `z' -> c` where `z != z'` ? Since we're not borrowing the symmetric WRAP primitive from 5990, I don't see why that matters?",
              "createdAt": "2024-07-07T13:13:09Z",
              "updatedAt": "2024-07-07T13:13:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOKRPFO85mKTX8",
      "title": "Changed title from 'Internet PKI' to 'PKIX and CMS'. Closes #1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/14",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-06T15:48:58Z",
      "updatedAt": "2024-02-14T15:44:03Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "cad051fe5dbcc17e8e4004bfd1c5333b9d47749f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_sf_comments",
      "headRefOid": "0a978937cc7192e6dea167eec971384282ab1423",
      "closedAt": "2024-02-14T15:44:00Z",
      "mergedAt": "2024-02-14T15:44:00Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "35040231761a50c992c75598c14014d66e36d5ad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOKRPFO85mL58Q",
      "title": "Added a Use In CMS section",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/15",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding this section here avoids the need for a wrapper draft telling you how to use composite KEM in CMS.\r\n\r\nCloses #12 ",
      "createdAt": "2024-02-06T20:03:04Z",
      "updatedAt": "2024-03-02T22:18:04Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "7c67eb88a0e162b00965b20289623482461fc5e3",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_use_in_cms",
      "headRefOid": "b4d7f10d0d9df568418bbd00d2ad28a9c2cd11fa",
      "closedAt": "2024-03-02T22:17:51Z",
      "mergedAt": "2024-03-02T22:17:50Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "5c2e3c04d64682a6b556fa3114836149b935c64a"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note-to-self: look at whether we need to specify higher levels of KDF and WRAP for the stronger algorithms -- see how DVG did it in the CMS-Kyber draft.\r\n\r\nUPDATE: done.",
          "createdAt": "2024-02-13T20:41:49Z",
          "updatedAt": "2024-02-14T18:14:36Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Question: does the `## Certificate Conventions` section collide with the recently-merged Key Usage section?\r\n\r\nUPDATE: I think this is fine because this section is intended to be able to be standalone if LAMPS wants the alg definitions, and the \"Use in CMS\" to become separate documents.",
          "createdAt": "2024-02-14T15:41:32Z",
          "updatedAt": "2024-02-14T18:14:28Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We also need to add the SMIME-CAPS to the ASN.1 (find a good example doc).",
          "createdAt": "2024-02-16T15:50:47Z",
          "updatedAt": "2024-02-16T15:50:47Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the review @danvangeest \r\n\r\nStill TODO:\r\n\r\n* We also need to add the SMIME-CAPS to the ASN.1 (find a good example doc).\r\n  * UPDATE: done.",
          "createdAt": "2024-02-29T23:10:58Z",
          "updatedAt": "2024-03-01T16:35:39Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Review comments from Russ:\r\n\r\n> Mike:\r\n>\r\n>You are using a mix of \"wrap algorithm\" and \"key-encryption algorithm\".  CMS usually uses the later.  Line 683 got it just right.  That is, id-aes256-Wrap identifies a particular key-encryption algorithm.  I am not sure the text at the top is aligned.\r\n>\r\n>Line 663: I think you need o say how that happens.  In some cases a different OID is used, but in others a different parameter value is used.\r\n>\r\n>Line 675: make it clear thet it is the KEM.Encaps(pk).  The function is specific to the KEM identified in 'kem'.\r\n>\r\n>Line 681: Do any of your composite KEM algorithms REQUIRE a ukm?  I can imagine a way to use DH and ECDH that require a UKM.\r\n>\r\n>Russ\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-03-01T19:09:56Z",
          "updatedAt": "2024-03-01T19:09:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85vPR3s",
          "commit": {
            "abbreviatedOid": "abebe14"
          },
          "author": "job",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T20:40:04Z",
          "updatedAt": "2024-02-06T20:40:05Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Typo: \u201cwith with\u201d",
              "createdAt": "2024-02-06T20:40:05Z",
              "updatedAt": "2024-02-06T20:40:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85v_HOG",
          "commit": {
            "abbreviatedOid": "abebe14"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T20:04:18Z",
          "updatedAt": "2024-02-13T20:04:19Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Thanks. Fixed.",
              "createdAt": "2024-02-13T20:04:19Z",
              "updatedAt": "2024-02-13T20:04:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85wL5I0",
          "commit": {
            "abbreviatedOid": "3d77392"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-15T09:05:24Z",
          "updatedAt": "2024-02-15T10:43:04Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "```suggestion\r\n`kdf` identifies the key-derivation function (KDF). Note that the KDF used for CMS RecipientInfo process MAY be different than the KDF used within the composite KEM Algorithm, which MAY be different than the KDFs (if any) used within the component KEMs of the composite KEM Algorithm.\r\n```",
              "createdAt": "2024-02-15T09:08:13Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 171,
              "body": "```suggestion\r\nThe digitalSignature and dataEncipherment values MUST NOT be present. That is, a public key intended to be employed only with a composite KEM algorithm MUST NOT also be employed for data encryption or for digital signatures. This requirement does not carry any particular security consideration; only the convention that KEM keys be identifed with the `keyEncipherment` key usage.\r\n```",
              "createdAt": "2024-02-15T10:09:11Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n{: #tab-cms-kdf-wrap title=\"REQUIRED pairings for CMS KDF and WRAP\"}\r\n```",
              "createdAt": "2024-02-15T10:10:43Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\n\r\n\\[EDNOTE: OIDs for KMAC-based KDFs are expected. Should they be used in place of the HKDF-with-sha3 OIDs above?]\r\n\r\nwhere:\r\n```\r\nI assume this because SHA3 isn't great to use with HKDF, and implementers will need KMAC KDF implementations anyways.\r\n",
              "createdAt": "2024-02-15T10:11:14Z",
              "updatedAt": "2024-02-29T23:09:43Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\nImplementors MAY safely substitute stronger KDF and WRAP algorithms than those indicated; for example `id-alg-hkdf-with-sha3-512` and `id-aes256-Wrap` MAY be safely used in place of `id-alg-hkdf-with-sha3-384`and `id-aes192-Wrap`, for example, where SHA3-384 or AES-192 are not supported.\r\n```",
              "createdAt": "2024-02-15T10:11:52Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nWhen a particular Composite KEM OID is supported, an implementation MUST support the corresponding KDF algorithm identifier in {{tab-cms-kdf-wrap}}.\r\n```\r\nid-alg-hkdf-with-sha3-256 is too low a bar for NIST level 5 KEMs.",
              "createdAt": "2024-02-15T10:14:22Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 108,
              "body": "```suggestion\r\nWhen a particular Composite KEM OID is supported, an implementation MUST support the corresponding WRAP algorithm identifier in {{tab-cms-kdf-wrap}}.\r\n```\r\nAES-Wrap-128 is too low a bar for NIST level 5 KEMs.",
              "createdAt": "2024-02-15T10:14:40Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\nThe following table lists the REQUIRED KDF and WRAP algorithms to preserve security and performance characteristics of each composite algorithm.\r\n```",
              "createdAt": "2024-02-15T10:14:52Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85xHL4Y",
          "commit": {
            "abbreviatedOid": "3d77392"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Sorry! I created this review last week but forgot to actually submit it!",
          "createdAt": "2024-02-23T09:35:15Z",
          "updatedAt": "2024-02-23T09:35:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO85x_TDm",
          "commit": {
            "abbreviatedOid": "b38b617"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T00:56:26Z",
          "updatedAt": "2024-03-02T00:56:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I don't know anything about ASN.1 but shouldn't these be `kema-MLKEM512-ECDH-P256-KMAC128.&smimeCaps`, etc.  I just base this on what I see in RFC 5911.",
              "createdAt": "2024-03-02T00:56:26Z",
              "updatedAt": "2024-03-02T00:56:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85yAjuJ",
          "commit": {
            "abbreviatedOid": "b38b617"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T22:13:53Z",
          "updatedAt": "2024-03-02T22:13:53Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yup, sure should. Good catch.",
              "createdAt": "2024-03-02T22:13:53Z",
              "updatedAt": "2024-03-02T22:13:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOKRPFO85myUbx",
      "title": "Added a Key Usage section.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/18",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-13T18:59:24Z",
      "updatedAt": "2024-02-14T15:42:35Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d715b285547da9e1e5cdcc6402f9ee12467293b0",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_keyusage",
      "headRefOid": "883493f8be12e12f0f990747504fb602a571a40f",
      "closedAt": "2024-02-14T15:42:32Z",
      "mergedAt": "2024-02-14T15:42:32Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "c7d185a40c1fab7398209130efaf9f9e7d68355f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOKRPFO85myV9-",
      "title": "Added a justification referencing BSI and ANSSI",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/19",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-13T19:04:51Z",
      "updatedAt": "2024-08-03T23:20:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d715b285547da9e1e5cdcc6402f9ee12467293b0",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_justification",
      "headRefOid": "b3d679177abaf074a95648a7f30e431b7f151f3f",
      "closedAt": "2024-02-14T15:38:46Z",
      "mergedAt": "2024-02-14T15:38:46Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "cbbf3553e9500e82bfb603e1020ad80ab99e35be"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOKRPFO85ofl_1",
      "title": "Swapped from hkdf-sha3 to kmac-kdf",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/23",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #22 ",
      "createdAt": "2024-03-02T22:52:30Z",
      "updatedAt": "2024-03-02T22:55:48Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f3cbed9e55465cf52a19b176ec3866d630d50d60",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_kmac_kdf",
      "headRefOid": "29996ec0b628b5b9d5b729e7d474e6f767b00355",
      "closedAt": "2024-03-02T22:55:44Z",
      "mergedAt": "2024-03-02T22:55:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "7182d2070fb8cc90f20c0aee2995fadd4c73f629"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 30,
      "id": "PR_kwDOKRPFO850nWea",
      "title": "Lifted AES-192 to AES-256. Closes #25",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/30",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-07T15:05:48Z",
      "updatedAt": "2024-07-08T14:37:27Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "5c9f8ea429ce1d2bcd9ff0c8e65908c19dc2911f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_25",
      "headRefOid": "c41d13fa5423c3fee6d6bfa6e57efbb183583788",
      "closedAt": "2024-07-07T15:11:22Z",
      "mergedAt": "2024-07-07T15:11:22Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "f2f42ca5d4cd09b4e6e2b6b796799b85475b909e"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Mike.  Edits look really great and justification text is also good.",
          "createdAt": "2024-07-08T14:37:26Z",
          "updatedAt": "2024-07-08T14:37:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 32,
      "id": "PR_kwDOKRPFO850nq02",
      "title": "Replaced RSA-KEM with RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/32",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #21 \r\nCloses #24 ",
      "createdAt": "2024-07-07T20:01:19Z",
      "updatedAt": "2024-07-09T21:11:20Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "854b646b1d5e4980d28fd8d0544cd41414fc7540",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_rsa-oaep",
      "headRefOid": "aa69c0300a5ef1cb55f2fd8340888b1c01519c7e",
      "closedAt": "2024-07-07T20:05:39Z",
      "mergedAt": "2024-07-07T20:05:39Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "9c7c0842388dd2bc031ab56772088f4e74f36f8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86BMYpc",
          "commit": {
            "abbreviatedOid": "aa69c03"
          },
          "author": "dstebila",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T21:11:20Z",
          "updatedAt": "2024-07-09T21:11:20Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Why is this title `DHKEM.Encaps` -- shouldn't it be something like `RSAOAEPKEM.Encaps`?",
              "createdAt": "2024-07-09T21:11:20Z",
              "updatedAt": "2024-07-09T21:11:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOKRPFO8505OXw",
      "title": "Rename DHKEM to RSAKEM where appropriate",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/36",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-09T22:52:24Z",
      "updatedAt": "2024-07-09T23:29:52Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "20c8eba3deb1dc8a874c7e60610b72460c92cbac",
      "headRepository": "dconnolly/draft-composite-kem",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "ea78b5561f196c12de0ab07bd1b3a277193344dc",
      "closedAt": "2024-07-09T23:29:51Z",
      "mergedAt": "2024-07-09T23:29:51Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "71b98a70e405b3d4c5848d40a4ce5afbde8d14b1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 53,
      "id": "PR_kwDOKRPFO853DCLJ",
      "title": "Alg List Adjustments",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/53",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T22:56:40Z",
      "updatedAt": "2024-08-29T20:39:46Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f1e57323a77e9edea06e507cdd863ef6a208e1ed",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_list_trim",
      "headRefOid": "7f066cda04c4d941ac7d28971f186621f4d31776",
      "closedAt": "2024-08-29T20:39:43Z",
      "mergedAt": "2024-08-29T20:39:43Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "cebe4bf67f85968eabb79f6aecc328b57323bfd8"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #47 ",
          "createdAt": "2024-07-31T23:02:17Z",
          "updatedAt": "2024-07-31T23:02:17Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #39",
          "createdAt": "2024-08-03T23:12:37Z",
          "updatedAt": "2024-08-03T23:12:37Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The MLKEM-1024 combos should be offered with both HKDF-SHA2 and SHA3.",
          "createdAt": "2024-08-14T14:52:32Z",
          "updatedAt": "2024-08-14T14:52:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86HF863",
          "commit": {
            "abbreviatedOid": "8a8c430"
          },
          "author": "sergemister",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:36:31Z",
          "updatedAt": "2024-08-28T14:36:31Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "Would it be clearer to say \"i.e. the default salt is used\"?  Or say \"HashLen zeros\" instead of \"all zeros\".  The salt in RFC 5869 can vary in length, and we don't want an implementation to specify a string of zeros of some other length.",
              "createdAt": "2024-08-28T14:36:31Z",
              "updatedAt": "2024-08-28T14:36:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86HF1lU",
          "commit": {
            "abbreviatedOid": "ae0f651"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:26:15Z",
          "updatedAt": "2024-08-29T19:53:23Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Fix the \"First Algorithm\" column.",
              "createdAt": "2024-08-28T14:26:15Z",
              "updatedAt": "2024-08-29T19:53:23Z"
            },
            {
              "originalPosition": 68,
              "body": "Fix this, then good to merge.",
              "createdAt": "2024-08-28T14:32:14Z",
              "updatedAt": "2024-08-29T19:53:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOKRPFO853WKpM",
      "title": "Combiner tweaks",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/55",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-03T23:47:53Z",
      "updatedAt": "2024-08-28T14:34:32Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2d6b93f6d35fa31c16c42d8da5795e11ee68f550",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_combiner_tweaks",
      "headRefOid": "833e2fbb379c0f0c41ff130d775ddf7e26a0159c",
      "closedAt": "2024-08-28T14:34:28Z",
      "mergedAt": "2024-08-28T14:34:28Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "f4a123a27c77d596366a3cf7a45d2a4b7ffb8d8f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 56,
      "id": "PR_kwDOKRPFO853ghn2",
      "title": "Editorial changes",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/56",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-06T00:35:56Z",
      "updatedAt": "2024-09-28T17:00:38Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_editorial",
      "headRefOid": "fe3fa56fa8a22b4a82fcc5062656ba893a6c6e50",
      "closedAt": "2024-09-28T17:00:29Z",
      "mergedAt": "2024-09-28T17:00:29Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "b9c8f48b9eb803bc47afc448b2808bb49723df64"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The security considerations need more work, especially the one about key reuse.\r\n\r\nAnother argument against key reuse is documented in https://github.com/lamps-wg/draft-composite-sigs/issues/49",
          "createdAt": "2024-09-25T15:04:09Z",
          "updatedAt": "2024-09-25T15:04:09Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #72 ",
          "createdAt": "2024-09-27T14:51:25Z",
          "updatedAt": "2024-09-27T14:51:25Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR has not been fully reviewed by the author's group, but I have been over it several times and I am merging it to close off all the related Issues.",
          "createdAt": "2024-09-28T16:58:03Z",
          "updatedAt": "2024-09-28T16:58:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86K6Ibj",
          "commit": {
            "abbreviatedOid": "e1202d8"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "2 small issues, one question",
          "createdAt": "2024-09-26T08:26:06Z",
          "updatedAt": "2024-09-26T09:20:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Its already -04",
              "createdAt": "2024-09-26T08:26:07Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            },
            {
              "originalPosition": 209,
              "body": "Is there a reason why it says \u201eshould\u201c and not \u201eshall\u201c or \u201emust\u201c? Proposal: \r\n[..] output shall be truncated [\u2026] by using the leftmost bits.",
              "createdAt": "2024-09-26T08:56:52Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            },
            {
              "originalPosition": 302,
              "body": "Typo: \u201eCUrve\u201c",
              "createdAt": "2024-09-26T09:19:07Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86HGGY7",
          "commit": {
            "abbreviatedOid": "fe3fa56"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:49:02Z",
          "updatedAt": "2024-09-28T16:55:30Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "typo \"achaive\".",
              "createdAt": "2024-08-28T14:49:03Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 18,
              "body": "We should think about this more. ML-KEM's FO requires the public key anyway, so the ML-KEM's private key needs to have it anyway, so we don't need to duplicate it at the composite layer. Same for RSA: the public key is a subset of the private key. We only really need to think about ECC (RFC 5915). Perhaps we need to treat ECC as a special case here?\r\n\r\nCertainly, the \"MUST\" needs to be broken out into cases.",
              "createdAt": "2024-08-28T14:59:01Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 41,
              "body": "Done",
              "createdAt": "2024-09-26T15:43:20Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 18,
              "body": "Done",
              "createdAt": "2024-09-28T14:13:31Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOKRPFO854BS5m",
      "title": "RSA-OAEP tweaks.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/57",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #35",
      "createdAt": "2024-08-10T22:11:44Z",
      "updatedAt": "2024-09-12T21:07:28Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "bbb08d15cde69aff6bcd6f751561c98668084de8",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_rsa-oaep-fix",
      "headRefOid": "7eae90b8aacec762dbc10eaa5d1614b43a50500f",
      "closedAt": "2024-09-12T20:56:13Z",
      "mergedAt": "2024-09-12T20:56:13Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "be23fd95e0964c49151786b172cc94b5e289db28"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After I make the two changes noted above, I am ok to go ahead and merge this.",
          "createdAt": "2024-09-11T14:53:30Z",
          "updatedAt": "2024-09-11T14:53:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86HGDcg",
          "commit": {
            "abbreviatedOid": "cc4086d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:45:31Z",
          "updatedAt": "2024-09-05T18:44:57Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "We do not believe that passing domSep down into RSA-OAEP does not give any security advantage, so it would simplify implementations if we leave OAEP's `L` empty because empty is the standard way to implement PKCS#1 OAEP.\r\n\r\nChange to empty string.",
              "createdAt": "2024-08-28T14:45:31Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            },
            {
              "originalPosition": 106,
              "body": "Change to empty string, ie fixed value as per 8017.",
              "createdAt": "2024-08-28T14:46:18Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            },
            {
              "originalPosition": 106,
              "body": "Also change id-pSpecified to id-empty or whatever.",
              "createdAt": "2024-08-28T14:46:48Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86I7xeb",
          "commit": {
            "abbreviatedOid": "17591e8"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-11T14:40:56Z",
          "updatedAt": "2024-09-11T14:52:51Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "To match 9180, this should be \"Encap()\" and \"Decap()\".\r\nTODO: change throughout the document.",
              "createdAt": "2024-09-11T14:40:56Z",
              "updatedAt": "2024-09-11T14:52:51Z"
            },
            {
              "originalPosition": 117,
              "body": "Turn this into a real note.\r\n\"... since the mask length will be constant for each composite algorithm, implementations could pre-compute and hard-code the mask length value.\"",
              "createdAt": "2024-09-11T14:52:42Z",
              "updatedAt": "2024-09-11T14:52:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOKRPFO856xUDp",
      "title": "ASN.1 tweaks. Closes #34",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/66",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #34 ",
      "createdAt": "2024-09-08T14:27:21Z",
      "updatedAt": "2024-09-08T14:32:32Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "bbb08d15cde69aff6bcd6f751561c98668084de8",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_asn1_fix_34",
      "headRefOid": "08a2d909be83b3f6d7c27ac414b18cba0dfd51da",
      "closedAt": "2024-09-08T14:32:29Z",
      "mergedAt": "2024-09-08T14:32:29Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "03278690c4c51cb487c0a3cf6394dfcb0bf01483"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 70,
      "id": "PR_kwDOKRPFO858sLI9",
      "title": "Updated ASN.1 module for Carl's feedback.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/70",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #29 \r\n\r\n(I think I incorrectly tagged this against #26 in the git commit)",
      "createdAt": "2024-09-25T17:37:10Z",
      "updatedAt": "2024-09-26T14:45:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "621cd6172f85737deb63552ed656b0e5ce989e30",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_asn1_29",
      "headRefOid": "2eb343caadc6a3990d8018c1dd797a203ca51011",
      "closedAt": "2024-09-26T14:45:15Z",
      "mergedAt": "2024-09-26T14:45:15Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "PR_kwDOKRPFO8581s1c",
      "title": "Mikeo key reuse",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/71",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-26T19:23:41Z",
      "updatedAt": "2024-10-17T20:48:02Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_key_reuse",
      "headRefOid": "e195957eec0b2463013b8e32194c4860582aa02e",
      "closedAt": "2024-10-17T20:47:57Z",
      "mergedAt": "2024-10-17T20:47:57Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "15f90210a93cddb819ddb3195322968426d9e910"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86LajL7",
          "commit": {
            "abbreviatedOid": "d014c63"
          },
          "author": "br-hale",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T02:17:06Z",
          "updatedAt": "2024-10-01T02:17:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Suggested edit:\r\n\r\nWhen using single-algorithm cryptography, the best practice is to always generate fresh keying material for each purpose, for example when renewing a certificate, or obtaining both a TLS and S/MIME certificate for the same device, however in practice key reuse in such scenarios is not always catastrophic to security and therefore often tolerated. ",
              "createdAt": "2024-10-01T02:17:06Z",
              "updatedAt": "2024-10-01T02:17:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86LaqKx",
          "commit": {
            "abbreviatedOid": "d014c63"
          },
          "author": "br-hale",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T02:57:46Z",
          "updatedAt": "2024-10-01T02:57:47Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Suggested edit:\r\n\r\n\"However there is still a risk of key reuse which relates to certificate revocation, as well as general key reuse security issues.\"",
              "createdAt": "2024-10-01T02:57:46Z",
              "updatedAt": "2024-10-01T02:57:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86NRgVW",
          "commit": {
            "abbreviatedOid": "4cfcd21"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-10-15T17:58:06Z",
          "updatedAt": "2024-10-15T19:02:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "...eleven specific pairwise combinations...\r\ncount is currently nine, right?",
              "createdAt": "2024-10-15T17:58:06Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            },
            {
              "originalPosition": 197,
              "body": "[...]and therefore IND-CCA2 secure so, long as [...]\r\n-> [...] secure, so long as [...]",
              "createdAt": "2024-10-15T18:35:29Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            },
            {
              "originalPosition": 227,
              "body": "is this statement true? Afaik its more complicated in the real world. Is there an RFC describing this?",
              "createdAt": "2024-10-15T18:59:06Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOKRPFO85-VfAx",
      "title": "Added text about fixed-length inputs and ML-KEM decaps failures",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/75",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #74 \r\nCloses #67 ",
      "createdAt": "2024-10-11T12:04:02Z",
      "updatedAt": "2024-10-17T19:50:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b9c8f48b9eb803bc47afc448b2808bb49723df64",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_lengths",
      "headRefOid": "0088399e87e1ff59189c68bdd4e27d4cf624f95e",
      "closedAt": "2024-10-17T19:50:25Z",
      "mergedAt": "2024-10-17T19:50:25Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "0fbb50682911cee9aa5bb7c9dc2ad1f3651b5d7a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86NRePO",
          "commit": {
            "abbreviatedOid": "bd062a4"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T17:55:08Z",
          "updatedAt": "2024-10-15T17:55:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOKRPFO85-liWU",
      "title": "Add explicit ALgorithmIdentifiers of component keys.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/76",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-14T19:49:10Z",
      "updatedAt": "2024-10-21T13:52:44Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b9c8f48b9eb803bc47afc448b2808bb49723df64",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "20-add-a-new-section-explicitly-list-spki-algids",
      "headRefOid": "2dc3ed64c60fbe72c829c7a5542fa928f8be732d",
      "closedAt": "2024-10-18T20:10:01Z",
      "mergedAt": "2024-10-18T20:10:01Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "9a74e4a2de8be612643d3e735356b2687aeb5a40"
      },
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "Question to group: for RSA key AlgIds it is possible to be very specific on its usage. Do we want/need this?",
          "createdAt": "2024-10-15T17:45:48Z",
          "updatedAt": "2024-10-15T17:45:48Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This does not yet provide an encoding of OAEP parameters. We need to address that before merging.\r\n\r\nUpdate: Just need John to provide a DER encoding of the RSA-OAEP params.",
          "createdAt": "2024-10-17T19:44:04Z",
          "updatedAt": "2024-10-17T21:09:38Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "@ounsworth , @johngray-dev : added DER encoding and some places where RSA 4096 combo was missing... I assumed that the OAEP params for RSA 4096 are the same as for RSA 2048",
          "createdAt": "2024-10-18T12:30:28Z",
          "updatedAt": "2024-10-18T12:30:28Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Jan! I'm going to merge this now.",
          "createdAt": "2024-10-18T19:49:51Z",
          "updatedAt": "2024-10-18T19:49:51Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janklaussner your DER encoding of the RSA-OAEP AlgID had an extra NULL at the end that John and I couldn't figure out, so I replaced it with a DER encoding produced by our toolkit.",
          "createdAt": "2024-10-18T20:05:59Z",
          "updatedAt": "2024-10-18T20:05:59Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> @janklaussner your DER encoding of the RSA-OAEP AlgID had an extra NULL at the end that John and I couldn't figure out, so I replaced it with a DER encoding produced by our toolkit.\r\n\r\n@ounsworth @johngray-dev I'm using OpenSSL and try to create or import OAEP keys, but neither my nor your encoding worked. How did you do it? Can you send me an example public key that works for you? Otherwise I doubt this kind of \"key\" is supported by OpenSSL.\r\nThanks!",
          "createdAt": "2024-10-21T13:52:42Z",
          "updatedAt": "2024-10-21T13:52:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86Nyq0m",
          "commit": {
            "abbreviatedOid": "0f406b1"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T19:52:10Z",
          "updatedAt": "2024-10-18T19:52:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOKRPFO85_CS6l",
      "title": "Aligned Use In CMS section with draft-cms-kyber",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/78",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #65",
      "createdAt": "2024-10-18T00:53:09Z",
      "updatedAt": "2024-10-19T22:44:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "9a74e4a2de8be612643d3e735356b2687aeb5a40",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cmskyber_align",
      "headRefOid": "43650524e50277232f8017847e331d80409587b9",
      "closedAt": "2024-10-19T22:44:46Z",
      "mergedAt": "2024-10-19T22:44:46Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "4b48abc2e93188b6d5043369d373ed8f4860c400"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Also, from Section 5:\r\n> \r\n> \" _HKDF_: [RFC5869]. Salt is not provided; ie the default salt (all zeroes of length HashLen) will be used. In all cases, the output length of HKDF is the same as the block size of the underlying hash function, for example `HKDF-SHA256/256` means HKDF-SHA256 with an output length `L` of 256 bits (32 octets).\"\r\n> \r\n> \"In all cases...\" is not true anymore, because the output size of HKDF when used in CMS KEMRecipientInfo depends on the key size of the wrap function. Now you will have to be explicit about the output sizes in the instances where HKDF is used.\r\n\r\nYou're right that I needed to clean up that sentence a bit, but your conclusion is not right. This table describes the KDF used inside Composite ML-KEM. With the most recent change, Composite ML-KEM will always output a 256-bit shared secret key (same as ML-KEM). The KDF used with CMS KEMRI (specified separately in Table #tab-cms-kdf-wrap) has a variable output size to match the wrap function.",
          "createdAt": "2024-10-19T22:07:45Z",
          "updatedAt": "2024-10-19T22:07:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86NuI5o",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Also, from Section 5:\r\n\r\n\" _HKDF_: [RFC5869]. Salt is not provided; ie the default salt (all zeroes of length HashLen) will be used. In all cases, the output length of HKDF is the same as the block size of the underlying hash function, for example `HKDF-SHA256/256` means HKDF-SHA256 with an output length `L` of 256 bits (32 octets).\"\r\n\r\n\"In all cases...\" is not true anymore, because the output size of HKDF when used in CMS KEMRecipientInfo depends on the key size of the wrap function.  Now you will have to be explicit about the output sizes in the instances where HKDF is used.",
          "createdAt": "2024-10-18T10:22:15Z",
          "updatedAt": "2024-10-18T11:39:11Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "General comment: Throughout the document, instead of saying \"Composite KEM\", should you say \"Composite ML-KEM\"?",
              "createdAt": "2024-10-18T10:22:16Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nAll recommendations for using Composite ML-KEM in CMS are fully aligned with the use of ML-KEM in CMS {{I-D.ietf-lamps-cms-kyber}}.\r\n```",
              "createdAt": "2024-10-18T10:22:55Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nWhen Composite ML-KEM is employed for a recipient, the RecipientInfo alternative for that recipient MUST be OtherRecipientInfo using the KEMRecipientInfo structure as defined in {{RFC9629}}.\r\n```",
              "createdAt": "2024-10-18T10:23:15Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\n> kem identifies the KEM algorithm; it MUST contain one of the Composite ML-KEM identifiers listed in {{sec-alg-ids}}.\r\n```",
              "createdAt": "2024-10-18T10:25:42Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n> kdf identifies the key-derivation algorithm. Note that the Key Derivation Function (KDF) used for CMS RecipientInfo process MAY be different than the KDF used within the Composite ML-KEM algorithm or one of its components.\r\n```",
              "createdAt": "2024-10-18T10:27:00Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n> ukm is an optional random input to the key-derivation function. Composite ML-KEM doesn't place any requirements on the ukm contents.\r\n```",
              "createdAt": "2024-10-18T10:27:17Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 119,
              "body": "```suggestion\r\n### Components for Composite ML-KEM in CMS\r\n```",
              "createdAt": "2024-10-18T10:28:22Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nA compliant implementation MUST support the following algorithms combinations for the KEMRecipientInfo kdf and wrap fields when the corresponding Composite ML-KEM algorithm is listed in the KEMRecipientInfo kem field. The KDFs listed below align with the KDF used internally for the KEM combiner. An implementation MAY also support other key-derivation functions and other key-encryption algorithms within CMS KEMRecipientInfo.\r\n```",
              "createdAt": "2024-10-18T10:28:40Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 121,
              "body": "I'm making a bunch of theses \"CompositeML-KEM\" -> \"Composite ML-KEM\" suggestions.  I've only found \"CompositeML-KEM\" in the edits for this PR, not elsewhere in the file.  Maybe \"CompositeML-KEM\" is what you want (I don't think it should be; what's a \"CompositeML\"?), but either way it should be consistent throughout the document.  I think all instances of \"Composite KEM\" should be changed to \"Composite ML-KEM\".",
              "createdAt": "2024-10-18T10:30:46Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 143,
              "body": "```suggestion\r\n* `id-aes*-wrap` are defined in [RFC3394].\r\n```",
              "createdAt": "2024-10-18T10:38:56Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 134,
              "body": "```suggestion\r\n| id-MLKEM768-RSA2048               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-RSA3072               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-RSA4096               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-X25519                | id-sha3-256             | id-aes128-wrap     |\r\n| id-MLKEM768-ECDH-P384             | id-alg-hkdf-with-sha384 | id-aes256-wrap     |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | id-alg-hkdf-with-sha384 | id-aes256-wrap     |\r\n| id-MLKEM1024-ECDH-P384            | id-sha3-512             | id-aes256-wrap     |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | id-sha3-512             | id-aes256-wrap     |\r\n| id-MLKEM1024-X448                 | id-sha3-512             | id-aes256-wrap     |\r\n```",
              "createdAt": "2024-10-18T10:39:29Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 134,
              "body": "RFC 3394 doesn't capitalize the W in id-aesXXX-wrap.",
              "createdAt": "2024-10-18T10:40:12Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 129,
              "body": "id-sha3-256/512 is not a KDF that can be used by KEMRecipientInfo. RFC 9629 requires the KDF to take IKM, L and info parameters.  A straight SHA3 invocation doesn't take info or length parameters.\r\n\r\nYour options are id-alg-hkdf-with-sha3-256 or id-kmac128.\r\n\r\nIf you use KMAC, you can steal section 2.2.2 of draft-ietf-lamps-cms-kyber-04 as a parallel for your \"Use of the HKDF-based Key Derivation Function\" section: https://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-kyber-04#section-2.2.2\r\n\r\nIf you use HKDF with SHA3, change the \"HKDF may be used with different hash functions...\" paragraph of the \"Use of the HKDF-based Key Derivation Function\" section to mention SHA3 and HKDF with SHA3 identifiers.",
              "createdAt": "2024-10-18T10:57:14Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 130,
              "body": "Per table 3 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf, I don't believe that SHA-384 and SHA3-512 are necessary (although perhaps you're matching with the internal Composite ML-KEM KDF.\r\n\r\nSHA-256/SHA3-256/KMAC128 all have >= 256 bits of (2nd) preimage resistance, which is what's needed for a KDF.  Collision resistance isn't needed , there SHA-256, etc have only 128 bits of security.\r\n\r\nBy this same logic, your KEM Combiner KDFs can also be reduced to use only SHA-256 and SHA3-256 instead of any higher variants.",
              "createdAt": "2024-10-18T11:11:42Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Ny0xU",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T20:22:22Z",
          "updatedAt": "2024-10-18T20:22:22Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Good suggestion. I'll do that.",
              "createdAt": "2024-10-18T20:22:22Z",
              "updatedAt": "2024-10-18T20:22:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N05-E",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T13:51:13Z",
          "updatedAt": "2024-10-19T13:51:13Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Oh rats, that's a really good point. Ok. So I can't *fully* align this with the internal hash function used within the KEM combiner. Of course it needs to have the API of a real KDF.",
              "createdAt": "2024-10-19T13:51:13Z",
              "updatedAt": "2024-10-19T13:51:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1F-N",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T14:34:50Z",
          "updatedAt": "2024-10-19T14:34:50Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Very helpful, thanks.",
              "createdAt": "2024-10-19T14:34:50Z",
              "updatedAt": "2024-10-19T14:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1F-o",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T14:34:59Z",
          "updatedAt": "2024-10-19T14:35:00Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Very helpful, thanks.",
              "createdAt": "2024-10-19T14:34:59Z",
              "updatedAt": "2024-10-19T14:35:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1LVu",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T15:06:59Z",
          "updatedAt": "2024-10-19T15:29:49Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Something's wrong here and I'm not sure what you're trying to say.  Per Table 3, KMAC128 has 128 bits of preimage resistance, not >= 256.  And KMAC hasn't even been brought up yet in this document, so if you're just referring to the KDFs in #tab-kem-algs, remove the mention of KMAC and say they all provider 258 bits of security, not 128.",
              "createdAt": "2024-10-19T15:06:59Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 74,
              "body": "And I realize the issue, in one of my previous comments I said that KMAC-128 was one of your options.  I should have said KMAC-256, sorry.  I was confusing KMAC-128 with SHAKE128/256, which does have 256 bits of security.  But per table 3 of SP.800-57pt1r5, KMAC128 has 128 bits and KMAC256 has 256 bits.  Since you're only using ML-KEM-768 and up, KMAC256 makes sense.",
              "createdAt": "2024-10-19T15:15:50Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 97,
              "body": "Per my comment above, all this (and the table below) should be KMAC256 instead of KMAC128.",
              "createdAt": "2024-10-19T15:17:02Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 131,
              "body": "I can't figure out the logic in the choice between KMAC and HKDF in this table. In particular, sometimes ECDH is paired with HKDF and sometimes it's paired with KMAC.\r\n\r\nDoesn't the same logic from cms-kyber apply here - implementations might not have SHA3 at the CMS level, so that's why we use HKDF-with-SHA2 everywhere?\r\n\r\nI realize that in my previous review I said your options here were KMAC vs HKDF-with-SHA3, but I clearly didn't look at the pairings closely enough to realize I didn't understand why things were paired as they were. ",
              "createdAt": "2024-10-19T15:28:16Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2Eq_",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:18:48Z",
          "updatedAt": "2024-10-19T22:18:48Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Hi @danvangeest,\r\n\r\nThe choices have been debated to death on the LAMPS and OpenPGP mailing lists. I have tried to provide some kind of coherent explanation in the very next section \"## Rationale for choices\", so let me know if that doesn't make sense, but the truth is that I can't really defend the choices beyond that I'm trying to balance about 15 conflicting opinions on the mailing list, and while I'm never going to make everyone happy, this set seems to be some kind of global minimum in how much I get yelled at.\r\n\r\n\r\nThe main things I'm trying to align against are:\r\n\r\n1. X-Wing (draft-connolly-cfrg-xwing-kem-04) uses SHA3-256, so our id-MLKEM768-X25519 should do the same.\r\n2. openpgp uses SHA3-256 for all combinations -- https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-pqc-04#name-key-combiner -- Russ has been adamant that these two drafts align as much as possible.\r\n3. Some people want SHA2 combinations, so I somewhat arbitrarily decided to make the ML-KEM768's (except X-Wing) use SHA2, and the ML-KEM1024's use SHA3. This is supposed to be some kind of compromise instead of just 2x\u2019ing the list to provide every combination with both SHA2 and SHA3.\r\n\r\nI guess the test will be if anyone says that the NEED ML-KEM1024 with SHA2, in which case I'll have to ask the LAMPS mailing list whether Objective 2 should be completely thrown out the window in order to satisfy Objective 3, or if I should just 2x the list.",
              "createdAt": "2024-10-19T22:18:48Z",
              "updatedAt": "2024-10-19T22:24:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2GRL",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:37:48Z",
          "updatedAt": "2024-10-19T22:37:48Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Oh I see my mistake.\r\n\r\nSP.800-56pt1r5 Table 3: I didn't read carefully enough. SHA-256 and SHA3-256 are equivalent to KMAC128 when you need collision resistance, but are equivalent to KMAC256 when you only need (2nd) pre-image resistance. Thanks.",
              "createdAt": "2024-10-19T22:37:48Z",
              "updatedAt": "2024-10-19T22:37:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2HJD",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:42:00Z",
          "updatedAt": "2024-10-19T22:42:00Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Done.",
              "createdAt": "2024-10-19T22:42:00Z",
              "updatedAt": "2024-10-19T22:42:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2HPK",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:42:12Z",
          "updatedAt": "2024-10-19T22:42:12Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "Done.",
              "createdAt": "2024-10-19T22:42:12Z",
              "updatedAt": "2024-10-19T22:42:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOKRPFO85_IUFT",
      "title": "Public key ASN.1 re-work and Private key compression",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/80",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First text for key format changes.  The ASN.1 module still needs to be updated.",
      "createdAt": "2024-10-18T17:30:48Z",
      "updatedAt": "2024-10-20T01:33:12Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "15f90210a93cddb819ddb3195322968426d9e910",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "59-PublicPrivateKeyCompression",
      "headRefOid": "5f8dc4c6d894ceba31d86b254a0806bac8da8134",
      "closedAt": "2024-10-20T01:33:12Z",
      "mergedAt": "2024-10-20T01:33:12Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "db1bcb0f2495cb6375fd35aa58c7918008f13646"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "PR_kwDOKRPFO85_OlVh",
      "title": "ietf121_top-to-bottom",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/82",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [x] Top-to-bottom alignment pass\r\n- [ ] Go through all the xml2rfc compiler warnings\r\n- [x] Run spell-check",
      "createdAt": "2024-10-20T14:29:18Z",
      "updatedAt": "2024-10-21T20:34:56Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "db1bcb0f2495cb6375fd35aa58c7918008f13646",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "ietf121_top-to-bottom",
      "headRefOid": "1b9cb635d5a990decbb1ed637ef1adad43f0f800",
      "closedAt": "2024-10-21T20:34:48Z",
      "mergedAt": "2024-10-21T20:34:48Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "de2d8de6461c6dc564d1666a75d25b9fd105ad25"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 84,
      "id": "PR_kwDOKRPFO85_n0H2",
      "title": "Fix the ML-KEM encodings",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/84",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #83",
      "createdAt": "2024-10-23T13:56:53Z",
      "updatedAt": "2024-10-23T14:55:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "de2d8de6461c6dc564d1666a75d25b9fd105ad25",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "83-Fix-MLKEM-Encodings",
      "headRefOid": "fe81529d35e07ac7ac83b96a3a4ded45d5500c06",
      "closedAt": "2024-10-23T14:55:25Z",
      "mergedAt": "2024-10-23T14:55:25Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "af137b53cb1a0e9de0f73c7856a5e2e97f165dcf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "PR_kwDOKRPFO86AicuP",
      "title": "Fix typos",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/85",
      "state": "MERGED",
      "author": "jiep",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-31T15:29:40Z",
      "updatedAt": "2024-11-09T18:56:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "af137b53cb1a0e9de0f73c7856a5e2e97f165dcf",
      "headRepository": "jiep/draft-composite-kem",
      "headRefName": "patch-1",
      "headRefOid": "747f274e53846548cd1c5019b65402b4801fc4f0",
      "closedAt": "2024-11-09T18:56:25Z",
      "mergedAt": "2024-11-09T18:56:25Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "8810bc0ebb42fb9553387361765f1a56756170db"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!",
          "createdAt": "2024-11-09T18:56:17Z",
          "updatedAt": "2024-11-09T18:56:17Z"
        }
      ],
      "reviews": []
    }
  ]
}