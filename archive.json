{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-09-23T01:50:03.680879+00:00",
  "repo": "lamps-wg/draft-composite-kem",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "pull request",
      "description": "This issue is addressed by an open PR",
      "color": "67267D"
    },
    {
      "name": "Post-WGLC",
      "description": null,
      "color": "aaaaaa"
    },
    {
      "name": "cleanup",
      "description": "",
      "color": "1D76DB"
    },
    {
      "name": "Blocks WGLC",
      "description": null,
      "color": "aaaaaa"
    },
    {
      "name": "wontfix?",
      "description": null,
      "color": "aaaaaa"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "I_kwDOKRPFO85wlqLV",
      "title": "Comments from Stephen Ferrell",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/1",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "(June 20, 2023)\r\n\r\nA couple of specific comments in case those help:\r\n\r\n    the title refers to \"Internet PKI\" so I don't know if it\r\n    will in fact be possible to usefully unwind this from the\r\n    other composite drafts\r\n\r\n[[MO]] We haven't changed the title since draft-ounsworth-pq-composite-sigs-00 in 2019. Happy to change that.\r\n\r\n    describing this as layering seems wrong\r\n\r\n    kema-CompositeKEM and the other ASN.1 structures seem very\r\n    complex and overly-generic\r\n    [[MO]] It's really just machinery to make the ASN.1 module shorter. Without it, the module would be many hundreds of lines longer. We can unroll it if that's the will of the WG.\r\n\r\n    PUBLIC-KEYS in table 1 refers to signatures, I didn't get\r\n    why?\r\n    [[MO]] copy&paste error. Thanks.\r\n\r\n    section 7.2 (\"OR\" modes) seems odd\r\n    [[MO]] OR modes are now covered by draft-pala-klaussner-composite-kofn; that section should have been removed.\r\n\r\n    appendix C confused me: this I-D has no IPR declaration\r\n    but states that an IPR declaration \"relates\" to this\r\n    draft\r\n    [[MO]] There's IPR on draft-ounsworth-pq-composite-sigs, which probably applies to all three drafts.\r\n",
      "createdAt": "2023-08-23T21:04:10Z",
      "updatedAt": "2024-02-14T15:44:01Z",
      "closedAt": "2024-02-14T15:44:01Z",
      "comments": []
    },
    {
      "number": 2,
      "id": "I_kwDOKRPFO85wlqMj",
      "title": "WGLC issue: Remove Informative reference to draft-cfrg-kem-combiners ?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/2",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is a procedural issue: this draft is adopted by LAMPS, but it depends Informatively on draft-ounsworth-cfrg-kem-combiners, which is not yet adopted by CFRG. That will cause a problem at WGLC.\r\n\r\nI propose to leave this issue for now and revisit it as we approach WGLC.",
      "createdAt": "2023-08-23T21:03:13Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": []
    },
    {
      "number": 9,
      "id": "I_kwDOKRPFO8506Rus",
      "title": "Add Max, Jan, Scott as co-authors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/9",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "They are equally part of the author's group.",
      "createdAt": "2023-10-25T13:29:03Z",
      "updatedAt": "2024-02-06T15:33:08Z",
      "closedAt": "2024-02-06T15:33:08Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by https://github.com/lamps-wg/draft-composite-kem/commit/29abd8be525ad993279667b166571e5e56bfdce2",
          "createdAt": "2024-02-06T15:33:04Z",
          "updatedAt": "2024-02-06T15:33:04Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOKRPFO851Oimq",
      "title": "Fix references to both id-sha3-256 and mda-shake256",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/10",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It should be one or the other, but not both.",
      "createdAt": "2023-10-28T21:32:12Z",
      "updatedAt": "2024-02-06T15:39:00Z",
      "closedAt": "2024-02-06T15:39:00Z",
      "comments": []
    },
    {
      "number": 12,
      "id": "I_kwDOKRPFO859-Xx1",
      "title": "Add a section \"Use in CMS\"",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/12",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This draft should define how you take a composite KEM and stuff it into a KEMRI.",
      "createdAt": "2024-02-01T21:18:51Z",
      "updatedAt": "2024-03-02T22:17:51Z",
      "closedAt": "2024-03-02T22:17:51Z",
      "comments": []
    },
    {
      "number": 13,
      "id": "I_kwDOKRPFO85-a9m-",
      "title": "If the X-Wing PR does not get merged, then re-run aspell",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/13",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I ran the aspell spell checker on #11 and found some embarrassing spelling mistakes. If that PR is ultimately rejected, then re-run aspell over the main branch. ",
      "createdAt": "2024-02-06T14:59:43Z",
      "updatedAt": "2024-03-02T22:24:49Z",
      "closedAt": "2024-03-02T22:24:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done on main.",
          "createdAt": "2024-03-02T22:24:49Z",
          "updatedAt": "2024-03-02T22:24:49Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOKRPFO85-dY23",
      "title": "I think info should be ASN.1 DER TLV for the combiner OID",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/16",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "Motivation: converting the ASCII name of the OID to bytes could be a source interop problems.\r\nComment from Ilari: https://mailarchive.ietf.org/arch/msg/spasm/JUISSb8kzHvly6iwEaY4jYGG_yE/",
      "createdAt": "2024-02-06T20:42:51Z",
      "updatedAt": "2024-07-07T14:18:49Z",
      "closedAt": "2024-07-07T14:18:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It is worth putting an EDNOTE in the document that once we do this, we will need IANA to pre-allocate the OIDs so that we can re-compile the domain separators and update the table in the doc.\r\n(and also put the same EDNOTE in composite-sigs)",
          "createdAt": "2024-02-13T20:45:06Z",
          "updatedAt": "2024-02-13T22:43:02Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Align with composite signatures with a similar table for domain separators (DER encoded OID values).  ",
          "createdAt": "2024-07-04T19:58:02Z",
          "updatedAt": "2024-07-04T19:58:02Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Added table in section 2.5, and also updated the definition of the fixedInfo value.   See Merge here:  https://github.com/lamps-wg/draft-composite-kem/commit/e9db1fa3e40edcca15acbee1d19db1c3b7ea9089\r\n",
          "createdAt": "2024-07-04T21:09:12Z",
          "updatedAt": "2024-07-04T21:09:12Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOKRPFO85-0YTv",
      "title": "Copy the Key Usage section from composite-sigs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/17",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-09T18:31:50Z",
      "updatedAt": "2024-02-14T15:42:33Z",
      "closedAt": "2024-02-14T15:42:33Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "I_kwDOKRPFO85_fTKA",
      "title": "Add a new section: explicitly list SPKI AlgIds",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/20",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "We should add a section listing explicitly the DER-encoded AlgorithmIdentifiers for the components of each composite public key and signature algorithm. This is important to resolve ambiguity on, for example, whether the RSA should have a NULL param, and the ECC curve params.\r\n\r\nExample, for id-MLDSA44-ECDSA-P256-SHA256 the ML-DSA SPKI would have an AlgorithmIdentifier of:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ml-dsa\r\n    }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  }\r\nAnd the ECDSA-P256-SHA256 would have a SPKI would have an AlgorithmIdentifier of:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ecPublicKey,\r\n       secp256r1  \r\n  }\r\nwhich is:\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) keyType(2) 1 },\r\n       iso(1) member-body(2) us(840) ansi-X9-62(10045) curves(3) prime(1) 7}\r\nAnd the signature algorithm for id-MLDSA44-ECDSA-P256-SHA256, the first component signature algorithm would have an AlgorithmIdentifier of\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n        id-ml-dsa\r\n    }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  }\r\nand the second component signature algorithm would have an AlgorithmIdentifier of\r\n\r\n   AlgorithmIdentifier  ::=  SEQUENCE  {\r\n          ecdsa-with-SHA256\r\n  }\r\nwhich is:\r\n\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n           {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 2\r\n       }\r\n  }\r\nWith that done, we should replace the message prefix values in Sectien 2.4 with the SHA256 hash of the signature AlgorithmIdentifiers. This has two nice properties that are better than using the ASCII encoding of the OID name: 1) they are all the same length (ie the length of SHA256), and 2) if the inner OIDs change, for example with a new Kyber version, then the message prefix changes, which prevents cryptographic compatibility issues; or otherwise stated: provides signature domain-separation based on the component OIDs.\r\n\r\n--- SHA256 of the DER encoding of the following ASN.1 value\r\n--- Security Consideration note: the choice of SHA256 here is not security-relevant since it is only to generate fixed string values.\r\n\r\nSEQUENCE {\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n        {\r\n     1.3.6.1.4.1.2.267.12.4.4\r\n      }\r\n  },\r\nAlgorithmIdentifier  ::=  SEQUENCE  {\r\n           {\r\n     iso(1) member-body(2) us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-SHA2(3) 2\r\n       }\r\n  }\r\n}\r\n",
      "createdAt": "2024-02-16T16:01:24Z",
      "updatedAt": "2024-10-18T20:10:02Z",
      "closedAt": "2024-10-18T20:10:02Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Jan to work on this one and align with what is in composite signatures",
          "createdAt": "2024-07-04T19:57:18Z",
          "updatedAt": "2024-07-04T19:57:18Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For now I have added the following section as an appendix. We'll need to fill it out later.\r\n\r\n# Fixed Component Algorithm Identifiers\r\n\r\nThe following table lists explicitely the DER encoded `AlgorithmID` that MUST be used when reconstructing `SubjectPublicKeyInfo` objects for each component public key, which may be required for example if cryptographic library requires the public key in this form in order to process each component algorithm. The public key `BIT STRING` should be taken directly from the respective component of the CompositeKEMPublicKey.\r\n\r\n| Composite KEM     | First AlgorithmID | Second AlgorithmID |\r\n| --------------    | ----------------- | ------------------ |\r\n| TODO              | TODO              | TODO               |\r\n",
          "createdAt": "2024-07-07T15:20:38Z",
          "updatedAt": "2024-07-07T15:20:53Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See parallel issue in composite-sigs: https://github.com/lamps-wg/draft-composite-sigs/issues/7",
          "createdAt": "2024-07-07T15:24:09Z",
          "updatedAt": "2024-07-08T15:16:24Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOKRPFO85_3gER",
      "title": "Should we instead or in addition support RSA-OAEP?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/21",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sophie Schmieg made the excellent point:\r\n\r\n> on the classical side, nobody uses RSA-KEM (a shame, but alas), leaving RSA-OAEP",
      "createdAt": "2024-02-20T20:48:46Z",
      "updatedAt": "2024-07-07T20:05:40Z",
      "closedAt": "2024-07-07T20:05:40Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What about RSA-PKCS#1 ?",
          "createdAt": "2024-02-20T21:13:11Z",
          "updatedAt": "2024-02-20T21:13:11Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Asking Lamps WG about this at the IETF 120 presentation",
          "createdAt": "2024-07-04T19:56:33Z",
          "updatedAt": "2024-07-04T19:56:33Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOKRPFO86BCuSl",
      "title": "Use KMAC KDF",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/22",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Russ updated [https://datatracker.ietf.org/doc/draft-ietf-lamps-cms-sha3-hash/](https://urldefense.com/v3/__https:/datatracker.ietf.org/doc/draft-ietf-lamps-cms-sha3-hash/__;!!FJ-Y8qCqXTj2!cYbj0IFUu8cOAbr5KOWWSxyYfXh5w296ho-g74KbHiGYlyk4u-kb3ezx67vbdcKnOz-kTEU2FZYFBrVeQy500d5Kp4AOfwQq3r6ZVBFpCAo$) with KMAC KDF OIDs, so I\u2019ve updated cms-kyber to specify KMAC KDF as MTI instead of HKDF-with-SHA3.",
      "createdAt": "2024-03-02T20:52:34Z",
      "updatedAt": "2024-03-02T22:55:45Z",
      "closedAt": "2024-03-02T22:55:45Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Just steal it from\r\n\r\nhttps://github.com/lamps-wg/cms-kyber/pull/7",
          "createdAt": "2024-03-02T21:08:49Z",
          "updatedAt": "2024-03-02T21:08:49Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOKRPFO86BC5Oy",
      "title": "Is section \"## RSA-KEM Parameters\" actually needed?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/24",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": " Go read 5990bis more carefully.\r\n\r\nAlso, maybe not needed at all if we go with RSA-OAEP.",
      "createdAt": "2024-03-02T23:03:41Z",
      "updatedAt": "2024-07-07T20:05:40Z",
      "closedAt": "2024-07-07T20:05:40Z",
      "comments": []
    },
    {
      "number": 25,
      "id": "I_kwDOKRPFO86BDDgi",
      "title": "Consider lifting AES-192 to AES-256",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/25",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In cms-kyber, we specified id-aes256-wrap for NIST level 3 / 192 bit security, even though it's stronger than necessary, because of a suggestion from Scott that AES-192 isn't as widely supported.  Consider doing the same here.",
      "createdAt": "2024-03-03T01:20:43Z",
      "updatedAt": "2024-07-07T15:11:23Z",
      "closedAt": "2024-07-07T15:11:23Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We will update this for IETF 120.",
          "createdAt": "2024-07-04T19:32:50Z",
          "updatedAt": "2024-07-04T19:32:50Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOKRPFO86GAx2N",
      "title": "Compliant KEM Combiner",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/26",
      "state": "CLOSED",
      "author": "bencemali",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In NIST's guidelines for key derivation (see https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf) in section 2 they specify an approved method for combining a compliant secret with auxiliary shared secret like so:\r\n\r\n> In addition to the currently approved techniques for the generation of the shared secret Z as\r\n> specified in SP 800-56A and SP 800-56B, this Recommendation permits the use of a \u201chybrid\u201d\r\n> shared secret of the form Z\u2032 = Z || T, a concatenation consisting of a \u201cstandard\u201d shared secret Z that\r\n> was generated during the execution of a key-establishment scheme (as currently specified in [SP\r\n> 800-56A] or [SP 800-56B]) followed by an auxiliary shared secret T that has been generated using\r\n> some other method. The content, format, length, and method used to generate T must be known\r\n> and agreed upon by all parties that will rely upon the derived keying material, as well as by any\r\n> agents trusted to act on their behalf.\r\n\r\nThe present combiner in this draft doesn't include the secret from an approved method first in the input of the KDF:\r\n\r\n> Combiner(ct1, ss1, ct2, ss2, fixedInfo) =\r\n>   KDF(counter || ct1 || ss1 || ct2 || ss2 || fixedInfo, outputBits)\r\n\r\nWe suggest moving either ss1 or ss2 to the beginning of the input to the KDF since concatenating any auxiliary secret to a compliant secret will result in a compliant key when feeding it to a compliant KDF. Even better, if we choose the classical key to be at the beginning (ss2 in the proposed combinations) it would mean that this construction would be considered compliant by NIST even if used with a non-standardized/compliant post-quantum algorithm.\r\n\r\nThe fixed counter value was added to in this draft to be compliant, but in the nist specification the counter must be followed by the compliant secret. In this specification ct1 is not a compliant secret, so this doesn't seem to be a good solution.",
      "createdAt": "2024-04-17T13:49:28Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you for the comment! That is an interesting point.\r\n\r\nEarlier versions of this draft had exactly that: the shared secrets before the ciphertexts. We received feedback that we should swap the order so that it is more friendly to embedded devices: the device will have access to the ciphertext first, and only later will it have access to the shared secret, so if it can stream the ciphertext into the combiner hash function, then it does not need to keep the ciphertext in memory.\r\n\r\nRegardless, if this change makes it impossible to FIPS-certify this under SP 800-56Cr2 (or the r3 that is coming to explicitly allow these hybrids), then that could be a more important consideration.\r\n\r\nI will ask a contact at NIST.",
          "createdAt": "2024-05-08T14:43:13Z",
          "updatedAt": "2024-05-08T14:43:13Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LAMPS discussion thread about this:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/yHFJkBs5qhQ0PIXP4NPK1vC9DAs/",
          "createdAt": "2024-07-04T19:14:59Z",
          "updatedAt": "2024-07-04T19:14:59Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Conclusion of the LAMPS discussion is:\r\n\r\n> [Dang, Quynh H. (Fed)] The above is not compliant with 56C. it needs to be KDF(counter || ss1 || ss2 || ciphertexts).",
          "createdAt": "2024-07-06T01:29:13Z",
          "updatedAt": "2024-07-06T01:29:13Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOKRPFO86OptfQ",
      "title": "Place AlgID at the end of FixedInfo",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/27",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Falko said:\r\n> In order to avoid any possible collisions in the input it is important \r\nthe algID is placed at the end of the fixedInfo string. This ensures \r\nthat the string is uniquely parsable from the rear end, because algID \r\ndefines the lengths of the other strings.\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/3Rul4GQ6kgpVZUXaE-kbr-bV9Ck/\r\n\r\nNeeds to be done after #20 .",
      "createdAt": "2024-07-06T01:24:53Z",
      "updatedAt": "2024-07-07T15:01:40Z",
      "closedAt": "2024-07-07T15:01:40Z",
      "comments": []
    },
    {
      "number": 28,
      "id": "I_kwDOKRPFO86OqEZI",
      "title": "Slides for LAMPS 120",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/28",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] I think we're converging on a consensus solution with LAMPS mailing list discussions, the parallel openpgp-pqc draft, and CFRG KEM Combiners DT (Mike Ounsworth is a member).\r\n- [ ] The goal is to get this \"within a stone's throw\" of ready so that we can finish it up and get it into WGLC shortly after FIPS 203 (ML-KEM) is final.\r\n- [ ] We're close.\r\n- [ ] Go through changelog\r\n- [ ] Go through open issues:\r\n   - [ ]  #29: The unnecessary OCTET STRING wrapping \r\n- [ ] Discuss Pros / Cons of including the `tradPK` in the combiner.\r\n- [ ] Why `KDF = SHA3` and without a SHA2 option?\r\n   - [ ] We are aware of the feedback (Deb, Joe) that some implementations will not have easy access to SHA-3 at the layer that is implementing the combiner. We have chosen SHA3 because that aligns security analysis with X-Wing and openpgp-pqc. We could _also_ add HMAC-SHA2 variants, but that will 2x the numbers of algs that we're registering (note: you can't just replace SHA3 with SHA2 without losing security properties; it has to be HMAC-SHA2).\r\n- [ ] binary compatibility with X-Wing b/c of LAMPS-specific domSep. Good? Bad?\r\n- [ ] Despite making breaking changes, we did not rev the OIDs; but we are unaware of any working implementations yet (hackathon), so we think this is ok.\r\n- [ ] We have included a USE IN CMS section, but traditionally LAMPS likes to specify the algorithms, and the CMS conventions in separate documents. Do you want us to split them?",
      "createdAt": "2024-07-06T05:01:56Z",
      "updatedAt": "2024-07-19T01:09:37Z",
      "closedAt": "2024-07-19T01:09:37Z",
      "comments": []
    },
    {
      "number": 29,
      "id": "I_kwDOKRPFO86OsrLg",
      "title": "ML-KEM public keys should be unwrapped BIT STRINGS with no ASN.1 typing",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/29",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See parallel issue in composite-sigs:\r\n\r\n* https://github.com/lamps-wg/draft-composite-sigs/issues/9",
      "createdAt": "2024-07-07T14:19:51Z",
      "updatedAt": "2024-09-26T14:45:17Z",
      "closedAt": "2024-09-26T14:45:17Z",
      "comments": []
    },
    {
      "number": 31,
      "id": "I_kwDOKRPFO86OtEHv",
      "title": "Synchronize sections and writing style of composite sigs and kems",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/31",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "By \"synchronize writing style\" I mean that there are probably very similar sections in both drafts that were written independently; we should choose the better text and apply it to both drafts.",
      "createdAt": "2024-07-07T19:05:22Z",
      "updatedAt": "2024-10-21T19:49:17Z",
      "closedAt": "2024-10-21T19:49:17Z",
      "comments": []
    },
    {
      "number": 33,
      "id": "I_kwDOKRPFO86Ot-R_",
      "title": "Send an email to LAMPS about RSA-KEM -> RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/33",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Email draft:\r\n\r\nTO: Douglas Stebila <dstebila@uwaterloo.ca>; Deirdra; bas; Russ Housley <housley@vigilsec.com>; John Gray <John.Gray@entrust.com>; Max Pala <M.Pala@cablelabs.com>; Klau\u00dfner, Jan <Jan.Klaussner@bdr.de>; spams@ietf.org\r\n\r\n> Hi all,\r\n>\r\n>Based on discussion on-list, I have changed the RSA combinations from RSA-KEM [RFC5990] to  RSA-OAEP [RFC3560]. I am not >confident that I have made this change properly, so I would like review of the RSA parts of draft-ietf-lamps-pq-composite-kem-04.\r\n>\r\n>The pull request for just the RSA-KEM -> RSA-OAEP change can be found here:\r\n>\u2022\thttps://github.com/lamps-wg/draft-composite-kem/pull/32\r\n>\r\n>Thanks.\r\n",
      "createdAt": "2024-07-08T01:48:48Z",
      "updatedAt": "2024-07-09T12:58:13Z",
      "closedAt": "2024-07-09T12:58:13Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Z5746qbrg027Jvah8vI-S3ffCR8/",
          "createdAt": "2024-07-09T12:58:12Z",
          "updatedAt": "2024-07-09T12:58:12Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOKRPFO86O8OhA",
      "title": "Issues with the ASN.1 module",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/34",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/LDfrRz-vV8JAZyIk3Xmp7ijtnHE/",
      "createdAt": "2024-07-09T12:58:46Z",
      "updatedAt": "2024-09-08T14:32:30Z",
      "closedAt": "2024-09-08T14:32:30Z",
      "comments": []
    },
    {
      "number": 35,
      "id": "I_kwDOKRPFO86O83wq",
      "title": "Russ feedback on RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/35",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/e7OlkcpDMtOWbGLPQB1hEPyyjXQ/\r\n\r\n---\r\nMike:\r\n\r\nI think you should reference Section 7.1 of RFC 8017 for the RSA-OAEP specification.\r\n\r\nThen, the description should use RSAES-OAEP-ENCRYPT and RSAES-OAEP-DECRYPT as specified there.\r\n\r\nI assume that you are thinking about the L parameter being an empty string.\r\n\r\nThe Mask Generation Function needs to be specified.  I assume you want to use MGF1 from Appendix B.2.1 of RFC 8017.  I think you can state the maskLen for the two cases that you are supporting.\r\n\r\nRuss\r\n\r\n\r\n",
      "createdAt": "2024-07-09T14:02:42Z",
      "updatedAt": "2024-09-12T20:56:14Z",
      "closedAt": "2024-09-12T20:56:14Z",
      "comments": []
    },
    {
      "number": 37,
      "id": "I_kwDOKRPFO86PbIhZ",
      "title": "Create RSA-4096 combos",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/37",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "We have been asked to add RSA-4096 combos for existing infrastructures where deployed software or policy requires 4096 bit keys.\r\n\r\nSuggestion is that since RSA 4096 is not much above 128 bit security (certainly not as much as AES-192 or SHA-384), we should pair it with the same cipher suites as the RSA-3072 combo. Or maybe even replace the 4096 combo?",
      "createdAt": "2024-07-12T20:01:06Z",
      "updatedAt": "2024-08-29T20:39:44Z",
      "closedAt": "2024-08-29T20:39:44Z",
      "comments": []
    },
    {
      "number": 38,
      "id": "I_kwDOKRPFO86PxLVR",
      "title": "Add back text to not reuse component keys",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/38",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "For the security proofs, it is imperative that the RSA / ECC keys be generated fresh for the composite and not re-used from existing deployments. I swear we had text to this effect. Certainly this deserves its own Security Consideration section.\r\n\r\nOnce we have this text ready, ping Sophie Schmieg to review it.",
      "createdAt": "2024-07-16T20:58:05Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": []
    },
    {
      "number": 39,
      "id": "I_kwDOKRPFO86QccBJ",
      "title": "NIST is suggesting that both PQ L3 + L5 should be paired with P-384",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/39",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://datatracker.ietf.org/doc/slides-120-openpgp-pqc-with-nist-and-brainpool-curves/",
      "createdAt": "2024-07-22T17:19:21Z",
      "updatedAt": "2024-09-28T17:01:44Z",
      "closedAt": "2024-09-28T17:01:44Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "I_kwDOKRPFO86QcgDZ",
      "title": "Both ss1||ss2 or ss2||ss1 are allowed in SP.800-56Cr2",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/40",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Wow. Ok. I completely mis-read Quynh's email to LAMPS:\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Yh5AelwiAOXhhdjEPzWPmWekYLA/\r\n\r\n> Similarly, the order of ss1 and ss2 may be in reverse and run the \"Process\" on page14 in SP 800-56r2 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-56Cr2.pdf .\r\n\r\nThat means we can un-twist the order in which the ss inputs are fed into the KDF; because in fact we do not need to put the traditional alg first -- keep everything consistent with the order (mlkem, trad).",
      "createdAt": "2024-07-22T17:28:56Z",
      "updatedAt": "2024-08-28T14:34:29Z",
      "closedAt": "2024-08-28T14:34:29Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "To the extent possible, synchronize with the equivalent OpenPGP drafts:\r\n\r\nhttps://github.com/openpgp-pqc/draft-openpgp-pqc/issues/132#issuecomment-2220386567\r\n\r\nRequest a meeting with Quynh, Falko, Aron.\r\nWe also want to discuss whether we can (and whether we should) synchronize domain separators so that our composite KEMs are binary compatible.",
          "createdAt": "2024-07-22T17:30:38Z",
          "updatedAt": "2024-07-26T22:18:14Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOKRPFO86Qk3iK",
      "title": "More comments from Carl",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/41",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Looking at this fresh today, I have a new question.\r\n\r\nSections 2.3.4 and 2.3.5 have this:\r\n\r\nss = Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep)\r\n\r\nSection 4.3 has this:\r\n\r\nKEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n  KDF(counter || tradSS || mlkemSS || tradCT || tradPK ||\r\n       domSep, outputBits)\r\n\r\nI don't understand the <- followed by =. Is it fair to say that 2.3.4 and 2.3.5 could be written this way:\r\n\r\ncompositeSS = Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep)\r\n\r\nAnd 4.3 written this way:\r\n\r\nKEK = KDF(counter || compositeSS, outputBits)",
      "createdAt": "2024-07-23T16:08:39Z",
      "updatedAt": "2024-09-12T21:21:15Z",
      "closedAt": "2024-09-12T21:21:14Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Revisit this after PR #55 is merged (it should resolve Carl's comment, but should double-check).",
          "createdAt": "2024-08-24T18:29:37Z",
          "updatedAt": "2024-08-24T18:29:37Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOKRPFO86QlCWx",
      "title": "Add security consideration about reliance on X-Wing pre-image",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/42",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/Kxol5ZgDR777Y58XsLPHwvl6uY8/\r\n\r\n\r\nFrom Peter C:\r\n\r\n> Secondly, X-Wing fundamentally relies on ML-KEM remaining ciphertext second pre-image resistant.  This means that it cannot mitigate ML-KEM implementation vulnerabilities.  If decapsulation fails to perform the ciphertext check properly, for example, then it's trivial to find ML-KEM second pre-images and break the IND-CCA2 security of X-Wing.  This isn't an issue if your goal is only to mitigate algorithmic vulnerabilities, but you need to be explicit about that.  At the very least, you need to reconsider \"we also cannot immediately place complete trust in post-quantum replacements until they have undergone extensive scrutiny and real-world testing to uncover and rectify potential implementation flaws\" in the introduction.\r\n\r\n\r\nWe either need to add Security Consideration text to this effect, or strengthen the combiner. I believe that binding the ML-KEM CT and PK would solve this?",
      "createdAt": "2024-07-23T16:31:37Z",
      "updatedAt": "2024-09-28T17:01:31Z",
      "closedAt": "2024-09-28T17:01:31Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Comment from Britta Hale:\r\n\r\n> SHA3 does offer more properties...\r\n>Then, if all of the above holds, I would just suggest adding a remark that the draft is based on analyzed component choices, and should not be extrapolated to SHA2 or other constructions without analysis. (Basically, something to preempt someone making a draft in 5 yrs and saying \"but they did it, it must work generically!\").\r\n",
          "createdAt": "2024-07-26T22:21:04Z",
          "updatedAt": "2024-07-26T22:21:04Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- [ ] TODO: find a citation for SHA3 being equivalent to HKDF-SHA2 -- probably the X-Wing paper will do.\r\n\r\n- [ ] ping Brita, Peter C, and Falko to specifically review the added Sec-Cons text tagged against this issue.",
          "createdAt": "2024-08-24T18:30:37Z",
          "updatedAt": "2024-09-08T15:25:24Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "I_kwDOKRPFO86Qnc3R",
      "title": "Clarify the SHA3 OIDs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/43",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Mike Ounsworth: Yeah, it should be referencing id-sha3-256 and friends from here:\r\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-sha3-hash-04#name-message-digest-algorithms\r\n\r\nThat should be made clearer in the composite-KEM draft and actually reference them by OID.\r\nSpecifically, this is in the \"## Underlying Components\" section where the OIDs are needed for CMS.",
      "createdAt": "2024-07-23T23:10:05Z",
      "updatedAt": "2024-09-28T17:00:30Z",
      "closedAt": "2024-09-28T17:00:30Z",
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOKRPFO86Q5Eu3",
      "title": "Update the acknowledgements",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/44",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Add\r\n\r\n> The authors thank the following people for providing review of the cryptographic constructs\r\n\r\nPeter C, Sophie Schmieg, Deirdre Connolly, Douglas Stebila, Falko",
      "createdAt": "2024-07-25T19:55:01Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Make sure that Dan van Geest is also mentioned.",
          "createdAt": "2024-07-25T19:55:43Z",
          "updatedAt": "2024-07-25T19:55:43Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOKRPFO86Q5LX1",
      "title": "Can we remove the stupid counter?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/45",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "From Falko:\r\n\r\n> Actually it seems the counter can be omitted if there is only one hash function invocation in the KDF: see Quynh's comment here: [https://github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10#issuecomment-2220090284](https://urldefense.com/v3/__https:/github.com/openpgp-pqc/draft-ehlen-openpgp-nist-bp-comp/issues/10*issuecomment-2220090284__;Iw!!FJ-Y8qCqXTj2!eom3NkR-W2xoJGcKEtuusgLkqyA-uDOgHpv07v2OjzKuONz1STgLKCE-u6KLON2NO08W7OUuyGCGEM-Tbn2hnr-0fygp6Q$)",
      "createdAt": "2024-07-25T20:14:32Z",
      "updatedAt": "2024-08-28T14:34:29Z",
      "closedAt": "2024-08-28T14:34:29Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Make sure to update the FIPS Compliance section, especially to reference  the secondary NIST documents that make this ok. -- basically we want someone to be able to hand this section to their FIPS lab, and the argument is all laid out for them.\r\n\r\nFrom Quynh on the above openpgp thread:\r\n> The counter is allowed to be skipped when the hash function is executed only once as specified on page 159 here: https://csrc.nist.gov/csrc/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/FIPS%20140-3%20IG.pdf\r\n> When X is a pseudorandom key, not a raw shared secret,  KMAC-KDF in SP 800-108 (on page 11 here: https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-108r1-upd1.pdf ) is an approved KDF where the Key Derivation Key (K) is a concatenation of multiple pseudorandom keys as specified in Section 6.3 pages 21 & 22 here :  https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-133r2.pdf",
          "createdAt": "2024-07-26T21:37:35Z",
          "updatedAt": "2024-07-26T21:37:35Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOKRPFO86Q5YkH",
      "title": "Editorial comments from Piotr",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/46",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/\r\n\r\n2. Notes on the document \"Composite KEM\" version 4 (order of appearance)\r\na) Section 2.3.1\r\n> (\u2026) it produces a composite public key pk as per Section 3.2 and a composite\r\n>   secret key sk is per Section 3.3.\r\nit produces a composite public key pk as per Section 3.2 and a composite\r\nsecret key sk as per Section 3.3.\r\n\r\nb) Section 2.3.2\r\n> DHKEM.Encaps(pkR):\r\nRSA-OAEP.Encaps(pkR):\r\n\r\n> DHKEM.Decap(skR, enc):\r\nRSA-OAEP.Decap(skR, enc):\r\n\r\nc) Section 3.1\r\n> pk-MLKEM512-ECDH-P256 PUBLIC-KEY ::=\r\n>     pk-CompositeKEM {\r\n>       id-MLKEM512-ECDH-P256,\r\n>        OCTET STRING, ECPoint }\r\npk-MLKEM512-ECDH-P256 PUBLIC-KEY ::=\r\n     pk-CompositeKEM {\r\n       id-MLKEM512-ECDH-P256,\r\n       BIT STRING, ECPoint }\r\n\r\nd) Section 3.2\r\n> A composite key MUST contain two component public keys.  The order \r\n> of the component keys is determined by the definition of the corresponding\r\n> algorithm identifier as defined in section Section 5.\r\nA composite key MUST contain two component public keys as SEQUENCE of\r\ntwo bit strings.  The order of the component keys is determined by the\r\ndefinition of the corresponding algorithm identifier as defined in \r\nSection 5.\r\n\r\ne) Section 3.3\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n>\r\n>   Each element is a OneAsymmetricKey` [RFC5958] object for a component\r\n>   private key.\r\n>\r\n>   The parameters field MUST be absent.\r\n>\r\n>   The order of the component keys is the same as the order defined in\r\n>  Section 3.2 for the components of CompositeKEMPublicKey.\r\n>\r\n>   When a CompositePrivateKey is conveyed inside a OneAsymmetricKey\r\n>   structure (version 1 of which is also known as PrivateKeyInfo)\r\n>  [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n>  corresponding composite algorithm identifier defined according to\r\n>   Section 5, the privateKey field\r\n>   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n>   NOT be present. Associated public key material MAY be present in the\r\n>   CompositeKEMPrivateKey.\r\n\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\n   Each element is a OneAsymmetricKey` [RFC5958] object for a component\r\n   private key (privateKey field).\r\n\r\n   The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.\r\n\r\n   When a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\nf) Section 4.2\r\n> 4.2.  CompositeCiphertextValue\r\n>\r\n>   The compositeCipherTextValue is a concatenation of the\r\n>   ciphertexts of the underlying component algorithms.  It is represented\r\n>   in ASN.1 as follows:\r\n\r\n4.2.  CompositeCipherTextValue\r\n\r\n   The compositeCipherTextValue is a sequence of the\r\n   ciphertexts of the underlying component algorithms.  It is represented\r\n   in ASN.1 as follows:\r\n\r\ng) Section 4.3\r\n> KEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n>      KDF(counter || tradSS || mlkemSS || tradCT || tradPK ||\r\n>          domSep, outputBits)\r\n>\r\n>                Figure 1: Generic KEM combiner construction\r\n>\r\n>   where:\r\n>\r\n>   *  KDF(message, outputBits) represents a hash function suitable to\r\n>      the chosen KEMs according to {tab-kem-combiners}.\r\n>\r\n>   *  counter SHALL be the fixed 32-bit value 0x00000001 which is placed\r\n>      here solely for the purposes of compliance with [SP.800-56Cr2].\r\n>\r\n>   *  tradSS is the shared secret from the traditional component\r\n>      (elliptic curve or RSA).\r\n>\r\n>   *  mlkemSS is the shared secret from the ML-KEM componont.\r\n>\r\n>   *  tradCT is the ciphertext from the traditional component (elliptic\r\n>      curve or RSA).\r\n>\r\n>   *  tradPK is the public key of the traditional component (elliptic\r\n>      curve or RSA).\r\n>   *  domSep SHALL be the DER encoded value of the object identifier of\r\n>      the composite KEM algorithm as listed in Section 5.1.\r\n>\r\n>   *  || represents concatenation.\r\n> \r\n> Each registered composite KEM algorithm must specify the choice of\r\n>   KDF, demSep, and outputBits to be used.\r\nKEK <- Combiner(tradSS, mlkemSS, tradCT, tradPK, domSep) =\r\n\r\n   SHA3(counter || tradSS || mlkemSS || tradCT || tradPK || domSep)\r\n         ([SP.800-56Cr2] Section 4.1 Option 1 (when KDF is SHA3))\r\n\r\n                Figure 1: Generic KEM combiner construction\r\n\r\n   where:\r\n\r\n   *  counter SHALL be the fixed 32-bit value 0x00000001 which is placed\r\n      here solely for the purposes of compliance with [SP.800-56Cr2].\r\n\r\n   *  tradSS is the shared secret from the traditional component (ECDH or RSA).\r\n\r\n   *  mlkemSS is the shared secret from the ML-KEM component.\r\n\r\n   *  tradCT is the ciphertext from the traditional component (ECDH or RSA).\r\n      Note: In the case of ECDH, this is the sender's ephemeral public key.\r\n\r\n   *  tradPK is the recipient's public key of the traditional component (ECDH or RSA).\r\n\r\n   *  domSep SHALL be the DER encoded value of the object identifier of\r\n      the composite KEM algorithm as listed in Section 5.1.\r\n\r\n   *  || represents concatenation.\r\n\r\n   Each registered composite KEM algorithm (see {tab-kem-combiners}) must\r\n   specify the choice of KDF (ie. type of SHA3 function) and domSep\r\n   to be used.\r\nComment:\r\n1. The use of the counter parameter is probably redundant - see Falko Strenzke email from 2024/07/24\r\n2. Removing outputBits is related to replacing KMAC with SHA3.\r\n\r\nh) Section 4.4\r\n> This construction is specifically designed to conform with\r\n>   Section 4.1 Option 1 (when KDF is SHA3) or Option 3 (when KDF is\r\n>   KMAC) in the following way:\r\n>\r\n>   In both cases we match exactly the construction using the allowed\r\n>   \"hybrid\" shared secret of the form Z' = Z || T to yield the\r\n>   construction\r\nThis construction is specifically designed to conform with [SP.800-\r\n56Cr2] Section 4.1 Option 1 (when KDF is SHA3). In any cases we match exactly the\r\nconstruction using the allowed \"hybrid\" shared secret of the form\r\n   Z' = Z || T (see Section 2 of the [SP.800-56Cr2]) to yield the construction:\r\n\r\n(\u2026)\r\nThe last sentence starting with: \u201cIn the case that KDF is KMAC,\u2026\u201d\r\nshould be removed.\r\n\r\n------\r\nPiotr Popis\r\n",
      "createdAt": "2024-07-25T20:54:30Z",
      "updatedAt": "2024-09-27T08:20:19Z",
      "closedAt": "2024-09-26T21:11:00Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More editorial feedback here:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/",
          "createdAt": "2024-07-31T23:07:55Z",
          "updatedAt": "2024-07-31T23:07:55Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Piotr,\r\n\r\nThank you so much for this detailed review. I have incorporated most of your feedback in <commit>.\r\n\r\nThe one that I didn't understand is your comment \"e) Section 3.3\". You are suggesting changing \r\n\r\nOLD\r\n\"\"\"\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key.\r\n\"\"\"\r\n\r\nNEW\r\n\"\"\"\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key (privateKey field).\r\n\"\"\"\r\n\r\nI suppose that basically means SEQUENCE OF OCTET STRING{ DER{ OneAsymmetricKey } }\r\n\r\nCan you explain the advantage of this vs just encoding the OneAsymetricKey directly? Or have I misunderstood your suggestion?\r\n\r\n\r\n\r\nYou made a suggestion that the \"Use in CMS\" section should specify a mandatory-to-implement subset of the larger table of composite algorithms:\r\n\r\n\"\"\"\r\n6.1.  Underlying Components\r\n\r\nA CMS implementation that supports a composite KEM algorithm MUST\r\n\r\nsupport at least the following underlying components:\r\n\r\nid-MLKEM512-ECDH-P256\r\n\r\nid-MLKEM512-RSA (RSA 2048 and RSA 3072)\r\n\r\nid-MLKEM1024-ECDH-P521\r\n\"\"\"\r\n\r\nUnless the WG feels strongly, I am going to leave out any concept of \"mandatory-to-implement\" from this draft. X.509 and CMS are used in such broad and diverse applications and jurisdictions that I don't think we are in a position to make policy recommendations.\r\n",
          "createdAt": "2024-09-12T22:22:12Z",
          "updatedAt": "2024-09-12T22:22:12Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Section 3.3\r\nIn your proposal there is:\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n\r\nAccording to RFC 5958:\r\nOneAsymmetricKey ::= SEQUENCE {\r\nversion                      Version,\r\nprivateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\nprivateKey                PrivateKey,\r\nattributes [0]  Attributes OPTIONAL,\r\n...,\r\n[[2: publicKey [1] PublicKey OPTIONAL ]],\r\n...\r\n}\r\nPrivateKey ::= OCTET STRING\r\n\r\nI believe that to specify a pair of composite private keys, a single sequence of OneAsymmetricKey is sufficient, in which the privateKey field will be a sequence of two OCTET STRING, each of which contains the private key of the appropriate algorithm (order by OID). Ie.:\r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\nPrivateKey ::= CompositeKEMPrivateKey  \r\n\r\nOne OneAsymmetricKey sequence (instead of two) allows the use of a composite OID pointer to the algorithm identifier (it is not clear to me whether in your proposal of two OneAsymmetricKey sequences there would be a repeated composite OID as stated the text into Section 3,3?; or rather separate OIDs pointing to individual algorithms?).\r\n\r\nFurthermore, there is an incomprehensible note in your proposal:\r\nWhen a Composite(KEM?)PrivateKey is conveyed inside a OneAsymmetricKey structure (...)\r\nthe privateKey field SHALL contain the CompositeKEMPrivateKey...\r\nConsidering that \r\nCompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\nthis means that \r\nPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey,\r\nand yet the privateKey field is inside the OneAsymmetricKey sequence.\r\n\r\nAfter my corrections the relevant text is rather understandable:\r\nWhen a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\n\r\n",
          "createdAt": "2024-09-13T09:59:38Z",
          "updatedAt": "2024-09-13T09:59:38Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @PiotrPopis \r\n\r\nYou propose:\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\ninstead of\r\n> CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\nThis point is covered by #59, and is currently being discussed on the LAMPS mailing list. Let's see how that discussion plays out.\r\n\r\n\r\n> One OneAsymmetricKey sequence (instead of two) allows the use of a composite OID pointer to the algorithm identifier (it is not clear to me whether in your proposal of two OneAsymmetricKey sequences there would be a repeated composite OID as stated the text into Section 3,3?; or rather separate OIDs pointing to individual algorithms?)\r\n\r\nGood point! The text does not state which AlgorithmIDs should be placed in the component OneAsymmetricKeys. Thanks for pointing this out. I don't have an opinion yet, but I'll add it to the list to think about. I have added #72 and https://github.com/lamps-wg/draft-composite-sigs/issues/55 to track this.\r\n\r\n\r\n\r\n> Furthermore, there is an incomprehensible note in your proposal:\r\n\r\nSounds like you comprehended it just fine :)\r\n\r\nThe intention is exactly what you figured out: we are putting `PrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey` inside another OneAsymmetricKey. This is the topic being discussed in #59 ",
          "createdAt": "2024-09-26T21:08:39Z",
          "updatedAt": "2024-09-26T21:08:39Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that everything has either been addressed, or has other issues open, so I am closing this issue. @PiotrPopis please let me know if I missed anything.",
          "createdAt": "2024-09-26T21:11:00Z",
          "updatedAt": "2024-09-26T21:11:00Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "1. Editorial comments - OK.\r\n2. Considering Section 3.3 I would like to make a small change: \r\nOLD (draft):\r\nEach element is a OneAsymmetricKey` [RFC5958] object for a component\r\nprivate key.\r\nNEW:\r\nEach element is a OCTED STRING for a component\r\nprivate key placed in the privateKey field of the OneAsymmetricKey [RFC5958].\r\n\r\nComment:\r\nI stand by my earlier arguments for changing the two OneAsymmetricKey sequences for private keys to a single OneAsymmetricKey sequence and a privateKey field containing the two private keys in a two-element sequence.\r\n\r\nI also note that there is agreement for public keys to be stored in a two-element sequence:\r\nCompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n\r\n[draft] (as well as RFC 5958) allows for the optional placement of the public key in the OneAsymmetricKey. In the case of two OneAsymmetricKey structures, both would contain two public keys (two-element sequence), which is a bad solution. My proposal is free from this problem - one OneAsymmetricKey structure with a privateKey field containing two private keys, an optional publicKey field containing two public keys, and one privateKeyAlgorithm field containing an OID pointing to the composite pair and indicating the order.\r\n",
          "createdAt": "2024-09-27T08:20:18Z",
          "updatedAt": "2024-09-27T08:20:18Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOKRPFO86Q5ZAy",
      "title": "Reducing the algorithm list",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/47",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/khasPf3y0_-Lq_0NtJe92unUw6o/\r\n\r\nSophie suggests removing ML-KEM512 and possibly the ML-KEM1024 combinations.\r\n\r\nPiotr proposes a full updated table with a reduced list.",
      "createdAt": "2024-07-25T20:55:51Z",
      "updatedAt": "2024-09-28T17:01:13Z",
      "closedAt": "2024-09-28T17:01:13Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The other consideration here is aligning with OpenPGP, and particularly the combinations suggested by Quynh Dang in his OpenPGP slides.\r\n\r\nhttps://datatracker.ietf.org/meeting/120/materials/slides-120-openpgp-pqc-with-nist-and-brainpool-curves",
          "createdAt": "2024-07-25T20:59:06Z",
          "updatedAt": "2024-07-25T20:59:06Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More comment from Sophie:\r\n\r\n> For compliance, the most important considerations are on the classic side of the hybrid, with the only PQC compliance requirements going beyond the security analysis above being CNSA's wish for ML-KEM1024. But CNSA2 also prefers non-hybrid solutions, so I'm not sure whether we should hybridize with ML-KEM1024 at all. For ML-KEM512, there currently seems to be no compliance forcing its adoption over ML-KEM768, with only some performance considerations having slight preferences, but in my opinion the security considerations weigh heavier here, and we should find other ways to alleviate the performance issues.",
          "createdAt": "2024-07-29T14:37:12Z",
          "updatedAt": "2024-07-29T14:37:12Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You can remove any ML-KEM512/brainpool combinations: https://mailarchive.ietf.org/arch/msg/spasm/hgqa5pfwrg6-I5BTA4mjw3vMs1Y/\r\n\r\nANSSI/BSI are the brainpool proponents, however they only allow ML-KEM768/1024.",
          "createdAt": "2024-08-02T08:20:54Z",
          "updatedAt": "2024-08-02T08:20:54Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has been merged.",
          "createdAt": "2024-09-28T17:01:13Z",
          "updatedAt": "2024-09-28T17:01:13Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "I_kwDOKRPFO86RBFo0",
      "title": "Don't name-collide \"DHKEM\" with 9180",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/48",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "wontfix"
      ],
      "body": "Call it something else?\r\nNot sure what.\r\nThis with Peter Campbell's comment in LAMPS 120 chat.\r\n\r\nSophie suggested ECIES -- but I don't think that's quite right either since we are not doing the symmetric encryption + MAC step.\r\n\r\nPersonally, I think we should leave it as \"DHKEM\" -- I don't think 9180 should have a monopoly on this term.",
      "createdAt": "2024-07-26T21:10:03Z",
      "updatedAt": "2024-10-21T19:49:07Z",
      "closedAt": "2024-10-21T19:49:07Z",
      "comments": []
    },
    {
      "number": 49,
      "id": "I_kwDOKRPFO86RBNxj",
      "title": "Are we sufficiently clear about what encoding of the public key to feed into the KDF?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/49",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "I assume it should be the raw bits from the SPKI, and not hash in any ASN.1 wrapping. This will make it the most binary-compatible with OpenPGP and others.",
      "createdAt": "2024-07-26T21:41:14Z",
      "updatedAt": "2024-09-28T17:00:31Z",
      "closedAt": "2024-09-28T17:00:31Z",
      "comments": []
    },
    {
      "number": 50,
      "id": "I_kwDOKRPFO86Rcyi6",
      "title": "Add text in private key section that requires the public key ",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/50",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "If we require binding of the public key for RSA/EC then we need to update the private key section to indicate the public key is needed (or a copy of it needs to be kept somewhere).\r\n",
      "createdAt": "2024-07-31T14:45:10Z",
      "updatedAt": "2024-09-28T17:00:30Z",
      "closedAt": "2024-09-28T17:00:30Z",
      "comments": []
    },
    {
      "number": 51,
      "id": "I_kwDOKRPFO86Rdc9A",
      "title": "SHA2 and SHA3 combinations",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/51",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "The authors suggest, rather than 2x'ing the whole list, we do the following:\r\n\r\nAll RSA combinations use HKDF-SHA2.\r\nEach of the P256 and brainpoolP256 combinations are offered with both SHA3 (to align with X-Wing), and HKDF-SHA2. The new list would then be:\r\n\r\n```\r\n| Composite KEM                     | KDF       |\r\n|---------                          | --------  |\r\n| id-MLKEM512-ECDH-P256             | SHA3-256  |\r\n| id-MLKEM512-ECDH-P256             | HKDF-SHA2 |\r\n| id-MLKEM512-ECDH-brainpoolP256r1  | SHA3-256  |\r\n| id-MLKEM512-ECDH-brainpoolP256r1  | HKDF-SHA2 |\r\n| id-MLKEM512-X25519                | SHA3-256  |\r\n| id-MLKEM512-RSA2048               | HKDF-SHA2 |\r\n| id-MLKEM512-RSA3072               | HKDF-SHA2 |\r\n| id-MLKEM512-RSA4096\u2003\u2003\u2003\u2003        | HKDF-SHA2 |\r\n| id-MLKEM768-ECDH-P256             | SHA3-384  |\r\n| id-MLKEM768-ECDH-P256             | HKDF-SHA2 |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | SHA3-384  |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | HKDF-SHA2 |\r\n| id-MLKEM768-X25519                | SHA3-384  |\r\n| id-MLKEM1024-ECDH-P384            | SHA3-512  |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | SHA3-512  |\r\n| id-MLKEM1024-X448                 | SHA3-512  |\r\n{: #tab-kem-algs title=\"Composite KEM key types\"}\r\n```",
      "createdAt": "2024-07-31T16:09:54Z",
      "updatedAt": "2024-08-29T20:39:44Z",
      "closedAt": "2024-08-29T20:39:44Z",
      "comments": []
    },
    {
      "number": 52,
      "id": "I_kwDOKRPFO86Rf-xg",
      "title": "Re-assign all OIDs and update domain separators",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/52",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T22:54:23Z",
      "updatedAt": "2024-09-06T21:02:12Z",
      "closedAt": "2024-09-06T21:02:12Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "I assigned the OID internally for prototype testing:\r\n\r\n2.16.840.1.114027.80.5.2.21   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA2048 060B6086480186FA6B50050215\r\n2.16.840.1.114027.80.5.2.22   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA3072 060B6086480186FA6B50050216\r\n2.16.840.1.114027.80.5.2.23   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA4096 060B6086480186FA6B50050217\r\n2.16.840.1.114027.80.5.2.24   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-X25519  060B6086480186FA6B50050218\r\n2.16.840.1.114027.80.5.2.25   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P384             060B6086480186FA6B50050219\r\n2.16.840.1.114027.80.5.2.26   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-brainpoolP256r1  060B6086480186FA6B5005021A\r\n2.16.840.1.114027.80.5.2.27   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-P384            060B6086480186FA6B5005021B\r\n2.16.840.1.114027.80.5.2.28   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-brainpoolP384r1 060B6086480186FA6B5005021C\r\n2.16.840.1.114027.80.5.2.29   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-X448                 060B6086480186FA6B5005021D",
          "createdAt": "2024-08-29T20:51:58Z",
          "updatedAt": "2024-08-29T20:51:58Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOKRPFO86RpPjG",
      "title": "Should we have a security proof for the ML-KEM+RSA-OAEP composite KEM?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/54",
      "state": "OPEN",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "For a security proof of the ML-KEM + ECDH combos, we can point to the X-Wing paper. We should have a similar proof for the RSA-OAEP combos. Not sure how to go about attracting someone to help with this, or if we should attempt proof-writing ourselves.",
      "createdAt": "2024-08-01T21:31:58Z",
      "updatedAt": "2025-08-28T14:48:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What we need is some justification of the statement _\"A composite of ML-KEM and RSA-OAEP is IND-CCA so long as either component is.\"_ That breaks down into two cases:\n\nA) _\"A composite of ML-KEM and RSA-OAEP is IND-CCA as long as RSA-OAEP is\"_: **We need some sentence about how the RSA component is bound to the composite. I'm sure this is a single sentence, but I don't know what it is**. Next, we claim that RSA-OAEP is IND-CCA, which is proved in [1]\n\nB) _\"A composite of ML-KEM and RSA-OAEP is IND-CCA as long as ML-KEM is\"_: Here, I think we get to just point at the X-Wing paper. To my reading, it's proof that the QSF framework is allowed to omit the ML-KEM public key and ciphertext from the combiner hinges only on ML-KEM being ciphertext second pre-image resistant, which FO transform based KEM is. To my reading, this should hold for any choice of the second KEM, even a horribly insecure one (which is what we want for a composite).\n\n\nI am not at all confident about this, and would love for someone with some more academic background to review and help draft Security Considerations text.\n\n\n[1]: Barthe, G., Gr\u00e9goire, B., Lakhnech, Y., Zanella B\u00e9guelin, S. (2011). Beyond Provable Security Verifiable IND-CCA Security of OAEP. In: Kiayias, A. (eds) Topics in Cryptology \u2013 CT-RSA 2011. CT-RSA 2011. Lecture Notes in Computer Science, vol 6558. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-19074-2_13",
          "createdAt": "2025-01-31T01:41:59Z",
          "updatedAt": "2025-01-31T01:50:33Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I found this:\n> The original 1994 paper of Bellare and Rogaway [9] proves that, under the hypothesis that the underlying trapdoor permutation family is one-way, OAEP is semantically secure\nunder chosen-ciphertext attacks. \n\n\nAlso this paper\nhttps://link.springer.com/chapter/10.1007/978-3-642-19074-2_13\n\ncontains:\n\n> Theorem 1 (IND-CCA security of OAEP)\n\nbut it's behind a paywall. Is it cheating to cite it anyway?",
          "createdAt": "2025-01-31T01:48:35Z",
          "updatedAt": "2025-01-31T01:48:35Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maybe I have enough to cobble this paragraph together. Here's an attempt (borrowed heavily from the security consideration of the X-Wing I-D)\n\n> Informally, a Composite ML-KEM algorithm is secure if the combiner (HKDF-SHA2 or SHA3) is secure, and either ML-KEM-768 is secure or the traditional component (RSA-OAEP, ECDH, or X25519) is secure.\n>\n> More precisely, if HKDF-SHA256, HKDF-SHA384, and SHA3-256, may be modelled as a random oracle under multiple concatenated inputs, then the IND-CCA security of X-Wing is bounded by the IND-CCA security of ML-KEM-768, and the IND-CCA security of RSA-OAEP. ML-KEM is known to be IND-CCA secure [FIPS.203] and RSA-OAEP is known to be IND-CCA secure, see [1].\n>\n> The overall security of the composite inherits the IND-CCA property of RSA-OAEP trivially since the composite combiner binds the RSA-OAEP public key and ciphertext meaning that even if RSA-OAEP is not ciphertext second preimage resistant, any alternate publickey-ciphertext pairs will result in a different output shared secret key. The composite inherits the IND-CCA property of ML-KEM due to the specifics of the Fujisaki-Okamoto transformation used in ML-KEM as proved in [X-Wing]: the Composite combiner cannot be assumed to be secure when used with different KEMs. In particular it is not known to be safe to leave out the post-quantum ciphertext from the combiner in the general case.\n>\n> [1]: Barthe, G., Gr\u00e9goire, B., Lakhnech, Y., Zanella B\u00e9guelin, S. (2011). Beyond Provable Security Verifiable IND-CCA Security of OAEP. In: Kiayias, A. (eds) Topics in Cryptology \u2013 CT-RSA 2011. CT-RSA 2011. Lecture Notes in Computer Science, vol 6558. Springer, Berlin, Heidelberg. https://doi.org/10.1007/978-3-642-19074-2_13",
          "createdAt": "2025-01-31T02:03:13Z",
          "updatedAt": "2025-01-31T02:03:29Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "NONE",
          "body": "> I found this:\n> \n> > The original 1994 paper of Bellare and Rogaway [9] proves that, under the hypothesis that the underlying trapdoor permutation family is one-way, OAEP is semantically secure\n> > under chosen-ciphertext attacks.\n> \n> Also this paper https://link.springer.com/chapter/10.1007/978-3-642-19074-2_13\n> \n> contains:\n> \n> > Theorem 1 (IND-CCA security of OAEP)\n> \n> but it's behind a paywall. Is it cheating to cite it anyway?\n\nI think the paper you are looking for is available here: https://software.imdea.org/~szanella/Zanella.2011.RSA.pdf",
          "createdAt": "2025-02-01T05:33:19Z",
          "updatedAt": "2025-02-01T05:33:19Z"
        },
        {
          "author": "fluppe2",
          "authorAssociation": "NONE",
          "body": "With ML-KEM + RSA-OAEP you leave the QSF Framework described in the X-Wing paper (https://eprint.iacr.org/2024/039), which in its building blocks uses a nominal group (an abstraction of an elliptic curve) and another KEM (ultimately intended to deliver quantum safety but does not harm pre-quantum safety even if it gets broken). The pre-quantum security is therefore reduced to a Diffie-Hellman intractability notion and C2PRI for the KEM.\n\nI think, it is not relevant if RSA-OAEP is C2PRI for your ML-KEM + RSA-OAEP composites, as this is not the security property that RSA-OAEP is asked to deliver in this construction. It is rather that one has to argue that the IND-CCA2-security of the ML-KEM + RSA-OAEP composites (where the RSA-OAEP ciphertext is fed to the combiner) reduce to the IND-CCA2-security of RSA-OAEP and C2PRI of ML-KEM. I guess in that light you are getting closer to a construction given in the paper \"KEM Combiners\" (https://eprint.iacr.org/2018/024), i.e. one might rather argue along their arguments that one can drop the ciphertext of a C2PRI KEM.",
          "createdAt": "2025-02-01T06:36:32Z",
          "updatedAt": "2025-02-01T06:36:32Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Douglas points out that the rsaSS is completely variable-length (chosen by the sender), and the rsaCT and rsaPK may be variable length.\n\nWe could add length tag into the combiner input, or maybe more simply is add a step to the Decaps() routine to check the lengths since the decryptor knows what the lengths of all these things should be.",
          "createdAt": "2025-02-04T02:18:36Z",
          "updatedAt": "2025-02-04T02:18:36Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @fluppe2 !\n\n> I think, it is not relevant if RSA-OAEP is C2PRI for your ML-KEM + RSA-OAEP composites, as this is not the security property that RSA-OAEP is asked to deliver in this construction. ... i.e. one might rather argue along their arguments that one can drop the ciphertext of a C2PRI KEM.\n\nYes. This is also my understanding. I guess I did not do a good job of writing it clearly. Thanks for the extra references. I have also asked a few other people to look at this. I'm will do another round of edits.",
          "createdAt": "2025-02-04T02:20:44Z",
          "updatedAt": "2025-02-04T02:20:44Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am re-opening this issue due to discussion on the LAMPS list about strengthening the current Security Consideration into something resembling a proper proof.\n\nhttps://mailarchive.ietf.org/arch/msg/spasm/n3JExEG42jUGCImvoTaUpPNCBsQ/",
          "createdAt": "2025-08-12T20:31:14Z",
          "updatedAt": "2025-08-12T20:31:14Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sophie suggests this as a starting point for a proof:\n\n> yeah, this definitely requires a proof, especially since you are using a\nnon-standard construction to turn OAEP into a KEM (you could use the FO\ntransform, but it would be overkill). The first step is proofing that an\nIND-CCA PKE can be turned into a KEM by encrypting a randomly chosen byte\nstring, which should be a straight-forward reduction: Assume an attacker A\non the KEM exists, construct an attacker A' on the PKE by forwarding any\ndecaps queries A makes to the decrypt oracle (neither are allowed to query\nthe challenge ciphertext). Give A the two plaintexts as challenge, when A\nguesses one of the plaintexts as the shared secret, guess that plaintext as\nwell. This makes A' an attacker on the PKE and therefore reduce the IND-CCA\nsecurity of the KEM to the IND-CCA security of the PKE (no ROM model\nneeded, as we are already assuming the PKE to be IND-CCA).\n>From there you just need to prove the IND-CCAness of the combiner, which\nyou should be able to find somewhere in the literature for two IND-CCA KEMs.",
          "createdAt": "2025-08-12T20:31:42Z",
          "updatedAt": "2025-08-12T20:31:42Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "I_kwDOKRPFO86S31jH",
      "title": "Update draft to support official ML-KEM Standard",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/58",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The final standard was released today.  We need to update the draft to reference the official ML-KEM standard\r\nhttps://csrc.nist.gov/pubs/fips/203/ipd\r\n",
      "createdAt": "2024-08-13T19:54:12Z",
      "updatedAt": "2024-08-29T19:39:10Z",
      "closedAt": "2024-08-29T19:39:10Z",
      "comments": []
    },
    {
      "number": 59,
      "id": "I_kwDOKRPFO86S_CbX",
      "title": "Public key and private key compression",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/59",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "See: https://github.com/lamps-wg/draft-composite-sigs/issues/6\r\n\r\nThe work here is just to copy over the fix from Sigs.",
      "createdAt": "2024-08-14T14:22:21Z",
      "updatedAt": "2024-10-20T01:33:26Z",
      "closedAt": "2024-10-20T01:33:26Z",
      "comments": []
    },
    {
      "number": 60,
      "id": "I_kwDOKRPFO86S_LVT",
      "title": "List security strength of each composite",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/60",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See:\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/29",
      "createdAt": "2024-08-14T14:35:22Z",
      "updatedAt": "2024-10-17T19:54:36Z",
      "closedAt": "2024-10-17T19:54:36Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "It is hard to quantify the overall strength at any given point it time, because it changes based on cryptanalysis. Therefore, we don't think this table would add value. We have added a strong security considerations section that talks about the strength of the algorithms in terms of their underlying notions.",
          "createdAt": "2024-10-17T19:54:36Z",
          "updatedAt": "2024-10-17T19:54:36Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOKRPFO86TA-ma",
      "title": "List overall strength estimates for each composite",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/61",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See: https://mailarchive.ietf.org/arch/msg/spasm/s0wPyhHpaxKsSKMwLBypagm4iL0/",
      "createdAt": "2024-08-14T18:10:08Z",
      "updatedAt": "2024-08-26T19:56:53Z",
      "closedAt": "2024-08-26T19:56:52Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #60 ",
          "createdAt": "2024-08-26T19:56:52Z",
          "updatedAt": "2024-08-26T19:56:52Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOKRPFO86TQ4or",
      "title": "Digicert feedback",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/62",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/ReWx7kichMke-HuTHjCih3iZpD0/\r\n\r\nDigiCert's CA engineering team has some comments on the open issues related\r\nto the composite-sigs draft. We're going to put them in one email just\r\nbecause we have comments on quite a few of them.\r\n\r\nISSUE #1\r\n(Github issue:  https://github.com/lamps-wg/draft-composite-sigs/issues/9)\r\n\r\nASN.1 wrapping confuses people. This came up in the hash-based signatures\r\nupdates last call. Nobody knows what ASN.1 is, or what the consequences\r\nof omiting it are (to be clear, there are really none).\r\n\r\nWe agree that this is largely a question of people being unfamiliar with\r\nASN.1, and that explanatory text is sufficient. All that is needed is a\r\nclear explanation of example what the BIT STRING is, and explaining that\r\nit's simply the bits of the key itself seems pretty straightforward.\r\n\r\nOne can then say something similar to: \r\n\r\n\"In some situations and protocols, the key might be wrapped in ASN.1 or \r\nmay have some other additional decoration or encoding. If so, such wrapping \r\nMUST be removed prior to encoding the key itself as a BIT STRING.\"\r\n\r\nHopefully that makes things crystal clear.\r\n\r\nISSUE #2\r\n(Github Issue: https://github.com/lamps-wg/draft-composite-sigs/issues/19)\r\n\r\nWe don't think it's worth the extra complexity and expense of an additional\r\nhash operation just to achieve a fixed size output. The variation in size\r\nis already pretty small.\r\n\r\nISSUE #3\r\n(Github issue: https://github.com/lamps-wg/draft-composite-sigs/issues/6)\r\n\r\nAgain, we don't believe the additional complexity is worth it for a pretty\r\ntrivial improvement in the private key size. But it's not a strong opinion,\r\nwe could go either way.\r\n\r\nOpen Issues affect both Composite Signatures and Composite KEM:\r\nISSUE #4\r\n\r\nChair hat off, I and the CA team are concerned about the slow progress of \r\nthe composite signature work. In particular, tying it to the Composite KEM\r\ndraft and waiting for the CFRG work on KEM Combiners seems like an\r\nabsolutely horrible idea to us. We would like to see Composite Signatures\r\nprogress ASAP.\r\n\r\nISSUE #5\r\n(Github issues:\r\nhttps://github.com/lamps-wg/draft-composite-kem/issues/37\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/24\r\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/23)\r\n\r\nThis is a fun one, and we've spent quite a bit of time discussing it\r\ninternally.\r\n\r\nIn particular, we're still debating the question about exactly how many\r\nbackwards compatibility options are really necessary. For example, given\r\nthat you already need to add lattice, is it really necessary to allow\r\nPKCS15 to continue to exist? For RSA, there's the reasonable argument that\r\nthat might be all you have in your validated hardware/software, but if you\r\nhave RSA as a primitive, can't you do PSS instead of PKCS15? Remember, you\r\nalready have to make changes on both the signing and verify side anyway.\r\n\r\nWe're trending in the direction of thinking that the primary decision is\r\nthe security level and post-quantum algorithm, and the classical side is\r\njust determined by what \"makes sense\" for that security level and algorithm.\r\n\r\nSo what you really want is something like \"id-SL1-MLKEM-RSA\" where the\r\ndocument specifies exactly what \"RSA\" means in the context of a SL1 MLKEM512\r\ncomposite, e.g. RSA4096-PSS-SHA512. This basically means striving for\r\nat most one combination for each triple of (security level, PQC flavor, classical \r\nflavor) and eliminating unnecessary complexity and diversity of options in what \r\nis essentially a redundancy/backup mechanism.\r\n\r\nThe basic idea is to more aggressively standardize the backwards \r\ncompatibility options to only what's actually necessary, instead of\r\ntrying to be backwards compatible with the universe of current behavior,\r\nwhich both unnecessarily complicates things, and preserves some practices\r\n(e.g. PKCS15) longer than is perhaps prudent.\r\n\r\n-Tim\r\n",
      "createdAt": "2024-08-16T17:29:56Z",
      "updatedAt": "2024-10-19T22:51:36Z",
      "closedAt": "2024-10-19T22:51:35Z",
      "comments": []
    },
    {
      "number": 63,
      "id": "I_kwDOKRPFO86UGsob",
      "title": "Update the Sec Con about alg choice criteria once the on-list discussion settles",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/63",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "",
      "createdAt": "2024-08-24T18:29:20Z",
      "updatedAt": "2024-09-28T17:00:32Z",
      "closedAt": "2024-09-28T17:00:32Z",
      "comments": []
    },
    {
      "number": 64,
      "id": "I_kwDOKRPFO86UjRPn",
      "title": "Align with SP 800-227",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/64",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [ ] Align the combiner.\r\n- [ ] Fix \"## FIPS Compliance {#sec-fips-compliance}\" to match.",
      "createdAt": "2024-08-28T14:34:52Z",
      "updatedAt": "2025-01-30T20:03:27Z",
      "closedAt": "2025-01-30T20:03:27Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting with NIST happened on October 17th 2024.  We did not find out any new details of content, it is still an open issue.",
          "createdAt": "2024-10-17T19:55:35Z",
          "updatedAt": "2024-10-17T19:55:35Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An initial public draft of SP 800-227 has been published:\n\nhttps://csrc.nist.gov/pubs/sp/800/227/ipd\n\nUpdating the I-D to match.",
          "createdAt": "2025-01-26T02:37:41Z",
          "updatedAt": "2025-01-26T02:37:41Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "I_kwDOKRPFO86Vrjy6",
      "title": "Align CMS KDF choice to Dan vG's cms-kyber draft",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/65",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The current CMS KEMRI Conventions:\r\n\r\n| Composite KEM OID                 | KDF         | Key Encryption Alg |\r\n|---------                          | ---         | ---                |\r\n| id-MLKEM768-RSA2048               | SHA3-256 | id-aes128-Wrap     |\r\n| id-MLKEM768-RSA3072               | SHA3-256 | id-aes128-Wrap     |\r\n| id-MLKEM768-ECDH-P384             | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM768-X25519                | SHA3-384 | id-aes256-Wrap     |\r\n| id-MLKEM1024-ECDH-P384            | SHA3-512 | id-aes256-Wrap     |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | SHA3-512 | id-aes256-Wrap     |\r\n| id-MLKEM1024-X448                 | SHA3-512 | id-aes256-Wrap     |\r\n{: #tab-cms-kdf-wrap title=\"REQUIRED pairings for CMS KDF and WRAP\"}\r\n\r\n\r\nWhich does not currently align with the KDFs used internally within the Composite KEM Combiner, and in fact here it needs to be a proper variable-length KDF since KEMRI has an `L' parameter, so this needs to be fixed. I guess it makes sense for me to align to whatever Dan picks in draft-cms-kyber.\r\n",
      "createdAt": "2024-09-06T21:35:29Z",
      "updatedAt": "2024-10-19T22:44:47Z",
      "closedAt": "2024-10-19T22:44:47Z",
      "comments": []
    },
    {
      "number": 67,
      "id": "I_kwDOKRPFO86WZ6M2",
      "title": "specify behaviour in light of KEMs with a non-zero failure probability?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/67",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> TODO: as per https://www.enisa.europa.eu/publications/post-quantum-cryptography-integration-study section 4.2, might need to specify behaviour in light of KEMs with a non-zero failure probability.",
      "createdAt": "2024-09-12T21:17:54Z",
      "updatedAt": "2024-10-17T19:50:26Z",
      "closedAt": "2024-10-17T19:50:26Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We probably need to at least mention that decapsulation failure is a possible result of calling CompositeML-KEM.decaps(). Borrow language from, or reference, `draft-ietf-lamps-cms-kyber` ?",
          "createdAt": "2024-10-11T08:20:20Z",
          "updatedAt": "2024-10-11T08:20:20Z"
        }
      ]
    },
    {
      "number": 68,
      "id": "I_kwDOKRPFO86WfqqZ",
      "title": "Max suggests dropping SEQUENCE OF wrapper",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/68",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hi Max,\r\n\r\nIf I understand your proposal, you are suggesting that\r\n\r\nCompositeSignaturePublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\nCompositeSignatureValue ::= SEQUENCE SIZE (2) OF BIT STRING\r\n\r\n\r\nBecomes\r\n\r\nCompositeSignaturePublicKey ::= BIT STRING\r\nCompositeSignatureValue ::= BIT STRING\r\n\r\nAn then you need to specify that for id-MLDSA44-RSA2048-PSS-SHA256 the first X bits are the ML-DSA-44 public key / signature, and the remaining Y bits are the RSA-2048.\r\n\r\n\r\nThe original reason for an ASN.1 wrapper was to gracefully handle algorithms with variable-length publickeys, signatures, or ciphertexts, which I believe there were some of in NIST Round 1. This is no longer a concern with FIPS 203 / 204, so we could now remove it. However, I think it will be a fair amount of editorial work (we will need to accurately list out the bit position to split at for each composite alg), and it is asking all existing composite implementations to change, then will require a lot of interop testing. Is this change really worth it?\r\n\r\nIf you feel strongly about this, then perhaps you could prepare the change to the document on a side-branch, and we could bring it to the LAMPS mailing list?\r\n",
      "createdAt": "2024-09-13T13:40:43Z",
      "updatedAt": "2024-09-26T14:41:29Z",
      "closedAt": "2024-09-26T14:41:28Z",
      "comments": [
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Since the current specifications indicate specific key lengths, concatenation instead of 2 sequences is an acceptable solution. However, I agree with Mike that the potential \"gain\" is not proportionate to the cost of changing the specifications, as well as the changes in the implementations currently being developed. My company has been implementing the structures in the \"composite-sign\" and \"comosite-KEM\" drafts for several months; we allow changes, but we do not support this one.\r\nPiotr Popis",
          "createdAt": "2024-09-18T10:04:33Z",
          "updatedAt": "2024-09-18T10:04:33Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Max withdrew the suggestion. Closing this issue.",
          "createdAt": "2024-09-26T14:41:28Z",
          "updatedAt": "2024-09-26T14:41:28Z"
        }
      ]
    },
    {
      "number": 69,
      "id": "I_kwDOKRPFO86XXSQf",
      "title": "Clarifications on ASN.1 representations",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/69",
      "state": "CLOSED",
      "author": "codespree",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- [\u2753] What is the ASN.1 format of composite **public keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite public key pk as per Section 3.2\r\n\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.2 specifies:\r\n    ```\r\n    CompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n    ```\r\n    Are the two component public keys raw public keys without any OIDs? Are they the sequence of bit strings based on the component KEM KeyGen() functions?\r\n\r\n- [\u2753] What is the ASN.1 format of composite **secret keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite private key pk as per Section 3.3\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.3 specifies:\r\n    ```\r\n    CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n    ```\r\n\r\n    `OneAsymmetricKey` is defined in [RFC5912](https://tools.ietf.org/html/rfc5912) as:\r\n    ```\r\n    OneAsymmetricKey ::= SEQUENCE {\r\n        version Version,\r\n        privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\n        privateKey PrivateKey,\r\n        attributes [0] Attributes OPTIONAL,\r\n        ...,\r\n        [[2: publicKey [1] PublicKey OPTIONAL ]],\r\n        ...\r\n    }\r\n    ```\r\n\r\nSo, the composite private key is a sequence of two `OneAsymmetricKey` structures. What are the OID values for the `privateKeyAlgorithm` fields of the two `OneAsymmetricKey` structures? Are we to assume the OID values are the same as the OID values of the component KEM algorithms - i.e:\r\n\r\n    For elliptic curve component KEM:\r\n    ```\r\n    KemType::P256 => \"1.2.840.10045.3.1.7\".to_string(),\r\n    KemType::P384 => \"1.3.132.0.34\".to_string(),\r\n    // RFC 8410\r\n    KemType::X25519 => \"1.3.101.110\".to_string(),\r\n    KemType::X448 => \"1.3.101.110\".to_string(),\r\n    // RFC 5639\r\n    KemType::BrainpoolP256r1 => \"1.3.36.3.3.2.8.1.7\".to_string(),\r\n    KemType::BrainpoolP384r1 => \"1.3.36.3.3.2.8.1.11\".to_string(),\r\n    ```\r\n\r\n    For RSA component KEM:\r\n    ```\r\n    KemType::RsaOAEP2048 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP3072 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP4096 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    ```\r\n\r\n    For ML-KEM component KEM:\r\n    ```\r\n    KemType::MlKem512 => \"2.16.840.1.101.3.4.4.1\".to_string(),\r\n    KemType::MlKem768 => \"2.16.840.1.101.3.4.4.2\".to_string(),\r\n    KemType::MlKem1024 => \"2.16.840.1.101.3.4.4.3\".to_string(),\r\n    ```\r\n\r\n- [\u2753] Why do we need `CompositeKEM.Decap(ct, mlkemSK, tradSK)` as a function signature of the Decap function, why not just use the `CompositeKEMPrivateKey` DER and implement `CompositeKEM.Decap(ct, compositeSK)`? The `CompositeKEM.KeyGen()` function in any case returns `CompositeKEMPrivateKey` as DER according to my understanding. This way the composite KEMs also follow the same interface as the non-composite counterparts.\r\n\r\n- [\u2753] What is the ASN.1 format of RSA keys? Is it `pkcs1_der`?\r\n\r\n-  [\u2705] Composite Decap doesn't accept tradPK as an argument:\r\n    Adressed [here](https://github.com/lamps-wg/draft-composite-kem/pull/56/commits/1907c2ded1bc4e0ffd294169f64aa494b683fd7f) ",
      "createdAt": "2024-09-20T18:54:29Z",
      "updatedAt": "2024-09-25T10:23:01Z",
      "closedAt": "2024-09-24T16:36:02Z",
      "comments": [
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "@ounsworth @dconnolly @danvangeest  @opencrypto  I am new to the community. I have implemented the Editor's draft version in Rust:\r\nhttps://github.com/codespree/quantcrypt\r\n\r\nWould appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n\r\nAll the KEM algorithms mentioned in the draft are implemented. \r\n\r\nTest bytes of expected input would be good so that we can track if the implementations are correct.",
          "createdAt": "2024-09-21T09:16:07Z",
          "updatedAt": "2024-09-21T09:16:07Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Section 3.3 [composite-kem] should be as follows:\r\nUse cases that require an inter-operable encoding for composite\r\n   private keys, such as when private keys are carried in PKCS #12\r\n   [RFC7292], CMP [RFC4210] or CRMF [RFC4211] MUST use the following\r\n   structure.\r\n\r\n   CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OCTET STRING\r\n\r\n  Each element of this sequence is a private key, and this sequence is contained in the privateKey field of the OneAsymmetricKey structure [RFC5958].\r\n\r\n   The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.\r\n\r\n   When a CompositeKEMPrivateKey is conveyed inside a OneAsymmetricKey\r\n   structure (version 1 of which is also known as PrivateKeyInfo)\r\n   [RFC5958], the privateKeyAlgorithm field SHALL be set to the\r\n   corresponding composite algorithm identifier defined according to\r\n   Section 5 (the parameters field MUST be absent), the privateKey field\r\n   SHALL contain the CompositeKEMPrivateKey, and the publicKey field MUST\r\n   NOT be present. Associated public key material MAY be present in the\r\n   OneAsymmetricKey structure containing CompositeKEMPrivateKey and in\r\n   that case version is 2.\r\n\r\n   In some use-cases the private keys that comprise a composite key may\r\n   not be represented in a single structure or even be contained in a\r\n   single cryptographic module; for example if one component is within\r\n   the FIPS boundary of a cryptographic module and the other is not; see\r\n   Appendix C.1 for more discussion.  The establishment of\r\n   correspondence between public keys in a CompositeKEMPublicKey and\r\n   private keys not represented in a single composite structure is\r\n   beyond the scope of this document.\r\n\r\nI especially draw your attention to the sentence that does not change:\r\n **The order of the component keys is the same as the order defined in\r\n   Section 3.2 for the components of CompositeKEMPublicKey.**\r\nThis sentence indicates that we could have one OID for the composite algorithm, hence one OneAsymmetricKey sequence with two private keys (two sequences in the privateKey field) is enough.\r\n",
          "createdAt": "2024-09-23T09:14:01Z",
          "updatedAt": "2024-09-23T09:14:01Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @codespree,\r\n\r\nThere is an IETF hackathon repo with test artifacts: https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n\r\nIn addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting.  We can invite you to the next one, just give an email address to send the invitation to.\r\n\r\n> @ounsworth @dconnolly @danvangeest @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust: https://github.com/codespree/quantcrypt\r\n> \r\n> Would appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n> \r\n> All the KEM algorithms mentioned in the draft are implemented.\r\n> \r\n> Test bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\n",
          "createdAt": "2024-09-24T11:53:37Z",
          "updatedAt": "2024-09-24T11:53:37Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Hi\r\n\r\nThank you for the invitation. My email address: ***@***.***\r\n\r\nI only have concerns about the time zone differences for online meetings.\ud83d\ude0a\r\n\r\nRegards \u2013 Piotr Popis\r\n\r\n \r\n\r\nFrom: Daniel Van Geest ***@***.***> \r\nSent: Tuesday, September 24, 2024 1:54 PM\r\nTo: lamps-wg/draft-composite-kem ***@***.***>\r\nCc: PiotrPopis ***@***.***>; Comment ***@***.***>\r\nSubject: Re: [lamps-wg/draft-composite-kem] Clarifications on ASN.1 representations (Issue #69)\r\n\r\n \r\n\r\nHi  <https://github.com/codespree> @codespree,\r\n\r\nThere is an IETF hackathon repo with test artifacts:  <https://github.com/IETF-Hackathon/pqc-certificates> https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n\r\nIn addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting. We can invite you to the next one, just give an email address to send the invitation to.\r\n\r\n <https://github.com/ounsworth> @ounsworth  <https://github.com/dconnolly> @dconnolly  <https://github.com/danvangeest> @danvangeest  <https://github.com/opencrypto> @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust:  <https://github.com/codespree/quantcrypt> https://github.com/codespree/quantcrypt\r\n\r\nWould appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n\r\nAll the KEM algorithms mentioned in the draft are implemented.\r\n\r\nTest bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\n\u2014\r\nReply to this email directly,  <https://github.com/lamps-wg/draft-composite-kem/issues/69#issuecomment-2371049605> view it on GitHub, or  <https://github.com/notifications/unsubscribe-auth/BLIOPUVAJ6V77MURZKIAGVLZYFHFRAVCNFSM6AAAAABOSVU73OVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGNZRGA2DSNRQGU> unsubscribe.\r\nYou are receiving this because you commented.Message ID: ***@***.***>\r\n\r\n",
          "createdAt": "2024-09-24T12:10:57Z",
          "updatedAt": "2024-09-24T12:10:57Z"
        },
        {
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi Piotr,\r\n\r\nYou email address is blanked out in github, but I have found it from the LAMPS emails.\r\n\r\nAnd for @codespree if you'd like an invite, you can find my email address in https://datatracker.ietf.org/doc/draft-ietf-lamps-x509-slhdsa/, just send me a note and we'll get you invited.",
          "createdAt": "2024-09-24T12:29:38Z",
          "updatedAt": "2024-09-24T12:29:38Z"
        },
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "- [\u2705] What is the ASN.1 format of composite **public keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite public key pk as per Section 3.2\r\n\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.2 specifies:\r\n    ```\r\n    CompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n    ```\r\n    Are the two component public keys raw public keys without any OIDs? Are they the sequence of bit strings based on the component KEM KeyGen() functions?\r\n\r\n# \ud83d\udc4d\ud83c\udffc Using the examples from [here](https://datatracker.ietf.org/doc/draft-ietf-lamps-pq-composite-sigs/) makes it very clear. As long as this draft is following the specs in version 2 of that draft. \r\n\r\nI have implemented it in this here:\r\n\r\n- [Composite Public Key](https://github.com/codespree/quantcrypt/blob/main/src/asn1/composite_public_key.rs)\r\n- [Composite Private Keys](https://github.com/codespree/quantcrypt/blob/main/src/asn1/composite_private_key.rs)\r\n\r\nReferring to the DSA draft from the KEM draft would be helpful.\r\n\r\n<hr>\r\n\r\n- [\u2705] What is the ASN.1 format of composite **secret keys** from `CompositeKEM.KeyGen()`?\r\n    The draft specifies:\r\n\r\n    The KeyGen() -> (pk, sk) of a composite KEM algorithm will perform the KeyGen() of the respective component KEM algorithms and it produces a composite private key pk as per Section 3.3\r\n    ```\r\n    CompositeKEM.KeyGen():\r\n        (compositePK[0], compositeSK[0]) = MLKEM.KeyGen()\r\n        (compositePK[1], compositeSK[1]) = TradKEM.KeyGen()\r\n\r\n        return (compositePK, compositeSK)\r\n    ```\r\n\r\n    Section 3.3 specifies:\r\n    ```\r\n    CompositeKEMPrivateKey ::= SEQUENCE SIZE (2) OF OneAsymmetricKey\r\n    ```\r\n\r\n    `OneAsymmetricKey` is defined in [RFC5912](https://tools.ietf.org/html/rfc5912) as:\r\n    ```\r\n    OneAsymmetricKey ::= SEQUENCE {\r\n        version Version,\r\n        privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,\r\n        privateKey PrivateKey,\r\n        attributes [0] Attributes OPTIONAL,\r\n        ...,\r\n        [[2: publicKey [1] PublicKey OPTIONAL ]],\r\n        ...\r\n    }\r\n    ```\r\n\r\nSo, the composite private key is a sequence of two `OneAsymmetricKey` structures. What are the OID values for the `privateKeyAlgorithm` fields of the two `OneAsymmetricKey` structures? Are we to assume the OID values are the same as the OID values of the component KEM algorithms - i.e:\r\n\r\n    For elliptic curve component KEM:\r\n    ```\r\n    KemType::P256 => \"1.2.840.10045.3.1.7\".to_string(),\r\n    KemType::P384 => \"1.3.132.0.34\".to_string(),\r\n    // RFC 8410\r\n    KemType::X25519 => \"1.3.101.110\".to_string(),\r\n    KemType::X448 => \"1.3.101.110\".to_string(),\r\n    // RFC 5639\r\n    KemType::BrainpoolP256r1 => \"1.3.36.3.3.2.8.1.7\".to_string(),\r\n    KemType::BrainpoolP384r1 => \"1.3.36.3.3.2.8.1.11\".to_string(),\r\n    ```\r\n\r\n    For RSA component KEM:\r\n    ```\r\n    KemType::RsaOAEP2048 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP3072 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    KemType::RsaOAEP4096 => \"1.2.840.113549.1.1.7\".to_string(),\r\n    ```\r\n\r\n    For ML-KEM component KEM:\r\n    ```\r\n    KemType::MlKem512 => \"2.16.840.1.101.3.4.4.1\".to_string(),\r\n    KemType::MlKem768 => \"2.16.840.1.101.3.4.4.2\".to_string(),\r\n    KemType::MlKem1024 => \"2.16.840.1.101.3.4.4.3\".to_string(),\r\n    ```\r\n\r\n# \ud83d\udc4d\ud83c\udffc Same as above\r\n\r\n<hr>\r\n\r\n- [\u2705] Why do we need `CompositeKEM.Decap(ct, mlkemSK, tradSK)` as a function signature of the Decap function, why not just use the `CompositeKEMPrivateKey` DER and implement `CompositeKEM.Decap(ct, compositeSK)`? The `CompositeKEM.KeyGen()` function in any case returns `CompositeKEMPrivateKey` as DER according to my understanding. This way the composite KEMs also follow the same interface as the non-composite counterparts.\r\n\r\n# \ud83d\udc4d\ud83c\udffc I understand this is pseudocode\r\n\r\n<hr>\r\n\r\n- [\ud83e\udd14] What is the ASN.1 format of RSA keys? Is it `pkcs1_der`?\r\n\r\n# Sample keys using RSA would be helpful\r\n\r\n<hr>\r\n\r\n-  [\u2705] Composite Decap doesn't accept tradPK as an argument:\r\n    Adressed [here](https://github.com/lamps-wg/draft-composite-kem/pull/56/commits/1907c2ded1bc4e0ffd294169f64aa494b683fd7f) ",
          "createdAt": "2024-09-24T16:27:01Z",
          "updatedAt": "2024-09-24T16:27:01Z"
        },
        {
          "author": "codespree",
          "authorAssociation": "NONE",
          "body": "Thanks @danvangeest . I am closing this issue. Samples on RSA keys (with and without PSS) would be very helpful in wither of the two drafts.",
          "createdAt": "2024-09-24T16:36:02Z",
          "updatedAt": "2024-09-24T16:36:02Z"
        },
        {
          "author": "carl-wallace",
          "authorAssociation": "NONE",
          "body": "> Hi @codespree,\r\n> \r\n> There is an IETF hackathon repo with test artifacts: https://github.com/IETF-Hackathon/pqc-certificates. Composite KEMs aren't included yet, but I wouldn't be surprised if they are added.\r\n> \r\n> In addition to the hackathon at every IETF meeting, every 4 months, which is free to attend in person or online, we also have a monthly online meeting. We can invite you to the next one, just give an email address to send the invitation to.\r\n> \r\n> > @ounsworth @dconnolly @danvangeest @opencrypto I am new to the community. I have implemented the Editor's draft version in Rust: https://github.com/codespree/quantcrypt\r\n> > Would appreciate a review. If you think there could be more people who can get involved in contributing to the repo or testing, I would welcome it.\r\n> > All the KEM algorithms mentioned in the draft are implemented.\r\n> > Test bytes of expected input would be good so that we can track if the implementations are correct.\r\n\r\nI implemented composite KEM support a few months back but have not tested against any other implementation. The work is here: https://github.com/carl-wallace/kemri_toy/commits/composite.",
          "createdAt": "2024-09-25T10:23:00Z",
          "updatedAt": "2024-09-25T10:23:00Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDOKRPFO86YFUFI",
      "title": "PrivateKey section is not explicit about which AlgID OIDs to place in the component OneAsymmetricKeys",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/72",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "pull request"
      ],
      "body": "Relates to #59 \r\n\r\nIf we decide to do the private key compression, then this issue will become moot.",
      "createdAt": "2024-09-26T21:05:02Z",
      "updatedAt": "2024-09-28T17:00:32Z",
      "closedAt": "2024-09-28T17:00:32Z",
      "comments": []
    },
    {
      "number": 73,
      "id": "I_kwDOKRPFO86YoByu",
      "title": "Algorithm identifier table KDF columns contain hash algorithms",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/73",
      "state": "CLOSED",
      "author": "bluegate010",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "It is a bit confusing on first read to see hash algorithms in the section 5 & 6.1 tables' KDF columns (SHA3-256, SHA3-384, SHA3-512).\r\n\r\nFrom reading footnotes under the table in section 6.1, it appears those shortnames refer to [this](https://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-sha3-hash-01#name-hkdf-with-sha3) draft RFC. It might be clearer to prepend the shortnames in the section 6.1 table with HKDF-* (HKDF-SHA3-256 etc).\r\n\r\nIt is not clear what the hash algorithms in table 5's KDF column refer to.",
      "createdAt": "2024-10-02T04:03:17Z",
      "updatedAt": "2024-10-19T22:51:25Z",
      "closedAt": "2024-10-19T22:51:25Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @bluegate010 Thank you for the comment.\r\n\r\nThis has been adjusted a bit in the most recent version. We now use either `HKDF-SHA256/256` or `SHA3-256` for the internal KEM combiner KDF -- note that there is no cryptographic reason why we need HKDF-SHA3 because a single iteration of SHA3 by already has the necessary DualPRF properties (but SHA2 does not, hence needing the HMAC / HKDF wrapper).\r\n\r\nFor the KDF used as the CMS KEMRecipientInfo layer we need a proper KDF, not for security property reasons, but because it needs to be variable-length output, so here we use either HKDF-SHA2 or KMAC.\r\n\r\n\r\nPlease see the updated version here (which will be posted to IETF Datatracker on Oct 21). Please let me know if this is still unclear. I am going to close this ticket for now, but feel free to re-open it.\r\n\r\nhttps://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html\r\n\r\n\r\n",
          "createdAt": "2024-10-19T22:51:25Z",
          "updatedAt": "2024-10-19T22:51:25Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDOKRPFO86Z09PE",
      "title": "Make sure it's sufficiently clear that all inputs to the KEM combiner are fixed-length",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/74",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "... at least fixed length for a given composite alg.\r\n\r\nThis came from a private discussion with Russ.",
      "createdAt": "2024-10-11T08:39:01Z",
      "updatedAt": "2024-10-17T19:50:26Z",
      "closedAt": "2024-10-17T19:50:26Z",
      "comments": []
    },
    {
      "number": 77,
      "id": "I_kwDOKRPFO86ar2r9",
      "title": "Add table of PK, CT sizes",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/77",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/spasm/zfWx5fYjvuvohTOI7asQG4m-NDI/\r\n\r\n> Hi Mike,\r\n>\r\n> Your draft:\r\n> https://datatracker.ietf.org/doc/draft-ietf-lamps-pq-composite-kem/\r\n> could do with table  on Npk, Nsk, and NSig sizes. Such tables greatly help\r\n> in implementation.\r\n>\r\n> The idea is from RFC 9180, Section 7.1\r\n> <https://datatracker.ietf.org/doc/rfc9180/>\r\n>\r\n> [image: image.png]\r\n>\r\n> The details of the calculations can be found here:\r\n>\r\n> https://github.com/codespree/quantcrypt/blob/main/additional_info_keysize.md\r\n>\r\n> All the best,\r\n> Varun\r\n\r\nIn my opinion, we should get sample keys, signatures, and ciphertexts for all algorithms, and then measure them. This sounds like a hackathon project.",
      "createdAt": "2024-10-17T16:15:59Z",
      "updatedAt": "2025-05-01T01:38:56Z",
      "closedAt": "2025-05-01T01:38:56Z",
      "comments": [
        {
          "author": "ZPDSSAI",
          "authorAssociation": "NONE",
          "body": "Hi Mike,\r\n\r\nI am Peiduo and I am from Varun(@codespree)'s team. We have computed the public key, secrete key and signature lengths for ML-DSA and its composite variations, and the public key, secrete key, shared secret, and cipher text lengths for ML-KEM and its composite variations. The full table documentation, together with notes on overhead computation, can be found in our project repo [here](https://github.com/codespree/quantcrypt/blob/main/additional_info_keysize.md).\r\n\r\nPlease check if the tables meet the requirement of this issue :)\r\n\r\nBest regards,\r\nZhao Peiduo",
          "createdAt": "2024-10-18T09:53:18Z",
          "updatedAt": "2024-10-18T09:53:18Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We discussed at an author's meeting, and we think that generating a toble like this is trickier than it looks because RSA public key size is not constant: things like leading zeros, or choosing a public exponent of 3, 11, 0x10001 are going to lead to a slight difference in overall size.\n\nI am starting to think that the right answer is to not put a table, but instead when we include test vectors / samples, we could list the public key and ciphertext sizes in those samples.",
          "createdAt": "2025-02-05T15:52:06Z",
          "updatedAt": "2025-02-05T15:52:06Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It should be just Len(ml-kem) + Len(trad) ... easy since we removed the ASN.1 wrapper.\n\nBut it would be easier to just wait until we have samples ...\n\n**For now: just put in an empty table and say TBD: pending samples**",
          "createdAt": "2025-02-27T22:01:39Z",
          "updatedAt": "2025-02-27T22:03:45Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This table will need a \n\n> Note that since this specification allows for multiple encodings of the traditional component, small variations in size could be encountered. Implementations MUST NOT perform strict length checking based on the values in this table.",
          "createdAt": "2025-04-27T19:34:39Z",
          "updatedAt": "2025-04-27T19:34:39Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOKRPFO86a0wRy",
      "title": "Should be clear that the CompositeML-KEM output is a key, not just a shared secret",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/79",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Go diving into FIPS 203 and borrow language about what properties the output value has.",
      "createdAt": "2024-10-18T13:27:03Z",
      "updatedAt": "2024-10-19T23:07:47Z",
      "closedAt": "2024-10-19T23:07:47Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've changed \"shared secret\" to \"shared secret key\" throughout.",
          "createdAt": "2024-10-19T22:59:15Z",
          "updatedAt": "2024-10-19T22:59:15Z"
        }
      ]
    },
    {
      "number": 81,
      "id": "I_kwDOKRPFO86a9fP2",
      "title": "Do we need to define smime caps for each kema?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/81",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-20T01:28:32Z",
      "updatedAt": "2024-10-21T19:49:25Z",
      "closedAt": "2024-10-21T19:49:25Z",
      "comments": []
    },
    {
      "number": 83,
      "id": "I_kwDOKRPFO86bfcql",
      "title": "The DER Encoded ML-KEM ObjectID are incorrect",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/83",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently has this:\r\n\r\n*ML-KEM-768*\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-768   -- (2.16.840.1.101.4.2)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 04 02\r\n\r\n   *ML-KEM-1024*\r\n\r\n   ASN.1:\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-1024   -- (2.16.840.1.101.4.3)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 04 03\r\n\r\nIT should be:\r\n\r\n*ML-KEM-768*\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-768   -- (2.16.840.1.101.3.4.4.2)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 03 04 04 02\r\n\r\n   *ML-KEM-1024*\r\n\r\n   ASN.1:\r\n\r\n   ASN.1:\r\n     algorithm AlgorithmIdentifier ::= {\r\n       algorithm id-alg-ml-kem-1024   -- (2.16.840.1.101.3.4.4.3)\r\n       }\r\n\r\n   DER:\r\n     30 0B 06 07 60 86 48 01 65 03 04 04 03",
      "createdAt": "2024-10-23T13:54:13Z",
      "updatedAt": "2024-10-23T14:55:26Z",
      "closedAt": "2024-10-23T14:55:26Z",
      "comments": []
    },
    {
      "number": 86,
      "id": "I_kwDOKRPFO86c9Qle",
      "title": "Add a MLKEM768 and P-256 variant",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/86",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "P-256 is missing from the draft, yet this will definitely be needed in practice. ",
      "createdAt": "2024-11-04T16:42:03Z",
      "updatedAt": "2025-01-22T15:53:49Z",
      "closedAt": "2025-01-22T15:53:49Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth do you welcome PRs for this?",
          "createdAt": "2024-11-11T16:04:36Z",
          "updatedAt": "2024-11-11T16:04:36Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDOKRPFO86c9SAL",
      "title": "HKDF-based hybrid variants are unimplementable ",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/87",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The generic combiner effectively shoves everything into a KDF to produce a new shared secret, e.g.:\r\n\r\n```\r\nss = KDF(mlkemSS || tradSS || tradCT || tradPK || Domain)\r\n```\r\n\r\nHowever, for HKDF-based KDFs, this simply doesn't make sense. HKDF requires _multiple_ inputs, not just a single input (`mlkemSS || tradSS || tradCT || tradPK || Domain`). As it stands, none of the HKDF-based variants in table 2 can be implemented.",
      "createdAt": "2024-11-04T16:44:03Z",
      "updatedAt": "2025-01-29T19:10:02Z",
      "closedAt": "2025-01-29T19:10:02Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup, good point. Thanks for pointing this out Chris!\r\n\r\nThe relevant spec for this is SP 800-56Cr2, Section 4.1, Option 2; which is:\r\n\r\n> Option 2: H(x) = HMAC-hash(salt, x), where HMAC-hash is an implementation of the HMAC\r\n> algorithm (as defined in [FIPS 198]) employing an approved hash function, hash,\r\n> that meets the selection requirements specified in Section 7. An implementation-\r\n> dependent byte string, salt, whose (non-null) value may be optionally provided in\r\n> OtherInput, serves as the HMAC key, and x (the input to H) is a bit string that serves\r\n> as the HMAC \u201cmessage\u201d as specified in [FIPS 198].\r\n\r\n> If H(x) = HMAC-hash(salt, x), then \u2013 in the absence of an agreed-upon alternative \u2013 the\r\n> default_salt shall be an all-zero byte string whose bit length equals that specified as the bit\r\n> length of an input block for the hash function, hash. (Input-block lengths for the approved\r\n> hash functions that can be employed to implement HMAC-hash are listed in Table 1 of\r\n> Section 4.2.)\r\n\r\nFrom that, I think the correct construction is:\r\n\r\n```\r\nss = HKDF-Extract(salt=0x0000000000000000, IKM=mlkemSS || tradSS || tradCT || tradPK || Domain)\r\n```\r\n\r\nI will also add some text to the FIPS certification section to match.",
          "createdAt": "2025-01-05T05:11:54Z",
          "updatedAt": "2025-01-05T05:17:20Z"
        }
      ]
    },
    {
      "number": 88,
      "id": "I_kwDOKRPFO86c9S4B",
      "title": "Drop DER encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/88",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An implementation of these KEMs should _not_ need any DER encoding or parsing logic to function. The spec should drop all use of DER encoding for KEM public keys and ciphertexts. Applications or protocols which require DER can wrap them as desired, but for the relevant hybrids here, they are simply not needed and add unnecessary complexity.",
      "createdAt": "2024-11-04T16:45:41Z",
      "updatedAt": "2024-11-28T20:04:27Z",
      "closedAt": "2024-11-28T20:04:27Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup. We will do this. It's become clear in the past few weeks that non-PKIX protocols would like to directly re-use our construction.",
          "createdAt": "2024-11-09T18:49:35Z",
          "updatedAt": "2024-11-09T18:49:35Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Great! Do you want PRs for this, or do you intend to make the change yourself?",
          "createdAt": "2024-11-11T16:04:14Z",
          "updatedAt": "2024-11-11T16:04:14Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "I was planning to remove the DER encoding for both this draft and the composite Signatures draft.   Thanks for suggesting edits, I'll take a look at them.  ",
          "createdAt": "2024-11-19T21:08:23Z",
          "updatedAt": "2024-11-19T21:08:23Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDOKRPFO86dZEqO",
      "title": "Maybe reverse the domain encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/89",
      "state": "CLOSED",
      "author": "ilaril",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The KDF input `mlkemSS || tradSS || tradCT || tradPK || Domain` is not parsable, as a domain may be suffix of another. This means the inputs might collide even between what are supposed to be separate domains.\r\n\r\nThe simplest way I can come up to make it parsable (and thus prevent inter-domain collisions) is to reverse the domain encoding:\r\n\r\n`mlkemSS || tradSS || tradCT || tradPK || reverse(Domain)` \r\n\r\n(Since it is possible to parse in reverse from the end.)",
      "createdAt": "2024-11-07T10:38:24Z",
      "updatedAt": "2025-02-06T09:06:24Z",
      "closedAt": "2025-02-06T09:06:23Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari, I have no idea what you are trying to say. What do you mean \"not parsable\"? Can you please explain another way?",
          "createdAt": "2024-11-09T18:52:03Z",
          "updatedAt": "2024-11-09T18:52:03Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "The domain separation is not guaranteed: Even if two inputs have different domains, the input to the KDF might still be the same.\r\n\r\nWhile such thing seems to be very unlikely to happen and low impact in practice, cryptography is traditionally conservative and would rather eliminate the possibility altogether.\r\n\r\n",
          "createdAt": "2024-11-09T21:07:05Z",
          "updatedAt": "2024-11-09T21:07:05Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ilaril the domain separator value `Domain` is a hard-coded binary value (specifically, it's the DER encoding of the OID of the composite algorithm). I don't understand why byte-reversing the DER-encoded OID helps with your argument?\n\nYes, one OID can be the suffix of another, but for a whole Domain value to be the suffix of another, you would need to do something incredibly weird where the DER TLV tagging would need to appear in the middle of another value. Possible, I guess, but I don't see how byte-order-reversing the value helps.",
          "createdAt": "2025-02-05T15:58:57Z",
          "updatedAt": "2025-02-05T16:04:39Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "OID DER TLV encoding is prefix-free, and byte-order-reversal of any prefix-free encoding is suffix-free, so byte-order-reversed OID DER TLV encoding is suffix-free.\n\nHowever, even generating collisions seems to be incredibly difficult task (as trad* values need to be consistent). Closing this, as I no longer think this is a practical issue.",
          "createdAt": "2025-02-06T09:06:23Z",
          "updatedAt": "2025-02-06T09:06:23Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDOKRPFO86dZMXP",
      "title": "Drop id-MLKEM768-X25519",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/90",
      "state": "CLOSED",
      "author": "ilaril",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As far as I can tell, this is just an incompatible (different domain) duplicate of the X-Wing.\r\n\r\nIt would be easier for crypto implementers to just have one construction to combine X25519 and MLKEM768, not two.",
      "createdAt": "2024-11-07T10:46:10Z",
      "updatedAt": "2024-11-09T20:47:29Z",
      "closedAt": "2024-11-09T18:54:55Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ilari, were you in LAMPS? This point was discussed fairly extensively.\r\n\r\nCurrently this combination IS X-Wing (or at least, it is attempting to be), and as such, I am very confused about why the X-Wing draft bothered to include OIDs. Currently the only (substantial) difference between this and X-Wing is their \"simultaneous KeyGen\". We are in discussions with the X-Wing authors about whether we want them to be separate or not.",
          "createdAt": "2024-11-09T18:54:34Z",
          "updatedAt": "2024-11-09T18:54:34Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Since this is an open discussion point, I am going to remove this github issue.",
          "createdAt": "2024-11-09T18:54:55Z",
          "updatedAt": "2024-11-09T18:54:55Z"
        },
        {
          "author": "ilaril",
          "authorAssociation": "NONE",
          "body": "There is another substantial difference besides the keygen: The domain separators are different (060B6086480186FA6B5005021A versus 5c2e2f2f5e5c). So changing the object identifier in public key does not work (whereas it would if the only difference was the keygen).\r\n\r\nRe-watching the session recording, the closest comments I can find are about having two close things being a bad idea, and the keygen difference justifying a new object identifier.",
          "createdAt": "2024-11-09T20:47:28Z",
          "updatedAt": "2024-11-09T20:47:28Z"
        }
      ]
    },
    {
      "number": 91,
      "id": "I_kwDOKRPFO86dvTHi",
      "title": "Composite KEM does not fully protect against implementation errors in ML-KEM",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/91",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See comment from Peter C:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/Fq06ghviNMejesJNR4XzP5x0ecI/",
      "createdAt": "2024-11-09T18:50:30Z",
      "updatedAt": "2025-03-01T23:33:49Z",
      "closedAt": "2025-03-01T23:33:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The referenced document is BSI TR-2012-1, which chains to the CatKDF defined in ETSI TS 103 744, which is:\r\n\r\n```\r\nInput:\r\npsk - a secret key. It may be present. If not present this value shall be the empty octet string, \u2205.\r\n(k 1, k 2, \u2026, k n) - n-tuple of octet strings containing shared secrets k i, exchanged through a hybrid key exchange, see\r\nFigure 4.\r\nMA, MB - octet string of a pair of exchanged messages in establishment of the shared secrets k i.\r\ncontext - octet string context set by the instance of the key exchange transaction - this may include a transcript of\r\nadditional exchanged messages.\r\nlabel - an octet string that specifies a separation of use for the application or instance of the key-exchange. Any labels\r\nused in the key exchange should not be provided as an argument to the same hash function for another purpose in the\r\napplication.\r\nlength - the length in octets of the derived key material key_material.\r\nProcess:\r\n1) Form secret = psk || k1 || k 2 || \u2026 || k n.\r\n2) Set f_context = f(context, MA, MB), where f is a context formatting function.\r\n3) key_material = KDF(secret, label, f_context, length).\r\n4) Return key_material.\r\nOutput:\r\nkey_material - derived key material.\r\n```\r\n\r\nCatKDF does not include the public keys, but it does include both ciphertexts.\r\n\r\nPeter C also makes a good point about the intro text. I'll adjust that. And I'll add a note about BSI / ETSI CatKEM.",
          "createdAt": "2025-01-05T23:55:07Z",
          "updatedAt": "2025-01-06T00:53:43Z"
        }
      ]
    },
    {
      "number": 92,
      "id": "I_kwDOKRPFO86egkdG",
      "title": "GHP18 analysis may not apply",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/92",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The security considerations references [GHP18](https://eprint.iacr.org/2018/024.pdf) as proof of the combiner mechanism in the draft. However, as far as I can tell, the draft does not adhere to the construction in this paper. In GHP18, the output ciphertext is the result of concatenating all of the individual KEM ciphertexts, and the shared secret is the result of a function W applied to all individual KEM shared secrets _and_ the ciphertext, i.e., `K= W(k1,...,kn,c)` where `ki` is the i-th KEM shared secret and `c` is the combined (concatenated) ciphertext.\r\n\r\nHowever, in this document, the shared secret does not include the ciphertext in the same way. It computes the shared secret as:\r\n\r\n```\r\nct = CompositeCiphertextValue(mlkemCT, tradCT)\r\nss = KDF(mlkemSS || tradSS || tradCT || tradPK || Domain)\r\n```\r\n\r\nwhereas for equivalence one would need to do something like:\r\n\r\n```\r\nct = CompositeCiphertextValue(mlkemCT, tradCT)\r\nss = KDF(mlkemSS || tradSS || ct || tradPK || Domain)\r\n```\r\n\r\nPresumably the traditional public key is included for MAL-BIND-K-PK reasons, but it's not really clear to me.\r\n\r\nTo make a long issue short, where is the proof of security for the combiner in this document?",
      "createdAt": "2024-11-14T16:18:49Z",
      "updatedAt": "2025-03-03T19:59:02Z",
      "closedAt": "2025-03-03T19:59:02Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Security considerations have been added that more closely base the security proof of this combiner on the security proof of X-Wing. I think that addresses these comments.",
          "createdAt": "2025-03-01T23:36:07Z",
          "updatedAt": "2025-03-01T23:36:07Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "I_kwDOKRPFO86fGir-",
      "title": "Need to specify clearly how to invoke HKDF  in a FIPS-compliant way",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/93",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently we just treat it as a generic KDF.\r\n\r\nWe need to take a much closer look at how to define the HKDF-SHA256 combo in a way that is 800-56Cr2 compliant. Technically HKDF (RFC 5869) is allowed under the 2-Step method, but it requires some careful alignment of inputs on the HKDF-Expand step. But in our case we only need to use the HKDF-Extract step for the combiner. \r\n\r\nFix: either specify that we only use the HKDF-Extract() step from RFC 5869, or else just use HMAC directly from RFC 2104\r\n\r\nhttps://datatracker.ietf.org/doc/rfc2104/",
      "createdAt": "2024-11-18T17:24:38Z",
      "updatedAt": "2025-01-29T19:10:03Z",
      "closedAt": "2025-01-29T19:10:03Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth this is a dupe of #87, I think?",
          "createdAt": "2024-11-18T21:58:39Z",
          "updatedAt": "2024-11-18T21:58:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In any case, I would recommend just dropping HKDF altogether. Since you're composing with ML-KEM, you already have SHA-3 available, so you might as well just use SHA3-256 as _the one_ KDF across the board. What do you think?",
          "createdAt": "2024-11-18T21:59:16Z",
          "updatedAt": "2024-11-18T21:59:16Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> In any case, I would recommend just dropping HKDF altogether. Since you're composing with ML-KEM, you already have SHA-3 available, so you might as well just use SHA3-256 as _the one_ KDF across the board. What do you think?\r\n\r\nAww dude, you're like a year late to this debate. Both Joe Saloway and Deb Cooley were adamant that just because you have an ML-KEM implementation (potentially in a USB smartcard or something) does not mean that you have SHA3 available in, say, the Outlook S/MIME implementation that's gonna do the KEM Combining.\r\n\r\nWe have spent an inordinate amount of time fine-tuning a range of SHA2 and SHA3 offerings that everyone involved are happy with. Please don't re-open this can of worms.",
          "createdAt": "2024-11-19T20:48:46Z",
          "updatedAt": "2024-11-19T20:49:38Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @ounsworth this is a dupe of #87, I think?\r\n\r\nCertainly related. There's a much larger discussion going on relating to how to make the SHA2-based combiner FIPS compatible. Russ is currently proposing that we ditch HKDF and specify raw usage of HMAC. This also has implications for CMS in general since the KEMRecipientInfo RFC that we just published (RFC 9629) has the same problem in that it is non FIPS compliant when used with id-alg-hkdf-with-sha256.\r\n\r\nPlease hold. I'll update github issues once my Outlook stops emitting smoke.",
          "createdAt": "2024-11-19T20:55:00Z",
          "updatedAt": "2024-11-19T20:55:00Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm sorry, but I don't buy the argument that ML-KEM will be available and SHA-3 will not. Where is discussion about this taking place?",
          "createdAt": "2024-11-19T21:00:19Z",
          "updatedAt": "2024-11-19T21:00:19Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm sorry, but I don't buy the argument that ML-KEM will be available and SHA-3 will not. Where is discussion about this taking place?\r\n\r\nI don't particularly care one way or another, but the request for SHA2 combiners came from Deb Cooley on behalf of NSA. Here's the PQUIP 118 recording where she made her case: https://youtu.be/W46QrMvlLZU?feature=shared&t=5655\r\n\r\nJoe Saloway made a similar request (but not on-recording). If you want the SHA2 combiners to be ditched, then you'll need to get Deb and Joe to withdraw their requests for it.",
          "createdAt": "2025-01-05T01:06:26Z",
          "updatedAt": "2025-01-05T01:09:29Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDOKRPFO86hNDE6",
      "title": "Editorial changes and some proposals (mainly clarifying) to version 5.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/96",
      "state": "CLOSED",
      "author": "PiotrPopis",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "**Editorial changes**\r\n1.\tSection 3\r\n> *  KDF(message) represents a key derivation function suitable to the\r\n      chosen KEMs according to {tab-kem-combiners}. All KDFs (\u2026)\r\n\r\n*  KDF(message) represents a key derivation function suitable to the\r\n      chosen KEMs according to Table 2. All KDFs (\u2026)\r\n\r\n2.\tSection 3.3\r\n> Each registered Composite ML-KEM algorithm specifies the choice of\r\n   KDF andDomain to be used in Section 7 and Section 7.2 below.\r\n\r\nEach registered Composite ML-KEM algorithm specifies the choice of\r\n   KDF and Domain to be used in Section 7 and Section 7.2 below.\r\n\r\n3.\tSection 4.1\r\n> 1. Generate componint keys.\r\n\r\n1. Generate component keys.\r\n\r\n4.\tSection 4.2\r\n> Composite public key conisting of encryption public keys   for each component.\r\n\r\nComposite public key consisting of encryption public keys   for each component.\r\n\r\n5.\tSection 4.2\r\n> Trad     A placeholder for the specific ML-KEM algorithm and\r\n             parameter set to use, for example \"RSA-OAEP\"\r\n             or \"X25519\".\r\n\r\nTrad     A placeholder for the specific traditional algorithm and\r\n             parameter set to use, for example \"RSA-OAEP\"\r\n             or \"X25519\".\r\n\r\n6.\tSection 5\r\n> For timing-invariance reasons, it is RECOMMENDED to perform both decapsulation operations and check for errors afterwards to to prevent an attacker from using a timing channel to tell which component failed decapsulation.\r\n\r\nFor timing-invariance reasons, it is RECOMMENDED to perform both decapsulation operations and check for errors afterwards to prevent an attacker from using a timing channel to tell which component failed decapsulation.\r\n\r\n7.\tSection 5\r\n> ie\r\n\r\ni.e.\r\nNote: also Section 7.1, 7.3 (2 times) and 11.3.\r\n\r\n8.\tSection 5.1\r\n> For use with this document, ML-KEM keys MUST be be the raw BIT STRING (\u2026)\r\n\r\nFor use with this document, ML-KEM keys MUST be the raw BIT STRING (\u2026).\r\n \r\n9.\tSection 5.2\r\n> For more details on the security considerations around key reuse, see section Section 11.2.\r\n\r\nFor more details on the security considerations around key reuse, see Section 11.2\r\n\r\n10.\tSection 7.2\r\n> The KEM combiner defined in section Section 3.3 requires a domain\r\n   separator Domain input.\r\n\r\nThe KEM combiner defined in Section 3.3 requires a domain\r\n   separator Domain input.\r\n\r\n11.\tSection 7.3\r\n> (\u2026) however SHA2 is not us must be wrapped in the HKDF construction.\r\n\r\n(\u2026) however SHA2 is not so must be wrapped in the HKDF construction.\r\n\r\n12.\tSection 7.4\r\n> The RSA component keys MUST be generated at the 2048-bit and 3072-bit\r\n   security levels respectively.\r\n\r\nThe RSA component keys MUST be generated at the 2048-bit, 3072-bit and 4096-bit security levels respectively.\r\n\r\n13.\tSection 8.1.1\r\n> IKM:  input keying material.  In this document this is the shared\r\n      secret outputted from the Encapsulate() or Decapsulate() functions.\r\n\r\nIKM:  input keying material.  In this document this is the shared\r\n      secret outputted from the Encaps() or Decaps() functions.\r\n\r\nRationale: Consistency with other parts of the standard, e.g. Section 3.\r\n\r\n14.\tSection 8.1.2\r\n> K: the input key-derivation key.  In this document this is the\r\n      shared secret outputted from the Encapsulate() or Decapsulate()\r\n      functions.\r\n\r\nK: the input key-derivation key.  In this document this is the\r\n      shared secret outputted from the Encaps() or Decaps()\r\n      functions.\r\n\r\n15.\tSection 8.2\r\n> wrap identifies a key-encryption algorithm used to encrypt the\r\n      content-encryption key.\r\n\r\nwrap identifies a key-encryption algorithm used to encrypt the\r\n      content-encryption key.\r\n\r\nencryptedKey is the result of encrypting the CEK with the KEK.\r\n\r\nRationale: To be consistent with RFC 9629 a description of the encryptedKey field should be added.\r\n\r\n16.\tSection 11.1.1\r\n> (\u2026) and therefore secure so, long as one of the component KEMs is.\r\n\r\n(\u2026) and therefore secure so long as one of the component KEMs is.\r\n\r\n17.\tAppendix B\r\n> Component Signature Algorithm\r\n\r\nComponent Encryption Algorithm\r\n\r\n**Proposals (mainly clarifying)**\r\n\r\n18.\tSection 7.2\r\n> to use it, the value should be HEX-decoded and used in binary form.\r\n\r\nto use it, the value MUST be HEX-decoded and used in binary form.\r\n\r\nRationale: For interoperability purposes this type of encoding should be clearly indicated.\r\n\r\n19.\tSection 7.3\r\n> *  Pair equivalent levels.\r\n\r\n*  Pair equivalent levels (except for RSA, especially RSA2048, which were included due to their massive use).\r\n\r\nRationale: security strength of RSA2048 is 112 bits and RSA3072/4096 128 bits.\r\n\r\n20.\tSection 8.1.1\r\n> salt:  optional salt value (a non-secret random value).  In this\r\n      document this parameter is unused, that is it is the zero-length\r\n      string \"\".\r\n\r\nsalt:  optional salt value (a non-secret random value).  In this\r\n      document this parameter is unused, that is it is the string of\r\n      HashLen zeros.\r\n\r\nRationale: Section 2.2 RFC 5869: \r\nsalt     optional salt value (a non-secret random value);\r\n         if not provided, it is set to a string of HashLen zeros.\r\n\r\n21.\tSection 8.2\r\n> kdf identifies the key-derivation algorithm.  Note that the Key\r\n      Derivation Function (KDF) used for CMS RecipientInfo process MAY\r\n      be different than the KDF used within the Composite ML-KEM\r\n      algorithm or one of its components.\r\n\r\nkdf identifies the key-derivation algorithm.  Note that the Key\r\n      Derivation Function (KDF) used for CMS RecipientInfo process (to calculate the KEK key) MAY be different than the KDF used within the Composite ML-KEM algorithm (to calculate the shared secret ss).\r\n\r\nRationale: The removal of the phrase \u201cor one of its components\u201d results from the fact that the traditional component uses RSA-OAEP (and not RSA-KEM as in the previous versions of the document) or uses a simplified version of DHKEM - see Section 3.2. Otherwise, these KDF functions would have to be defined in this document.\r\n\r\nRegards\r\n",
      "createdAt": "2024-11-29T09:38:44Z",
      "updatedAt": "2025-01-27T03:37:19Z",
      "closedAt": "2025-01-27T03:37:19Z",
      "comments": []
    },
    {
      "number": 97,
      "id": "I_kwDOKRPFO86iARAI",
      "title": "Extra example for key reuse",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/97",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The question then is whether an attacker could take a messages signed by {PQ, RSA} and by simply dropping a signature make it appear to have been signed by either the {RSA} or {PQ} cert, and thus be processed under a different verifier policy?  The obvious counter-argument is that if you can break RSA then why do you need to tamper with an originally-valid message, why not just forge a completely new message? An example would be that you can't yet fully break RSA, but you want to force a downgrade so that an S/MIME reply is only encrypted with RSA instead of the hybrid and thus you can file it away for eventual harvest-now-decrypt-later.",
      "createdAt": "2024-12-04T14:44:33Z",
      "updatedAt": "2025-01-29T15:30:04Z",
      "closedAt": "2025-01-29T15:30:04Z",
      "comments": []
    },
    {
      "number": 98,
      "id": "I_kwDOKRPFO86k6BBB",
      "title": "Use HPKE DHKEM instead of custom DHKEM",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/98",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section {{sec-DHKEM}} describes how to promote an ECDH algorithm, such as X25519, to a KEM. In doing so, it strips down HPKE's DHKEM for its own purpose. This has a number of problems, including:\r\n\r\n(1) There seems to be no analysis suggesting the stripped down version satisfies the necessary properties of a KEM. For example, what are the binding properties of this variant, and do they vary based on the traditional KEM that's used? DHKEM, in comparison, is known to satisfy the IND-CCA2 requirement (when instantiated correctly) and its binding properties are known. \r\n(2) More importantly, when trying to use the composite KEM in HPKE, things become super awkward. Let's take a concrete example. Let's say I want to use composite ML-KEM with P-256 in HPKE. Part of doing that requires one to implement `DeriveKeyPair`, as per RFC9180. However, as the document is currently written, there is no deterministic key generation function on the KEM interface, i.e., one can't simply call `(tradPK, tradSK) = TradKEM.MissingDeterministicKeyGenerationFunction(tradSeed)`. This means we need to either expand the KEM interface in this document, which would mean that there would be two different deterministic key generation functions for P-256, one defined here and one defined in RFC9180, or we can simply use RFC9180's function directly. The former seems quite redundant and undesirable, whereas the latter isn't exactly possible. Recall that we're trying to use ML-KEM with P-256, not ML-KEM with DHKEM(P-256, HKDF-SHA256). \r\n\r\nThese problems vanish if we insist that elliptic-curve-based KEMs must be DHKEM as specified in RFC9180. Then we have a very clean path towards integration into HPKE without compromising on any features.",
      "createdAt": "2025-01-02T21:33:39Z",
      "updatedAt": "2025-03-01T23:38:56Z",
      "closedAt": "2025-03-01T23:38:56Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "HPKE DHKEM\r\n----\r\n\r\nI'm not saying no right away, but I think I need to see it written out in order to understand how much complexity you're talking about importing from 9180 into this draft. For example, are we going to end up with layers upon layers of labels, most of which end up getting instantiated with the empty string?\r\n\r\nIf this ends up imposing a bunch of extra complexity on PKI implementers in order to make things easier for HPKE implementers, then I will likely vote No, but I'll keep an open mind until I fully understand what you're proposing.\r\n\r\n\r\nKeyGen\r\n----\r\n\r\nDeirdre also brought up issues with composite KeyGen -- and this is currently what's keeping X-Wing as a separate algorithm, rather than folding it into Composite -- part of the design goal of composite is that for the extremely change-controlled environments, it allows you to start rolling out PQ even if you only currently have RSA- or ECDH-capable hardware. Consider for example this migration scenario, which is one of our primary design goals:\r\n\r\nAll your employees' corporate ID badges double as smartcards to insert into your laptop for Windows login and email decryption.\r\nYou want emails to start being composite-encrypted tomorrow, so you push a patch that will generate a new RSA key on the smartcard, and an ML-KEM key stored in Windows CAPI, and you get a cert for that as a composite. All your over-the-wire emails are now PQ-protected, you can still claim that the whole thing is FIPS-certified because of the RSA smartcards, and you didn't have to replace any hardware (yet).\r\nAs you start getting your hands on FIPS-certified ML-KEM smartcards and issuing them to employees, you can either do the composite in the smartcard if it supports it, or ML-KEM in smartcard and RSA in software, or pure ML-KEM; it's nice and flexible and you get all the benefits of hybrid regardless of which half is in hardware and FIPS-certified.\r\n\r\nMy concern about making this draft overly prescriptive about KeyGen is that we'll lose this flexibility and acceleration of being able to leverage composite to get FIPS-certified ML-KEM hybrids into production before you have a FIPS-certified ML-KEM.",
          "createdAt": "2025-01-03T02:57:09Z",
          "updatedAt": "2025-01-03T02:59:57Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @ounsworth. I can update #95 to incorporate my suggestion. It won't affect your design goal of making this work for existing generated keys. This is only necessary for applications that require deterministic key generation, like HPKE. ",
          "createdAt": "2025-01-06T15:58:08Z",
          "updatedAt": "2025-01-06T15:58:08Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I find that #95 is a bit crowded, maybe it's better to wait until #99 and #100 are merged, and then start a new PR?\r\n\r\n\r\nIn particular, the thing about your #95 that I don't like is this:\r\n\r\n```\r\n  2. Expand the input keying material\r\n    expanded = SHAKE256(message=ikm, outlen=Nsk)\r\n\r\n  3. Derive component keys\r\n    (mlkemPK, mlkemSK) = ML-KEM.KeyGen_internal(expanded[0:32], expanded[32:64])\r\n    (tradPK, tradSK)   = Trad.KeyGen(expanded[64:])\r\n```\r\n\r\nI have a few problems with this:\r\n\r\n1.\r\nThat is explicitly disallowed by FIPS 203 -- it is very clear that the ML-KEM seed must be DIRECT output of an approved DRBG. If you do this, then you'll have something that walks&talks like ML-KEM, but it cannot be FIPS-certified as ML-KEM.\r\n\r\nHPKE is not my protocol, not my users, not my customers, so I don't officially have an opinion, but it seems wrong to claim that there are zero HPKE implementers in the world who care about having a FIPS-certified implementation of HKPE. Certainly in the PKI / LAMPS world we all care very much about national crypto standards (NIST, BSI, etc), so something that explicitly violates FIPS 203 cannot be in this draft.\r\n\r\n\r\n2.\r\n```\r\n(tradPK, tradSK)   = Trad.KeyGen(expanded[64:])\r\n```\r\n\r\nI understand that that's elegant for X25519, but I have never seen a P256 or RSA API that takes a seed. Forcing people to write new wrappers for their Trad component (which would force the code to go through FIPS evaluation again) is antithetical to the design goal of this draft; we want to use the Trad component in a completely black-box way.\r\n\r\nAlso, I imagine that the way this would have to work for RSA is that you use the seed `expanded[64:]` to seed your SecureRandom object, and then call RSA.keygen() with that SecureRandom instance. That means that the RSA key that you get will depend both on the seed value and on which SecureRandom implementation you use, so this is still under-specified if the goal is to have deterministic keygen from that seed.\r\n\r\n\r\nSo for both reasons, I thoroughly disagree with defining a 1-seed 2-priv-keys KeyGen() in this draft. That's X-Wing. That is in fact the only difference between Composite and X-Wing. It sounds like you actually want to be collaborating on draft-connolly-cfrg-xwing-kem because that shares your design goal.",
          "createdAt": "2025-01-06T19:23:34Z",
          "updatedAt": "2025-01-06T19:28:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth to point (2), HPKE _requires_ deterministic key generation. It's not an optional thing. If you're fundamentally opposed to deterministic key generation, then, yeah, we should just stop here. \ud83e\udd37 ",
          "createdAt": "2025-01-06T21:25:06Z",
          "updatedAt": "2025-01-06T21:25:06Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am not sure what the status of this is. @chris-wood do you still want to use this draft to cross-register these algs to the HPKE registry?\n\nI am going to close this issue for now, but we can re-open if we want to re-persue this.",
          "createdAt": "2025-03-01T23:37:53Z",
          "updatedAt": "2025-03-01T23:38:55Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOKRPFO86ll3hv",
      "title": "No composite is currently compatible with CNSA 2.0",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/102",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It just came to my attention (thanks Uri), that CNSA 2.0 allows SHA3 internally to ML-DSA / ML-KEM, but not as a standalone hash function (only SHA2-384 and SHA2-512). It also allows only the Level V parameter sets for ML-DSA and ML-KEM.\r\n\r\nThat means that we currently have zero CompositeML-KEM variants that are compatible with CNSA 2.0 because we use SHA3 as the KEM Combiner on the Level V\u2019s.\r\n\r\nhttps://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html#name-algorithm-identifiers\r\n\r\nI assume this is a problem we should fix by changing id-MLKEM1024-ECDH-P384 to use HKDF-SHA2-512 ?\r\n\r\nNSA\u2019s stance on hybrids is well known, but I think it\u2019s still preferrable that these exist at least one CompositeKEM that is compatible with CNSA 2.0, right?",
      "createdAt": "2025-01-09T15:43:10Z",
      "updatedAt": "2025-01-30T22:24:46Z",
      "closedAt": "2025-01-30T22:24:45Z",
      "comments": []
    },
    {
      "number": 108,
      "id": "I_kwDOKRPFO86o4P6V",
      "title": "We need samples / test vectors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/108",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Question: how do we do sample ciphertexts? Inside a CMS? Just raw ciphertexts? Probably raw ciphertexts.\n\nWe should mimic the format of the kyber-certificates draft.",
      "createdAt": "2025-02-05T15:47:31Z",
      "updatedAt": "2025-04-24T20:59:49Z",
      "closedAt": "2025-04-24T20:59:48Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done!",
          "createdAt": "2025-04-24T20:59:49Z",
          "updatedAt": "2025-04-24T20:59:49Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "I_kwDOKRPFO86sADll",
      "title": "Update private key structs to match the outcome of the SEEDs mess",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/109",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-27T21:59:32Z",
      "updatedAt": "2025-04-24T21:00:18Z",
      "closedAt": "2025-04-24T21:00:17Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #119 ",
          "createdAt": "2025-04-24T21:00:17Z",
          "updatedAt": "2025-04-24T21:00:17Z"
        }
      ]
    },
    {
      "number": 112,
      "id": "I_kwDOKRPFO86sQKVB",
      "title": "Add length encoding to handle variable length keys",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/112",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The private key format for ML_KEM can be a seed, and expanded format or both.  The Composite KEM draft at the moment only supports the seed format.   To better align with the ML-KEM drafts at IETF, we will add a 4-byte length tag to encode the length of the ML-KEM kem, so that it can be separated.\n",
      "createdAt": "2025-03-03T01:00:19Z",
      "updatedAt": "2025-03-03T16:00:06Z",
      "closedAt": "2025-03-03T16:00:05Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This was resolved in #113 ",
          "createdAt": "2025-03-03T16:00:05Z",
          "updatedAt": "2025-03-03T16:00:05Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOKRPFO86sXDr4",
      "title": "Add reference to component algorithm section in serialization methods to make it clear how the individual component keys should be encoded.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/114",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "Add reference to component algorithm section in serialization methods to make it clear how the individual component keys should be encoded.\n\n",
      "createdAt": "2025-03-03T16:31:35Z",
      "updatedAt": "2025-05-23T14:22:39Z",
      "closedAt": "2025-05-23T14:22:39Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@johngray-dev  I'll assign this one to you because I'm not fully sure what you have in mind.",
          "createdAt": "2025-04-27T13:20:52Z",
          "updatedAt": "2025-04-27T13:20:52Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This one is resolved by https://github.com/lamps-wg/draft-composite-kem/pull/137  which now specifies how the component algorithms (both traditional and ML-KEM) are encoded.",
          "createdAt": "2025-05-22T19:12:55Z",
          "updatedAt": "2025-05-22T19:12:55Z"
        }
      ]
    },
    {
      "number": 117,
      "id": "I_kwDOKRPFO86st39_",
      "title": "Clean up \"DER encoding\" sentences",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/117",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "We have instances of \"DER encoding\" in the document. Many of them do not make sense anymore since we removed the ASN.1 wrapper around public keys and signatures.\n\nGo through each one and see if it still makes sense.\n\nAlso, the entire section \"Encoding Rules\" probably does not need to exist anymore since we now explicitly lay out the byte encoding of the structure.",
      "createdAt": "2025-03-05T15:47:23Z",
      "updatedAt": "2025-05-23T14:22:39Z",
      "closedAt": "2025-05-23T14:22:39Z",
      "comments": []
    },
    {
      "number": 118,
      "id": "I_kwDOKRPFO86sucd2",
      "title": "Add KATs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/118",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "For Composite KEM, we should follow exactly the ACVP test vector format, which can be found here:\n\nhttps://github.com/usnistgov/ACVP-Server/blob/master/gen-val/json-files/ML-KEM-keyGen-FIPS203/expectedResults.json\nhttps://github.com/usnistgov/ACVP-Server/blob/master/gen-val/json-files/ML-KEM-encapDecap-FIPS203/expectedResults.json\n\nThat would mean that for each composite, we include a JSON blob like:\n\n~~~\n \"tests\": [\n        {\n          \"tcId\": \"id-MLKEM768-RSA2048\",\n          \"ek\": \"A1B2C3...\",\n          \"dk\": \"3CB2A1...\",\n          \"c\": \"5A9B...\",\n          \"k\": \"F91B8C7477A6005992EE947BB365EBF1CFE15688BD25DEEFAD54F90922B4B84C\"\n        },\n}\n~~~",
      "createdAt": "2025-03-05T16:48:52Z",
      "updatedAt": "2025-04-24T20:59:31Z",
      "closedAt": "2025-04-24T20:59:30Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done!",
          "createdAt": "2025-04-24T20:59:30Z",
          "updatedAt": "2025-04-24T20:59:30Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDOKRPFO86tCyn0",
      "title": "Composite private key encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/119",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "From the mailing list:\n\nhttps://mailarchive.ietf.org/arch/msg/spasm/04czobwhAH7Z0iLx00Ow4Y9MaHY/\n\n> have a sequence of octet string representing\n> the private key octet strings as they would appear in the single key\n> PrivateKeyInfo object. \n\nThis is what we intended to do in the IETF 122 drafts, but we missed updating the private key text. The format would be:\n\n> `CompositePrivateKey ::= OCTET STRING`\n> where that OCTET STRING is\n> `len(pqkey) || pqkey || tradkey`\n> and the pqkey, trad key are as they would appear in a single-key PrivateKeyInfo.privateKey or OneAsymmetricKey.privateKey. \n",
      "createdAt": "2025-03-07T14:45:10Z",
      "updatedAt": "2025-05-23T15:16:50Z",
      "closedAt": "2025-05-23T15:16:50Z",
      "comments": []
    },
    {
      "number": 120,
      "id": "I_kwDOKRPFO86ue0bm",
      "title": "Do a top-to-bottom consistency-check between -sigs and -kems",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/120",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "cleanup"
      ],
      "body": "Go through the two documents side-by-side and look for wording differences.",
      "createdAt": "2025-03-18T06:23:23Z",
      "updatedAt": "2025-06-12T17:32:35Z",
      "closedAt": "2025-06-12T17:32:35Z",
      "comments": []
    },
    {
      "number": 121,
      "id": "I_kwDOKRPFO86ue6Vw",
      "title": "Add the KDF back into the OID text name",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/121",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reasons: \n\n* in the future someone might need the same combination of algs, but with a different KDF. \n* Putting that in the OID name makes that non-ambiguous. It follows the same naming pattern as pre-hashed signature algorithms.",
      "createdAt": "2025-03-18T06:35:18Z",
      "updatedAt": "2025-04-29T15:33:30Z",
      "closedAt": "2025-04-29T15:33:29Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.",
          "createdAt": "2025-04-29T15:33:30Z",
          "updatedAt": "2025-04-29T15:33:30Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "I_kwDOKRPFO86vZEMK",
      "title": "We probably need to say something about compressed vs uncompressed points",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/122",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "I think the right thing is to allow anything that is in use today.\n\nSuggested text for the \"Promoting ECDH to a KEM\" section\n\n> In order to support maximum interoperability with already deployed code bases, producers MAY emit elliptic curve public keys (including KEM ciphertexts, which are EC public keys) as either compressed or uncompressed points. Parsers SHOULD accept either compressed or uncompressed EC public keys.\n\nNote: the same will apply to -sigs.",
      "createdAt": "2025-03-24T09:24:18Z",
      "updatedAt": "2025-05-23T15:16:51Z",
      "closedAt": "2025-05-23T15:16:51Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Allowing multiple valid encodings of the EC point. I wonder what that does to IND-CCA2 and EUF-CMA. That is literally the definition of ciphertext collisions. I guess that's a very good reason for binding the trad ct in the KEM combiner KDF1\n#cryptographyIsHard",
          "createdAt": "2025-03-24T09:53:50Z",
          "updatedAt": "2025-03-24T09:53:50Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TODO: align / simplify / de-duplicate with\n\n> [5. ](https://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html#section-5)[Composite Key Structures](https://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html#name-composite-key-structures)",
          "createdAt": "2025-04-30T14:25:20Z",
          "updatedAt": "2025-04-30T14:25:20Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "I_kwDOKRPFO86vbW5c",
      "title": "Add Implementation Consideration: \"Pick a small number to implement\"",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/123",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Add a new section in Implementation Considerations that it is NOT RECOMMENDED for anyone to implement all options.\n\nProposed text:\n\n># Implementation Considerations\n>## Profiling down the number of options\n>\n>One immediately daunting aspect of this specification is the number of composite algorithm combinations.\nEach option has been specified because there is a community that has a direct application for it; typically because the traditional component is already deployed in a change-managed environment, or because that specific traditional component is required for regulatory reasons.\n>\n>However, this large number of combinations leads either to fracturing of the ecosystem into non-interoperable sub-groups when different communities choose non-overlapping subsets to support, or on the other hand it leads to spreading development resources too thin when trying to support all options.\n>\n>This specification does not list any particular composite algorithm as mandatory-to-implement, however organizations that operate within specific application domains are encouraged to define profiles that select a small number of composites appropriate for that application domain.\nFor applications that do not have any regulatory requirements or legacy implementations to consider, it is RECOMMENDED to implement:\n> (Signatures)\n> * id-MLDSA65-ECDSA-P256\n>\n> (KEMs)\n> * id-MLKEM768-X25519-SHA3-256\n> * id-MLKEM768-ECDH-P256-HKDF-SHA256",
      "createdAt": "2025-03-24T12:57:52Z",
      "updatedAt": "2025-05-21T14:13:41Z",
      "closedAt": "2025-05-21T14:13:40Z",
      "comments": [
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "Limiting the number of recommended composite algorithms to a few is desirable. In my opinion, the proposed compositions will be sufficient for many typical applications. My company implements many PKI-based applications in the government sector, and although we are outside the US, NSA CNSA 2.0 guidelines are also required/desirable in Poland (I expect it is similar in other countries). Leaving OIDs containing MLDSA-87 and MLKEM-1024 in the documents in this context seems sufficient (even if they are not \"recommended\").",
          "createdAt": "2025-03-25T13:25:08Z",
          "updatedAt": "2025-03-25T13:25:08Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDOKRPFO86ws_yA",
      "title": "We currently have two FIPS Certification sections --> Merge them!",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/125",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "D.1. FIPS Certification\n\nD.1.1. FIPS certification of Combiner Function\n\nAlso, referencing a specific page number is a bad idea because IGs get updated and page numbers change.\n\n> [SP.800-56Cr2] section 4 \"One-Step Key Derivation\" requires a counter\n   which begins at the 4-byte value 0x00000001.  However, the counter is\n   allowed to be omitted when the hash function is executed only once,\n   as specified on page 159 of the FIPS 140-3 Implementation Guidance\n   [FIPS-140-3-IG].\n\n",
      "createdAt": "2025-04-01T21:12:02Z",
      "updatedAt": "2025-05-14T14:38:00Z",
      "closedAt": "2025-05-14T14:38:00Z",
      "comments": []
    },
    {
      "number": 126,
      "id": "I_kwDOKRPFO86w0v0I",
      "title": "Split out Use in CMS into its own I-D",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/126",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Reasoning: generating and cross-testing CMS test vectors will slow down this draft.",
      "createdAt": "2025-04-02T14:44:24Z",
      "updatedAt": "2025-04-17T20:43:54Z",
      "closedAt": "2025-04-17T20:43:54Z",
      "comments": []
    },
    {
      "number": 128,
      "id": "I_kwDOKRPFO86xoXuH",
      "title": "Clean up xml2rfc compile warnings",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/128",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Post-WGLC"
      ],
      "body": "",
      "createdAt": "2025-04-08T15:24:02Z",
      "updatedAt": "2025-06-12T17:32:35Z",
      "closedAt": "2025-06-12T17:32:35Z",
      "comments": []
    },
    {
      "number": 129,
      "id": "I_kwDOKRPFO86xvq8b",
      "title": "Proposals for changes in chapters 2-5, mainly concerning the serialization aspect",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/129",
      "state": "CLOSED",
      "author": "PiotrPopis",
      "authorAssociation": "NONE",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "The latest version has changed SEQUENCE to byte concatenation, hence in the case of BIT STRING you have to additionally convert to bytes. It should be noted that BIT STRING applies only to the public key of the traditional RSA-OAEP and ECDH algorithms, because the remaining elements of composite structures are encoded as bytes:\n\n![Image](https://github.com/user-attachments/assets/e0c93f05-5412-41c7-8f46-431226614f66)\n\nThe detailed proposal of changes is as follows:\n1.\tSection 2\n> Traditional cryptographic algorithms such as RSA-OAEP, ECDH and their elliptic curve variants are vulnerable to\n> quantum attacks. \n\nTraditional cryptographic algorithms such as RSA-OAEP, DH and their elliptic curve variants are vulnerable to quantum attacks. \n\nJustification: editorial.  \n\n2.\tSection 3\n> *  KeyGen() -> (pk, sk): A probabilistic key generation algorithm,\n>      which generates a public key pk and a secret key sk.\\\n \n*  KeyGen() -> (pk, sk): A probabilistic key generation algorithm,\n      which generates a public key pk and a secret key sk.\n\nJustification: editorial.  \n\n3.\tSection 3\n> We also borrow the following algorithms from [RFC9180], which deal\n>   with encoding and decoding of KEM public key values.\n \nWe also borrow the following algorithms from [RFC9180], which deal\nwith encoding and decoding of KEM public key values and KEM private key values, \nincluding [SECG] to define the conversion function.\n\nJustification: the conversion function must be defined.  \n\n4.\tSection 3\n> *  DeserializePublicKey(bytes) -> pk: Parse a byte string to recover\n>     a public key pk.  This function can fail if the input byte string\n>     is malformed.\n\n  *  DeserializePublicKey(bytes) -> pk: Parse a byte string to recover\n      a public key pk.  This function can fail if the input byte string\n      is malformed.\n\n   *  SerializePrivateKey(sk) -> bytes: Produce a byte string encoding\n      the private key sk.\n\n   *  DeserializePrivateKey(bytes) -> sk: Parse a byte string to recover\n      a private key sk.  This function can fail if the input byte string\n      is malformed.\n\nJustification:  also adding serialization/deserialization of private keys\n5.\tSection 3\n> deseralize\n\ndeserialize\n\n> CompositeCiphertextValue\n\nCompositeCipherTextValue  \n\nJustification: for consistency with the other parts of the document; also applies to occurrences in other places\n\n> SerializeCiphertextValue\nSerializeCipherTextValue  \n\nJustification: for consistency with the other parts of the document; also applies to occurrences in other places.  \n\n6.\tSection 4.1\n> 2. Check for component key gen failure \n\n> \"ML-KEM-65\"\n\n2. Check for component key generation failure \n\n\"ML-KEM-768\"\n\nJustification: editorial.  \n\n> (\u2026) for example, could be \"ML-KEM-768\"\n\n(\u2026) for example \"ML-KEM-768\"\n\nJustification: for consistency with the other parts of the document; also applies to Section 4.2, 4.3, 4.4 and 4.6.  \n\n7.\tSection 4.2\n> (mlkemCT, mlkemSS) = MLKEM.Encaps(mlkemPK) \n\n(mlkemCT, mlkemSS) = ML-KEM.Encaps(mlkemPK)\n\nJustification: editorial.  \n\n8.\tSection 4.3\n> mlkemSS = MLKEM.Decaps(mlkemSK, mlkemCT) \n\nmlkemSS = ML-KEM.Decaps(mlkemSK, mlkemCT)\n\nJustification: editorial.  \n\n9.\tSection 4.4\n> 4.4.  SerializePublicKey and DeserializePublicKey\n>\n> Each component KEM public key is serialized according to its respective\n> standard as shown in Appendix B and concatenated together using a fixed\n> 4-byte length field denoting the length in bytes of the first component\n> key, as defined below. \n\n4.4.  SerializePublicKey and DeserializePublicKey\n\nEach component KEM public key is serialized according to its\n   respective standard as shown in Appendix B and concatenated together\n   using a fixed 4-byte length field denoting the length in bytes of the\n   first component key, as defined below.\nIn the case of DHKEM, serialization and deserialization of the public keys is performed according to the Section 7.1.1 [RFC9180], which is repeated here for convenience.\nFor P-256 and P-384 the SerializePublicKey() function of the KEM performs the uncompressed Elliptic-Curve-Point-to-Octet-String conversion according to [[SECG](https://www.rfc-editor.org/rfc/rfc9180.html#SECG)]. DeserializePublicKey() performs the uncompressed Octet-String-to-Elliptic-Curve-Point conversion.\nFor X25519 and X448, the SerializePublicKey() and DeserializePublicKey() functions are the identity function, since these curves already use fixed-length byte strings for public keys.\n\nIn the case of ML-KEM the SerializePublicKey() and DeserializePublicKey() functions are the identity function, since according to the Section 3 [I-D.ietf-lamps-kyber-certificates] ML-KEM-PublicKey is coded as OCTED STRING so no additional encoding of the ML-KEM public key value is applied.\n\nIn the case of RSA-OAEP tbd.\n\nJustification: you need to indicate how the conversion is performed.  \n\n10.\tSection 4.4\n>  3. Calculate the length encoding of the mlkemEncodedPK \n>\n> If (mlkemEncodedPK.length) > 2^32\n>         then output \"message too long\" and stop.\n>\n>     encodedLength = IntegerToBytes(mlkemEncodedPK.length, 4)\n\n  3. Calculate the length of the mlkemPK \n\nIf (mlkemPK.length) > 2^32\n         then output \"message too long\" and stop.\n\n     encodedLength = IntegerToBytes(mlkemPK.length, 4)\n\nApplications MAY verify the mlkemPK length according to the Table 1:\n\nIf (mlkemPK.length) \u2260 1184 (ML-KEM-768) or (mlkemPK.length) \u2260 1568 (ML-KEM-1024) \n      then output \"wrong length of mlkem PK\" and stop.\n\n11.\tSection 4.4\n>  1. Validate the length of the the input byte string\n\n1.\tValidate the length of the input byte string\n\n12.\tSection 4.4\n>  (\u2026) as shown in the component algorithm appendix.\n\n  (\u2026) as shown in the component algorithm in Appendix B.\n\n13.\tSection 4.5\n>  The same serialization and deserialization process as described in\n>   Section 4.4 should be used to serialize and deserialize the private\n>   keys.  The only difference is that pk is the private key, and the\n>   output is the concatenation of the mlkem and traditional private keys\n>   for serialization, or the mlkem and traditional private keys for\n>   deserialization.\n\nIn the case of DHKEM, serialization and deserialization of the private keys is performed according to the Section 7.1.2 [RFC9180], which is repeated here for convenience.\nFor P-256 and P-384, the SerializePrivateKey() function of the KEM performs the Field-Element-to-Octet-String conversion according to [SECG]. If the private key is an integer outside the range [0, order-1], where order is the order of the curve being used, the private key MUST be reduced to its representative in [0, order-1] before being serialized. DeserializePrivateKey() performs the Octet-String-to-Field-Element conversion according to [SECG].\nFor X25519 and X448, private keys are identical to their byte string representation, so little processing has to be done. The SerializePrivateKey() function MUST clamp its output and the DeserializePrivateKey() function MUST clamp its input, where clamping refers to the bitwise operations performed on k in the decodeScalar25519() and decodeScalar448() functions defined in Section 5 of [RFC7748].\n\nIn the case of ML-KEM the SerializePrivateKey() and DeserializePrivateKey() functions are the identity function, since according to the Section 3 [I-D.ietf-lamps-kyber-certificates] ML-KEM-PrivateKey is coded as OCTED STRING so no additional encoding of the ML-KEM private key value is applied.\n\nIn the case of RSA-OAEP tbd.\n\nExcept for the above the same serialization and deserialization process as described in Section 4.4 should be used to serialize and deserialize the private keys.\n\n14.\tSection 4.6\n>  4.6.  SerializeCiphertextValue and DeSerializeCiphertextValue\n>\n>   Each Ciphertext component of CompositeCiphertextValue is serialized\n>   according to their respective standard as shown in Appendix B and\n>   concatenated together using a fixed 4-byte length field denoting the\n>   length in bytes of the first component signature, as shown below.\n>   For the Traditional component, the CipherText is the encrypted value\n>   'enc' as described in Section 3.1 or Section 3.2 depending on the\n>   chosen component algorithm.\n>\n> Composite-ML-DSA.SerializeCiphertextValue(CompositeCiphertextValue) ->\n> bytes\n>\n> Explicit Input:\n>\n>  CompositeCiphertextValue    The Composite CipherText Value obtained from Composite-ML-KEM.Encap(pk)\n\n4.6.  SerializeCipherTextValue and DeSerializeCipherTextValue\n\nThe ML-KEM ciphertext, as well as the RSA-OAEP algorithm ciphertext are encoded as OCTET STRING hence no serialization (conversion to byte string) is needed and formally we use the identity function for serialization and deserialization. However, the DHKEM algorithm ciphertext (Section 3.2) is the sender's ephemeral public key, encoded as BIT STRING in the case of ECDH hence it must be serialized according to the Section 4.4. Note a raw Edwards public key according to [RFC8410] contains the byte stream so serialization is not needed in that case and formally we use the identity function for serialization and deserialization X25519 and X448 public key (see Section 4.4).  \n\nTaking the above into account each Ciphertext component of CompositeCiphertTextValue is serialized according to their respective standard as shown in Appendix B and concatenated together using a fixed 4-byte length field denoting the length in bytes of the first component signature, as shown below.\nFor the Traditional component, the CipherText is the encrypted value 'enc' as described in Section 3.1 or Section 3.2 depending on the chosen component algorithm.\n\nComposite-ML-KEM.SerializeCipherTextValue(CompositeCipherTextValue) -> bytes\n\nExplicit Input:\n\n  CompositeCipherTextValue    The Composite CipherText Value obtained from Composite-ML-KEM.Encap(pk)\n\nJustification: clarification of serialization aspects and replacement of DSA with KEM.\n  \n15.\tSection 4.6\n>  Serialization Process:\n>\n>  1. Separate the cipher texts\n>\n>     (mldkemct, tradkemct) = CompositeCiphertextValue\n>\n>  2. Serialize each of the constituent cipher texts\n> The component cipher texts are serialized according to their\n> respective standard as shown in the component algorithm appendix.  For\n> the tradkemEncodedCT the ciphertext is the encrypted output as defined in\n> 'Promotion of RSA-OAEP into a KEM' or 'Promotion of ECDH into a KEM'.\n>\n>     mlkemEncodedCt = ML-KEM.SerializeCiphertext(mlkemct)\n>     tradkemEncodedCT = Trad.SerializeCiphertext(tradkemct)\n>\n>  3. Calculate the length encoding of the mlkemEncodedCt\n>\n>     If (mlkemEncodedCt.length) > 2^32\n>         then output \"message too long\" and stop.\n>\n>     encodedLength = IntegerToBytes(mlkemEncodedCt.length, 4)\n>\n>  4. Combine and output the encoded composite ciphertext\n>\n>     bytes = encodedLength || mlkemEncodedCt || tradkemEncodedCT\n>     output bytes\n>\n>                         Figure 6: Composite\n>          SerializeCiphertextValue(CompositeCiphertextValue)\n\nSerialization Process:\n\n  1. Separate the cipher texts\n\n     (mlkemCT, tradCT) = CompositeCipherTextValue\n\n  2. Serialize each of the constituent cipher texts\n       The component cipher texts are serialized according to their respective standard\n       as shown in the component algorithm in Appendix B.  For the tradkemEncodedCT the\n       ciphertext is the encrypted output as defined in 'Promotion of RSA-OAEP into a KEM'\n       or 'Promotion of ECDH into a KEM'(i.e. sender\u2019s ephemeral public key).\n\n     mlkemEncodedCT = ML-KEM.SerializeCiphertext(mlkemCT)\n     tradkemEncodedCT = Trad.SerializeCiphertext(tradCT)\n\n  3. Calculate the length encoding of the mlkemEncodedCT\n\n     If (mlkemEncodedCT.length) > 2^32\n         then output \"message too long\" and stop.\n\n     encodedLength = IntegerToBytes(mlkemEncodedCt.length, 4)\n\nApplications MAY verify the mlkemCT length according to the Table 1:\nIf (mlkemCT.length) \u2260 1088 (ML-KEM-768) or (mlkemCT.length) \u2260 1568 (ML-KEM-1024)\n         then output \"wrong length of mlkem CT\" and stop.\n\n\n  4. Combine and output the encoded composite ciphertext\n       bytes = encodedLength || mlkemEncodedCT || tradkemEncodedCT\n     output bytes\n\n                         Figure 6: Composite\n          SerializeCipherTextValue(CompositeCipherTextValue)\n\n16.\tSection 4.6\n>  Output:\n>\n>  CompositeCiphertextValue  The CompositeCiphertextValue\n>\n> Deserialization Process:\n>\n>  1. Validate the length of the the input byte string\n\nOutput:\n\n  CompositeCipherTextValue  The CompositeCipherTextValue\n\nDeserialization Process:\n\n  1. Validate the length of the input byte string\n\n17.\tSection 4.6\n>  3. Deserialize the constituent cipher text values\n>\n>     mlkemCt = ML-KEM.DeserializeCiphertext(mlkemEncodedCt)\n>     tradkemCt = Trad.DeserializeCiphertext(tradkemEncodedCt)\n>\n>  4. If either ML-KEM.DeserializeCiphertext() or\n>     Trad.DeserializeCiphertext() return an error,\n>     then this process must return an error.\n>\n>      if NOT mlkemCt or NOT tradkemCt:\n>        output \"Deserialization error\"\n>\n>  5. Output the CompositeCiphertextValue\n>\n>     output (mlkemCt, tradkemCt)\n\n3. Deserialize the constituent cipher text values\n\n     mlkemCT = ML-KEM.DeserializeCiphertext(mlkemEncodedCT)\n     tradCT = Trad.DeserializeCiphertext(tradkemEncodedCT)\n\n  4. If either ML-KEM.DeserializeCiphertext() or\n     Trad.DeserializeCiphertext() return an error,\n     then this process must return an error.\n\n      if NOT mlkemCT or NOT tradCT:\n        output \"Deserialization error\"\n\n  5. Output the CompositeCipherTextValue\n\n     output (mlkemCT, tradCT)\n\n18.\tSection 4.7\n>  propertly \n\nproperly\n\n19.\tSection 4.7\n>  The following table shows the fixed length values in bytes\n> for the public, private and cipher text sizes for ML-KEM which can be\n> used to deserialzie the components. \n\nThe following table shows the fixed and possible length values in bytes for the public, private and cipher text sizes for ML-KEM which can be used to deserialize the components.\n\n20.\tSection 5\n\nI have a problem interpreting this entire Section. Since the latest version of the document has changed the SEQUENCE of two elements to a concatenation of two byte elements, adding the length in bytes of the first element (related to the ML-KEM algorithm), it seems that such a \"serialized\" form will be used in other ASN structures, e.g. in X.509 certificates. However, in this chapter, e.g. CompositeKEMPublicKey appears, which element has not appeared anywhere before. Wouldn't it be more reasonable to introduce CompositeSerializeKEMPublicKey, which would be defined as an OCTET STRING, but without additional conversions when used in the SubjectPublicKeyInfo.subjectPublicKey field, similarly to [draft-kyber-certificates]?",
      "createdAt": "2025-04-09T08:51:22Z",
      "updatedAt": "2025-05-29T17:27:27Z",
      "closedAt": "2025-05-29T17:27:27Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @PiotrPopis ,\n\nI am finally getting to this feedback. \n\nAbout this suggestion:\n\n>  Section 3\n>\n>>    We also borrow the following algorithms from [RFC9180], which deal\n>>   with encoding and decoding of KEM public key values.\n>\n> We also borrow the following algorithms from [RFC9180], which deal\nwith encoding and decoding of KEM public key values and KEM private key values,\nincluding [SECG] to define the conversion function.\n>\n> Justification: the conversion function must be defined.\n\nI don't know what that means. Can you explain further? What conversion function? We don't have a [SECG] in our references. I am aware of www.secg.org, but that's a website not a document. I don't know what to do with this comment.\n\n",
          "createdAt": "2025-05-21T01:48:13Z",
          "updatedAt": "2025-05-21T01:50:36Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "According to draft-ietf-lamps-pq-composite-kem-06, the serialization and deserialization aspect should be compliant with RFC 9180 \u2013 see chapter 3: \"(\u2026) We also borrow the following algorithms from [RFC9180], which deal with encoding and decoding of KEM public key values.\". \n\nMy proposal clarifies that in addition to serialization/deserialization of public keys according to RFC 9180, we should also indicate serialization/deserialization of private keys, according to RFC 9180 also. \n\nAt the same time, in chapter 7.1.1 RFC 9180 serialization/deserialization mechanism for ECC public keys is:\na) P-256, P-384 and P-521 - Elliptic-Curve-Point-to-Octet-String conversion (for serialization) and uncompressed Octet-String-to-Elliptic-Curve-Point conversion (for deserialization) according to [SECG]; \nb) X25519 and X448 \u2013 identity function. \n\nIn turn, in chap. 7.1.2 RFC 9180 ECC private key serialization/deserialization mechanism is: \na) P-256, P-384 and P-521 - Field-Element-to-Octet-String conversion (for serialization) and Octet-String-to-Field-Element conversion (for deserialization) according to [SECG]; \nb) X25519 and X448, private keys are identical to their byte string representation, so little processing has to be done. The SerializePrivateKey() function MUST clamp its output and the DeserializePrivateKey() function MUST clamp its input, where _clamping_ refers to the bitwise operations performed on k in the decodeScalar25519() and decodeScalar448() functions defined in Section 5 of [RFC7748]. \nI omitted aspect _clamping_ because I wasn't sure whether such changes would be allowed by the authors at all, but it's probably worth taking a look at.\n\nAs for [SECG], it is the document \"SEC 1: Elliptic Curve Cryptography,\" Version 2, May 2009, <https://secg.org/sec1-v2.pdf>\n",
          "createdAt": "2025-05-21T08:20:36Z",
          "updatedAt": "2025-05-21T08:20:36Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@PiotrPopis Thanks.\n\n> we should also indicate serialization/deserialization of private keys,\n\nOh. I had actually missed that you added \"private keys\" to that paragraph. In the future, it might be simpler for both of us if you submitted pull requests rather than long comments like this.\n\n\nI see.\n\nI am hoping that we don't need to get into the detail of how each component algorithm serializes itself, but I understand your comment now and I will think about it. Certainly we do not want to require a single encoding of an underlying component that might cause compatibility issues with some existing traditional implementations. The authors have discussed this recently and we have cleaned up some text around that in a different pull request.",
          "createdAt": "2025-05-21T13:40:20Z",
          "updatedAt": "2025-05-21T13:41:36Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@PiotrPopis \n\nDiscussed with authors ... we have made a few decisions on how to handle encodings of the underlying traditional components:\n\n1. We should directly reference only RFCs for the underlying components, and only indirectly reference the [SEC#] standards.\n1. Any RSA or ECC encoding that is allowed by a PKIX RFC should still be allowed in composite, but we should RECOMMEND the most common one. In effect, we decided that one of the primary design goals of composite is to be a stepping-stone to deploy ML-DSA / ML-KEM quickly on top of existing RSA or ECC deployments, and so it is unacceptable to have, for example, an embedded RSA implementation that cannot be changed that produces private keys in the CRT format, and you cannot use this with Composite. (Note: one exception to this is RSA-PKCS#1v1.5 encryption which we know is still very common, but is already disallowed by NIST). To this effect, we are ok to leave in the risk of two composite implementations being incompatible because they cannot parse each other's traditional component.\n\nWe have changes to make his clearer another PR #137 for KEMs and https://github.com/lamps-wg/draft-composite-sigs/pull/154 for SIGS, and those links to other github issues with the relevant discussion.\n\n\nHere is the proposed new text that we feel strikes the right balance between being clear and precise, but also still allowing any existing encoding to continue being used.\n\nhttps://github.com/lamps-wg/draft-composite-kem/pull/137/files#diff-7b3ea5108ab106290ae79a3c40838aba0cf1228868deb9863aabd5b3acab21eeR722\n\nSo my question is: while this is different than what you propose, can you live with this?",
          "createdAt": "2025-05-21T14:47:35Z",
          "updatedAt": "2025-05-21T14:53:12Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "1. _We should directly reference only RFCs for the underlying components, and only indirectly reference the [SEC#] standards._ \nOK \n\n2. _Any RSA or ECC encoding that is allowed by a PKIX RFC should still be allowed in composite, but we should RECOMMEND the most common one._ \nI understand that this is about the new content in the Serialization {#sec-serialization} chapter, regarding component encodings: ML-KEM, RSA, ECDH and X25519/X448, and in my opinion it is OK. \n\n3. (\u2026) _To this effect, we are ok to leave in the risk of two composite implementations being incompatible because they cannot parse each other's traditional component._ \nIt seems that these new provisions regarding encodings of the underlying components are precise enough that the risk of lack of interoperability is at an acceptably low level. \n\n4. I understand that references to Appendix B have been abandoned in the context of specifying serialization (version 06, e.g. the first sentence in chapter 4.4 _Each component KEM public key is serialized according to its respective standard as shown in Appendix B_ (...)), \nwhich is a good solution in my opinion; and now serialization (conversion to byte form) is left without indicating specific functions (e.g. chapter 7.1 RFC 9180), and only the method of encoding keys and ciphertext is specified quite precisely.\n\n5. If I understand this new approach correctly, then - for example - when we use RSA as a traditional component and according to CompositeKEMPublicKey {#sec-composite-pub-keys} Section: \n      CompositeKEMPublicKey ::= BIT STRING \nIn the X.509 certificate, in the SubjectPublicKeyInfo field (encoded as BIT STRING) we place the concatenation: the ML-KEM public key saved as a **byte stream** and the RSA public key as a **bit stream**. \nIf the above is OK, maybe such an example should be added to the document?\n",
          "createdAt": "2025-05-22T10:43:47Z",
          "updatedAt": "2025-05-22T10:43:47Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@PiotrPopis I am happy that you agree with this approach.\n\nAbout your (5.):\nIn a PR that we merged this week, we have removed the definition of \n\n    CompositeKEMPublicKey ::= BIT STRING\n\nbecause in fact now we can make the draft simpler. Instead we only have the direct byte encodings, and we have re-organized existing text into a \"Use in X.509\" section that tells you how to put these bytes into a DER BIT STRING or OCTET STRING.\n\nhttps://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html#name-use-within-x509-and-pkix\n\nAre you also happy with this? There are complete test vectors included in the draft now. Do you think it needs further examples?",
          "createdAt": "2025-05-24T22:05:29Z",
          "updatedAt": "2025-05-24T22:06:27Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe that all comments 10 - 20 have either already been caught and fixed in other pull requests, or they no longer apply because we have re-written the relevant section. So I believe everything is addressed.",
          "createdAt": "2025-05-25T01:28:58Z",
          "updatedAt": "2025-05-25T01:28:58Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "@ounsworth \nVersion 07 seems to be OK; it's much better than 06 :)\nI have two editorial comments:\n1. Instead of \"tradKey\" in my opinion it should be \"tradPK\" or \"tradSK\", i.e.:\na) Section 5.1\n> Figure 4: SerializePublicKey(mlkemKey, tradKey) -> bytes\n\nFigure 4: SerializePublicKey(mlkemKey, tradPK) -> bytes\n\nb) Section 5.2\n> output mlkemSeed || tradKey\n\noutput mlkemSeed || tradSK\n\n2. Section 6.3 has \"CompositeKEMPrivateKey\", which is not mentioned earlier.\nI suggest adding in Section 5.2 a clarification that as a result of serialization of private keys we get \"CompositeKEMPrivateKey\", i.e. e.g.\n> Serialization Process:\n> 1. Combine and output the encoded private key\n> output mlkemSeed || tradKey\n\nSerialization Process:\n1. Combine and output the encoded private key\noutput: CompositeKEMPrivateKey = mlkemSeed || tradSK\n\nand\n> Deserialization Process:\n> (...)\n> mlkemSeed = bytes[:64]\n> tradSK = bytes[64:]\n\nDeserialization Process:\n(...)\nmlkemSeed = CompositeKEMPrivateKey [:64]\ntradSK = CompositeKEMPrivateKey [64:]\n\nif such a change concerning \"CompositeKEMPrivateKey\" were accepted by the authors, it would be worth introducing an analogous one for public keys, i.e. adding \"CompositeKEMPublicKey\" in chapters 5.1 and 6.1, especially since the concept of \"CompositeKEMPublicKey\" appears in the document, but only once in Appendix C.",
          "createdAt": "2025-05-26T10:36:08Z",
          "updatedAt": "2025-05-26T10:36:08Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "@ounsworth \nI have an additional note regarding Section 5 of version 07 and the encoding aspect of the traditional element:\n> ECDH: MUST be encoded as an ECPoint as specified in section 2.2 of \n> [RFC5480], with both compressed and uncompressed keys supported. For \n> maximum interoperability, it is RECOMMENEDED to use uncompressed points.\n\nECDH: **public key** MUST be encoded as an ECPoint as specified in section 2.2 \nof [RFC5480], with both compressed and uncompressed keys supported. For \nmaximum interoperability, it is RECOMMENED to use uncompressed points.\n\nJustification: adding the clarification that this is a public key seems necessary, as the section contains information about public key, private key, and ciphertext.\n\n> X25519 and X448: MUST be encoded as per section 3.1 of [RFC7748] and section 4 of [RFC8410].\n\nThis point needs to be improved: (1) there is no section 3.1 in RFC 7748 at all, and (2) in section 4 of RFC 8410 there is the following information:\n_Both [RFC7748] and [RFC8032] define the public key value as being a byte string. It should be noted that the public key is computed differently for each of these documents; thus, the same private key will not produce the same public key._\nMaybe the authors mean section 3.1 of RFC 8032?; however, then an explanation regarding EdDSA and X25519/X448 should be added?",
          "createdAt": "2025-05-27T10:41:56Z",
          "updatedAt": "2025-05-27T10:51:40Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> > Figure 4: SerializePublicKey(mlkemKey, tradKey) -> bytes\n> \n> Figure 4: SerializePublicKey(mlkemKey, tradPK) -> bytes\n\nAlready fixed by another PR.\n\n \n> b) Section 5.2\n> \n> > output mlkemSeed || tradKey\n> \n> output mlkemSeed || tradSK\n\nDone.\n\n> \n>     2. Section 6.3 has \"CompositeKEMPrivateKey\", which is not mentioned earlier.\n>        I suggest adding in Section 5.2 a clarification that as a result of serialization of private keys we get \"CompositeKEMPrivateKey\", i.e. e.g.\n> \n> \n> > Serialization Process:\n> > \n> > 1. Combine and output the encoded private key\n> >    output mlkemSeed || tradKey\n> \n> Serialization Process:\n> \n>     1. Combine and output the encoded private key\n>        output: CompositeKEMPrivateKey = mlkemSeed || tradSK\n> \n> \n> and\n> \n> > Deserialization Process:\n> > (...)\n> > mlkemSeed = bytes[:64]\n> > tradSK = bytes[64:]\n> \n> Deserialization Process: (...) mlkemSeed = CompositeKEMPrivateKey [:64] tradSK = CompositeKEMPrivateKey [64:]\n> \n> if such a change concerning \"CompositeKEMPrivateKey\" were accepted by the authors, it would be worth introducing an analogous one for public keys, i.e. adding \"CompositeKEMPublicKey\" in chapters 5.1 and 6.1, especially since the concept of \"CompositeKEMPublicKey\" appears in the document, but only once in Appendix C.\n\nThe term \"CompositeKEMPrivateKey\" is not used there anymore since we switched to encode the composites directly to a byte array.\nI also removed the last to mentions in other sections.",
          "createdAt": "2025-05-27T13:52:31Z",
          "updatedAt": "2025-05-27T14:46:15Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> [@ounsworth](https://github.com/ounsworth) I have an additional note regarding Section 5 of version 07 and the encoding aspect of the traditional element:\n> \n> > ECDH: MUST be encoded as an ECPoint as specified in section 2.2 of\n> > [RFC5480], with both compressed and uncompressed keys supported. For\n> > maximum interoperability, it is RECOMMENEDED to use uncompressed points.\n> \n> ECDH: **public key** MUST be encoded as an ECPoint as specified in section 2.2 of [RFC5480], with both compressed and uncompressed keys supported. For maximum interoperability, it is RECOMMENED to use uncompressed points.\n> \n> Justification: adding the clarification that this is a public key seems necessary, as the section contains information about public key, private key, and ciphertext.\n\nDone.",
          "createdAt": "2025-05-27T13:55:35Z",
          "updatedAt": "2025-05-27T13:55:35Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> > X25519 and X448: MUST be encoded as per section 3.1 of [RFC7748] and section 4 of [RFC8410].\n> \n> This point needs to be improved: (1) there is no section 3.1 in RFC 7748 at all, and (2) in section 4 of RFC 8410 there is the following information: _Both [RFC7748] and [RFC8032] define the public key value as being a byte string. It should be noted that the public key is computed differently for each of these documents; thus, the same private key will not produce the same public key._ Maybe the authors mean section 3.1 of RFC 8032?; however, then an explanation regarding EdDSA and X25519/X448 should be added?\n\nThis was a mistake, we wanted to reference RFC 8032 instead of 7748. \n\n@ounsworth @johngray-dev I wonder if we need the reference to RFC 8410 at all since it only is the X.509 wrapper and we now need the raw byte string which is defined by RFC 8082.",
          "createdAt": "2025-05-27T14:06:26Z",
          "updatedAt": "2025-05-27T14:20:14Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "@ounsworth @johngray-dev another question: in (de)serialization we always talk about mlkemSeed, while in KeyGen() and Decap(..) we use mlkemSK. Should the latter be changed to mlkemSeed also? At least there should be a note for KeyGen() that it produces seeds?",
          "createdAt": "2025-05-27T14:55:14Z",
          "updatedAt": "2025-05-27T14:55:14Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should make it more generic and always use the pk form....   In sigs I added an init() method... For ML-KEM or ML-DSA the init() could call the keygen (to expand the seed) for example, or for traditional algorithms it would do nothing.     I'm just working on https://github.com/lamps-wg/draft-composite-sigs/pull/175  which I'll show you tomorrow at our meeting.    Our main algorithm table has been generic forever.. It uses Algorithm1 and Algorithm2 so I tried to follow that logic in the algorithm definitions as well, I think it can work.\r\n\r\nJohn Gray\r\n\r\n\r\n\r\n________________________________\r\nFrom: janklaussner ***@***.***>\r\nSent: Tuesday, May 27, 2025 10:55 AM\r\nTo: lamps-wg/draft-composite-kem ***@***.***>\r\nCc: John Gray ***@***.***>; Mention ***@***.***>\r\nSubject: [EXTERNAL] Re: [lamps-wg/draft-composite-kem] Proposals for changes in chapters 2-5, mainly concerning the serialization aspect (Issue #129)\r\n\r\nWARNING: This email originated outside of Entrust.\r\nDO NOT CLICK links or attachments unless you trust the sender and know the content is safe.\r\n\r\n[https://outlook.office.com/mail/inbox/id/AAMkAGY2MGRlNDIyLTg1NzgtNGI2Yy04ZDQzLWMxNzFlY2M3ZjJhMABGAAAAAABiwzyK79aWRp%2BDL5sGGddfBwC7JJVu2YWASYq4ZU6QGWZ2AAAAAAEMAAAMURFJPhOjQbAZSOB6%2FsYFAAVT7QeOAAA%3D?nativeVersion=1.2025.516.400]janklaussner left a comment (lamps-wg/draft-composite-kem#129)<https://urldefense.com/v3/__https://github.com/lamps-wg/draft-composite-kem/issues/129*issuecomment-2912835479__;Iw!!FJ-Y8qCqXTj2!e8ZEQJqUT9QsoQZfL-wkHmQoEj26HlaC4YX0uimCWGA8hnNKpdRIA8Mea7IBvFzSrDtqMAo6A8AKoT1xJZPsr98iiA$>\r\n\r\n@ounsworth<https://urldefense.com/v3/__https://github.com/ounsworth__;!!FJ-Y8qCqXTj2!e8ZEQJqUT9QsoQZfL-wkHmQoEj26HlaC4YX0uimCWGA8hnNKpdRIA8Mea7IBvFzSrDtqMAo6A8AKoT1xJZN2zusiyw$> @johngray-dev<https://urldefense.com/v3/__https://github.com/johngray-dev__;!!FJ-Y8qCqXTj2!e8ZEQJqUT9QsoQZfL-wkHmQoEj26HlaC4YX0uimCWGA8hnNKpdRIA8Mea7IBvFzSrDtqMAo6A8AKoT1xJZPHsQZfiA$> another question: in (de)serialization we always talk about mlkemSeed, while in KeyGen() and Decap(..) we use mlkemSK. Should the latter be changed to mlkemSeed also? At least there should be a note for KeyGen() that it produces seeds?\r\n\r\n\u2014\r\nReply to this email directly, view it on GitHub<https://urldefense.com/v3/__https://github.com/lamps-wg/draft-composite-kem/issues/129*issuecomment-2912835479__;Iw!!FJ-Y8qCqXTj2!e8ZEQJqUT9QsoQZfL-wkHmQoEj26HlaC4YX0uimCWGA8hnNKpdRIA8Mea7IBvFzSrDtqMAo6A8AKoT1xJZPsr98iiA$>, or unsubscribe<https://urldefense.com/v3/__https://github.com/notifications/unsubscribe-auth/ANFGAWJ7WFOP2ADS4SWLX233AR4GTAVCNFSM6AAAAAB2YLW7UWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDSMJSHAZTKNBXHE__;!!FJ-Y8qCqXTj2!e8ZEQJqUT9QsoQZfL-wkHmQoEj26HlaC4YX0uimCWGA8hnNKpdRIA8Mea7IBvFzSrDtqMAo6A8AKoT1xJZNuWlUpcQ$>.\r\nYou are receiving this because you were mentioned.\r\n\r\nAny email and files/attachments transmitted with it are intended solely for the use of the individual or entity to whom they are addressed. If this message has been sent to you in error, you must not copy, distribute or disclose of the information it contains. Please notify Entrust immediately and delete the message from your system.\r\n\r\n",
          "createdAt": "2025-05-27T15:04:04Z",
          "updatedAt": "2025-05-27T15:04:04Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "@ounsworth @janklaussner \nI have a problem with the provisions concerning KEM Combiner and I ask the authors for a comment or possible changes.\n\n1. As for chapter D.1.1, in my opinion it is OK, in the sense that it contains provisions consistent with SP-800-227ipd.\n\n2. At the same time, equation 13 of 227 is repeated in D.1.1, but in chapter 4.4 (and thus also in 4.2 and 4.3) the \"Expand\" function is omitted when KDF is HKDF.\n\n3. In chapter 4.4 it is mentioned that _many cryptographic libraries provide only a combined interface for HKDF and do not expose HKDF-Extract() and HKDF-Expand() separately_, but this remark should not mean that HKDF-Expand() can be omitted at all?\n\n4. In chapter 4.4 there is a mention of the info parameter, which (I think) according to version 07 should be a zero-length string according to chapter 2.3 of RFC 5869 (the wording \"empty\"). \n \n5. In my opinion, in chapter 4 the notation consistent with equation 13 should be used and the values \u200b\u200bof the info parameter should be specified. Am I right?",
          "createdAt": "2025-05-28T10:12:50Z",
          "updatedAt": "2025-05-29T05:18:41Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Re-opening - looks like Piotr has asked more questions just a few hours before we reviewed the changes.  ",
          "createdAt": "2025-05-28T19:43:19Z",
          "updatedAt": "2025-05-28T19:43:19Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for pointing that out John!\nFor easier tracking, I am splitting Piotr's most recent comments into its own Issue #153 so that I can re-close this one.",
          "createdAt": "2025-05-29T17:27:24Z",
          "updatedAt": "2025-05-29T17:27:24Z"
        }
      ]
    },
    {
      "number": 130,
      "id": "I_kwDOKRPFO86yGY8a",
      "title": "Update comparison with version 1.2.1 of ETSI CatKDF",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/130",
      "state": "CLOSED",
      "author": "jiep",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "ETSI recently released version 1.2.1 of [ETSI TS 103 744](https://www.etsi.org/deliver/etsi_ts/103700_103799/103744/01.02.01_60/ts_103744v010201p.pdf), which includes new KDFs such as KMAC and HMAC. It also defines different context formatting functions depending on the KDF selected. Namely, concatenate-and-hash-based context formatting function (`cb_f`) for HKDF and HMAC, and concatenate-based context formatting function (`cahb_f`) for KMAC.\n\n<img width=\"453\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/e56b639f-e69d-4abf-8a35-9c5ca9117484\" />\n\n",
      "createdAt": "2025-04-11T08:55:47Z",
      "updatedAt": "2025-05-14T14:31:31Z",
      "closedAt": "2025-05-14T14:31:31Z",
      "comments": []
    },
    {
      "number": 131,
      "id": "I_kwDOKRPFO86zCJFC",
      "title": "After WGLC: early allocation of OIDs and re-roll domSeps and Test Vectors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/131",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Post-WGLC"
      ],
      "body": "",
      "createdAt": "2025-04-18T00:48:06Z",
      "updatedAt": "2025-08-28T13:29:21Z",
      "closedAt": "2025-08-28T13:29:21Z",
      "comments": []
    },
    {
      "number": 132,
      "id": "I_kwDOKRPFO86z6azJ",
      "title": "Add P521 combos",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/132",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "From Richard Kettlewell:\n\n\u2022 MLDSA87-ECDSA-P521-SHA512\n\u2022 HashMLDSA87-ECDSA-P521-SHA512\n\nFor Composite KEM document:\n\u2022 MLKEM1024-ECDH-P521",
      "createdAt": "2025-04-24T20:58:23Z",
      "updatedAt": "2025-05-01T01:51:53Z",
      "closedAt": "2025-05-01T01:51:53Z",
      "comments": []
    },
    {
      "number": 133,
      "id": "I_kwDOKRPFO86z7Pwm",
      "title": "Add py script to generate domain separators",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/133",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-04-24T23:29:15Z",
      "updatedAt": "2025-04-30T14:31:07Z",
      "closedAt": "2025-04-30T14:31:07Z",
      "comments": []
    },
    {
      "number": 138,
      "id": "I_kwDOKRPFO8602Snw",
      "title": "Did I forget to add the P521 stuff to the ASN.1 mod?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/138",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-01T15:41:25Z",
      "updatedAt": "2025-05-01T16:35:25Z",
      "closedAt": "2025-05-01T16:35:25Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by cc427e13f34b9ba9bcf2",
          "createdAt": "2025-05-01T16:35:22Z",
          "updatedAt": "2025-05-01T16:35:22Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDOKRPFO862ncmj",
      "title": "BIT STRING or BIT STRING{ BIT STRING }",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/142",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "(copy from -sigs ... the analogous thing is needed in -kems)\n\n\nStephan M\u00fcller points out that if you just read the definitions of \n\n```\nCompositeMLDSAPublicKey ::= BIT STRING\n\nCompositeSignatureValue ::= BIT STRING\n```\n\nin isolation, then you might assume that to place this inside a `SubjectPublicKeyInfo.subjectPublicKey` or `Certificate.signature`, you need to double-wrap this as BIT STRING{ BIT STRING }.\n\nThis is not the case and is explained in Section 5.3 Encoding Rules, but perhaps the section that defines CompositeMLDSAPublicKey and CompositeSignatureValue needs a reference to 5.3?",
      "createdAt": "2025-05-14T17:20:42Z",
      "updatedAt": "2025-05-23T14:22:40Z",
      "closedAt": "2025-05-23T14:22:40Z",
      "comments": []
    },
    {
      "number": 146,
      "id": "I_kwDOKRPFO8632HD-",
      "title": "Roll new -07 OIDs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/146",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "The following prototype OIDs were assigned in the Entrust Registry:\n\nVersion -07 Composite ML-KEM\n2.16.840.1.114027.80.5.2.50   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA2048-HKDF-SHA256\n2.16.840.1.114027.80.5.2.51   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA3072-HKDF-SHA256\n2.16.840.1.114027.80.5.2.52   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA4096-HKDF-SHA256\n2.16.840.1.114027.80.5.2.53   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-X25519-SHA3-256\n2.16.840.1.114027.80.5.2.54   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P256-HKDF-SHA256\n2.16.840.1.114027.80.5.2.55   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P384-HKDF-SHA256\n2.16.840.1.114027.80.5.2.56   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-brainpoolP256r1-HKDF-SHA256\n2.16.840.1.114027.80.5.2.57   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-P384-HKDF-SHA384\n2.16.840.1.114027.80.5.2.58   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-brainpoolP384r1-HKDF-SHA256\n2.16.840.1.114027.80.5.2.59   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-X448-SHA3-256\n2.16.840.1.114027.80.5.2.60   entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-P521-HKDF-SHA384\n\nThese need to be updated in the Draft.",
      "createdAt": "2025-05-22T19:56:32Z",
      "updatedAt": "2025-05-23T22:17:57Z",
      "closedAt": "2025-05-23T22:17:57Z",
      "comments": []
    },
    {
      "number": 148,
      "id": "I_kwDOKRPFO864Hczr",
      "title": "Run a spell-check",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/148",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "cleanup"
      ],
      "body": "",
      "createdAt": "2025-05-25T01:24:26Z",
      "updatedAt": "2025-06-12T17:32:36Z",
      "closedAt": "2025-06-12T17:32:36Z",
      "comments": []
    },
    {
      "number": 149,
      "id": "I_kwDOKRPFO864JEx-",
      "title": "Lock the ref impl github link to a specific commit",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/149",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Post-WGLC",
        "cleanup"
      ],
      "body": "As part of WGLC, the link at the top of the Test Vectors section should be locked to a specific commit, and should also probably be moved to be a proper Informative reference.\n\nMight as well leave this until we're pretty sure that we're done tweaking the reference implementation code, which probably means leaving it fairly late in the WGLC.",
      "createdAt": "2025-05-25T15:41:35Z",
      "updatedAt": "2025-08-17T14:37:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "One complication is that since we have to put the commit link into the .md and commit that, it can never point at HEAD. I think this is ok.",
          "createdAt": "2025-08-17T14:37:13Z",
          "updatedAt": "2025-08-17T14:37:13Z"
        }
      ]
    },
    {
      "number": 152,
      "id": "I_kwDOKRPFO864vLQl",
      "title": "Lack of specification of the wrap algorithm (CEK key encryption) and KDF function at the \"Composite KEM\" level",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/152",
      "state": "OPEN",
      "author": "PiotrPopis",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Post-WGLC"
      ],
      "body": "In version 07 as of May 29 there is no chapter \"Use in CMS\", which was in version 06, however chapter 1 \"Changes in version 07\" does not contain information about removing the chapter considering CMS.\n\nIf the authors decide to remove \"CMS\", similarly to \"Composite signs\", I strongly encourage you to leave it, or at least leave table 5 \"Mandatory-to-implement pairings for CMS KDF and WRAP\". The lack of specification of these algorithms in practice makes it impossible to start implementation, even when the \"Composite KEM\" document is published as an RFC.\n\nI understand that the LAMPS rules require the creation of separate documents for CMS structures, however the lack of indications of these algorithms in the standard will be equivalent to waiting with the implementation until the second standard appears.\nMore: although in version 07 there is a reference to KEMRecipientInfo [RFC9629] in a few places, there is no clear indication that \"Composite KEM\" are to be implemented within the \"id-ori 3\" sequence, which assumption - I believe - has not changed.\n\nTo sum up: I recommend leaving the \"Use in CMS\" chapter, including in particular table 5, which - of course - must be supplemented with ML-KEM1024+ECDH-P521 combination. This also applies to \"Composite signs\", because the lack of appropriate clarifications in SignedData has hindered implementation work in my company, and probably in others as well.\nI think this is a good place and a good moment for representatives of other companies to also comment on the omission of CMS-related clarifications.\n",
      "createdAt": "2025-05-29T06:49:47Z",
      "updatedAt": "2025-05-30T14:07:11Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@PiotrPopis We are under pressure from multiple sources to get the RFC for the basic composite algorithms within X.509 published ASAP.\n\nThe reason why we have removed this section is because the authors don't have the bandwidth to address the comments you have submitted about CMS. We have decided to get the basic algorithms + Usage in X.509 into WGLC, and then we can come back to spend time on the Usage in CMS. In other words; we do not want to delay the algorithm publication -- which groups like CA/B Forum are waiting for -- while we debate the details of CMS.",
          "createdAt": "2025-05-29T17:22:12Z",
          "updatedAt": "2025-05-29T17:23:16Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed.  As soon as we get composite KEM and composite Signatures to WGLC we will come back to work on the CMS equivalents.   Mike already ripped out the CMS sections and put them into a separate markdown file which we will work on to make the CMS draft.  If all goes well, maybe it will turn out that the CMS drafts are published at the same time, or shortly after the main composite drafts.  ",
          "createdAt": "2025-05-30T14:07:10Z",
          "updatedAt": "2025-05-30T14:07:10Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "I_kwDOKRPFO8641W-a",
      "title": "PiotrPopis comments on KDF",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/153",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In #129 @PiotrPopis submitted the following. I am splitting this into its own Issue for easier tracking.\n\n\n@ounsworth @janklaussner\nI have a problem with the provisions concerning KEM Combiner and I ask the authors for a comment or possible changes.\n\nAs for chapter D.1.1, in my opinion it is OK, in the sense that it contains provisions consistent with SP-800-227ipd.\n\nAt the same time, equation 13 of 227 is repeated in D.1.1, but in chapter 4.4 (and thus also in 4.2 and 4.3) the \"Expand\" function is omitted when KDF is HKDF.\n\nIn chapter 4.4 it is mentioned that many cryptographic libraries provide only a combined interface for HKDF and do not expose HKDF-Extract() and HKDF-Expand() separately, but this remark should not mean that HKDF-Expand() can be omitted at all?\n\nIn chapter 4.4 there is a mention of the info parameter, which (I think) according to version 07 should be a zero-length string according to chapter 2.3 of RFC 5869 (the wording \"empty\").\n\nIn my opinion, in chapter 4 the notation consistent with equation 13 should be used and the values \u200b\u200bof the info parameter should be specified. Am I right?",
      "createdAt": "2025-05-29T17:26:42Z",
      "updatedAt": "2025-06-03T21:56:03Z",
      "closedAt": "2025-06-03T21:56:03Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @PiotrPopis,\n\nThank you again for the careful review.\n\nI don't know that I fully understand your comments, but I believe that some of this is already addressed in D.1.1 by the paragraph beginning with \n\n> The HKDF-SHA2 options can be certified under...\n\nDo you agree?",
          "createdAt": "2025-05-29T17:41:17Z",
          "updatedAt": "2025-05-29T17:41:17Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@PiotrPopis\n\nI have attempted to clarify the wording of section 4.4 in this PR. Could you please review?\n\n#154\n\nAbout this comment:\n\n> In my opinion, in chapter 4 the notation consistent with equation 13 should be used and the values \u200b\u200bof the info parameter should be specified. Am I right?\n\nI disagree.\nThe conflict is because, [RFC5869] uses different notation from NIST [SP-800-227ipd]. Since we are writing a document that will be published in the IETF's RFC series, it is appropriate to use the notation consistent with other RFCs. The NIST notation is used exclusively within the D.1 FIPS Certification section. I believe this is all correct.",
          "createdAt": "2025-05-29T18:02:47Z",
          "updatedAt": "2025-05-29T18:02:47Z"
        },
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "(I was going to start a new issue but this one really covers the same material.)\n\n\n> The Composite KEM variants that use SHA3 as a combiner fit form (12) while the variants that use HKDF-SHA2 fit form (13).\n\nThis line is incorrect. The HKDF variants do not fit form (13) because they do not include the Expand step.\n\nI think the HKDF versions remain FIPSable, but not via the extract-and-expand paradigm. Instead, they can be glossed as SP800-56Cr2 _one-step_ key derivation (s4.1), with H(x) = HMAC-hash(salt, x), the default salt value, and no counter field.\n\nThe permission to drop the counter field is https://csrc.nist.gov/CSRC/media/Projects/cryptographic-module-validation-program/documents/fips%20140-3/FIPS%20140-3%20IG.pdf appendix D.P; the FIPS section should reference this as justification (it took me a while to find it again!)\n\nPersonally I would drop the HKDF-Extract notation and just reference HMAC directly throughout, but that doesn't change the meaning or the compliance argument.\n",
          "createdAt": "2025-06-03T09:20:00Z",
          "updatedAt": "2025-06-03T09:20:49Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "I_kwDOKRPFO8648ghT",
      "title": "X25519 and X448 encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/155",
      "state": "CLOSED",
      "author": "PiotrPopis",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 5 \"Serialization\"\n\n> X25519 and X448: MUST be encoded as per section 3.1 of [RFC7748].\n\nX25519 and X448: public and private keys MUST be encoded as per section 5 of [RFC7748].\n\nJustification: editorial change.",
      "createdAt": "2025-05-30T10:48:20Z",
      "updatedAt": "2025-06-02T19:16:23Z",
      "closedAt": "2025-06-02T19:16:22Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note: we should check if we need to make the same change for Ed25519 / Ed448 in -sigs.",
          "createdAt": "2025-05-30T15:18:11Z",
          "updatedAt": "2025-05-30T15:18:11Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed in [23df6bd](https://github.com/lamps-wg/draft-composite-kem/commit/23df6bd47221eb37f9cab54b4c274a7ee3f70c49)",
          "createdAt": "2025-06-02T19:16:22Z",
          "updatedAt": "2025-06-02T19:16:22Z"
        }
      ]
    },
    {
      "number": 156,
      "id": "I_kwDOKRPFO865cKfP",
      "title": "Mike Jenkins comment about the CNSA reference",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/156",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See:\n\nhttps://github.com/lamps-wg/draft-composite-sigs/issues/183",
      "createdAt": "2025-06-02T18:18:39Z",
      "updatedAt": "2025-06-03T21:12:29Z",
      "closedAt": "2025-06-03T21:12:29Z",
      "comments": []
    },
    {
      "number": 158,
      "id": "I_kwDOKRPFO865cZzX",
      "title": "HKDF-SHA384 vs SHA512",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/158",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Richard Kettlewell pointed out:\n\n> Mike Ounsworth John Gray I notice in https://github.com/lamps-wg/draft-composite-kem/blob/main/draft-ietf-lamps-pq-composite-kem.md that you use HKDF-SHA384-Extract truncated to 256 bits - given SHA384 is secretly a truncated SHA512 anyway is there a reason you chose that rather than HKDF-SHA512-Extract with truncated output? Not really asking for any changes, just wondering about motivation.\n\n- [x] Make sure Richard is in the acknowledgements of both drafts",
      "createdAt": "2025-06-02T18:38:40Z",
      "updatedAt": "2025-06-04T16:41:19Z",
      "closedAt": "2025-06-04T16:41:19Z",
      "comments": [
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ta!",
          "createdAt": "2025-06-03T09:08:47Z",
          "updatedAt": "2025-06-03T09:08:47Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Somehow in all the cross-branch merges, we lost the change.",
          "createdAt": "2025-06-04T14:32:03Z",
          "updatedAt": "2025-06-04T14:32:03Z"
        },
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "NB the editorial note currently found in git HEAD:\n\n>Since SHA-384 is a truncated version of SHA-512, and we are further truncating it to 256 bits, these are binary-compatible \n\n...is wrong - a moment with `sha512sum` and `sha384sum` should convince you. They share the same padding rule and compression function, but have different initial hash values.\n\nI'd still choose SHA-512, personally, but it's not a hill I'd die on.\n",
          "createdAt": "2025-06-04T14:41:51Z",
          "updatedAt": "2025-06-04T14:41:51Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOKRPFO865mN4_",
      "title": "Add a \"Implicit inputs mapped from <OID>\"",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/160",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "and change the algorithm defns to\n\n    Composite-ML-KEM<OID>\n\nRelates to https://github.com/lamps-wg/draft-composite-sigs/issues/185",
      "createdAt": "2025-06-03T12:40:51Z",
      "updatedAt": "2025-06-03T21:56:04Z",
      "closedAt": "2025-06-03T21:56:04Z",
      "comments": []
    },
    {
      "number": 166,
      "id": "I_kwDOKRPFO866VRAU",
      "title": "HMAC-Hash Combiner Confusion",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/166",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.4 (of the github version) specifies the following steps when the KEM Combiner is HMAC-{Hash}\n\n```\n    ss = HMAC-{Hash}(salt={0}, IKM=mlkemSS || tradSS || tradCT\n                                           || tradPK || Domain)\n    ss = truncate(ss, 256)\n```\n\nKMAC doesn't take salt and IKM parameters, these parameters are used by HKDF-Extract.  Since you're calling the combiner HMAC-{Hash}, use the associated parameter names (key and text):\n\n```\n    ss = HMAC-{Hash}(key={0}, text=mlkemSS || tradSS || tradCT\n                                           || tradPK || Domain)\n    ss = truncate(ss, 256)\n```\n",
      "createdAt": "2025-06-07T00:04:48Z",
      "updatedAt": "2025-06-12T17:26:49Z",
      "closedAt": "2025-06-12T17:26:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yup, that's right. Good catch.",
          "createdAt": "2025-06-07T00:49:37Z",
          "updatedAt": "2025-06-07T00:49:37Z"
        }
      ]
    },
    {
      "number": 167,
      "id": "I_kwDOKRPFO866iJ0r",
      "title": "Key reuse inconsistency",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/167",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sections 4.1 and 6.3 have MUST and MUST NOT terminology around key reuse.  Section 10.3 uses RECOMMENDED.\n\nThese need to be consistent.  Probably by changing 4.1 and 6.3 to use SHOULD / SHOULD NOT.",
      "createdAt": "2025-06-09T08:00:29Z",
      "updatedAt": "2025-06-12T17:26:49Z",
      "closedAt": "2025-06-12T17:26:49Z",
      "comments": []
    },
    {
      "number": 168,
      "id": "I_kwDOKRPFO866iUCd",
      "title": "trailing curly cracket",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/168",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "First paragraph of section 5: `within the public API definitions in Section 4}.`  Get rid of that extra `}`",
      "createdAt": "2025-06-09T08:18:22Z",
      "updatedAt": "2025-06-12T17:26:49Z",
      "closedAt": "2025-06-12T17:26:49Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Dan.\n\nI already caught this on my top-to-bottom pass in #164 .\n\nI appreciate the careful review, but maybe it's a better use of your time to hold off reviewing until we get that big PR merged?",
          "createdAt": "2025-06-09T17:50:37Z",
          "updatedAt": "2025-06-09T17:50:47Z"
        }
      ]
    },
    {
      "number": 169,
      "id": "I_kwDOKRPFO866_aBd",
      "title": "Add Message Combiner Example",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/169",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Similar to what we did for Signatures with the Message format examples, we will add a section for a KEM Combiner examples.  For example:\n\n## Example of MLKEM768-ECDH-P384-HMAC-SHA256\n\n~~~\nCombiner Function:\nss = KDF(mlkemSS || tradSS || tradCT || tradPK || Domain)\n\nComponents of the Combiner:\nmlkemSS: <bytes of mlkemSS>\ntradSS: <bytes of tradSS>\ntradCT: <bytes of tradCT>\ntradPK: <bytes of tradPK>\nDomain:  <bytes of Domain>\n\nInput to KDF:  mlkemSS || tradSS || tradCT || tradPK || Domain\n\nss:  <bytes of shared secret>\n~~~\n\n## Example of MLKEM768-X25519-SHA3-256\n\n~~~\nCombiner Function:\nss = KDF(mlkemSS || tradSS || tradCT || tradPK || Domain)\n\nmlkemSS: <bytes of mlkemSS>\ntradSS: <bytes of tradSS>\ntradCT: <bytes of tradCT>\ntradPK: <bytes of tradPK>\nDomain:  <bytes of Domain>\n~~~",
      "createdAt": "2025-06-11T15:04:21Z",
      "updatedAt": "2025-06-12T17:26:50Z",
      "closedAt": "2025-06-12T17:26:50Z",
      "comments": []
    },
    {
      "number": 171,
      "id": "I_kwDOKRPFO867_MUW",
      "title": "Encap is random",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/171",
      "state": "CLOSED",
      "author": "wangweij",
      "authorAssociation": "NONE",
      "assignees": [
        "ounsworth"
      ],
      "labels": [],
      "body": "Appendix F requires\n\n> Load the decapsulation private key `dk` or `dk_pkcs8` and the ciphertext `c` and ensure that the same shared secret key `k` can be derived.\n\nThere is no way to Encap to the same `c` and `k` unless the random used (like the `ikmE` in RFC 9180) is provided.\n\n",
      "createdAt": "2025-06-17T15:23:39Z",
      "updatedAt": "2025-07-13T14:15:31Z",
      "closedAt": "2025-07-13T14:15:21Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you @wangweij for your careful review!\n\nI think you are mis-reading this sentence, this is describing a Decap operation, but I can change the text to make this more clear:\n\n> Load the decapsulation private key `dk` or `dk_pkcs8` and the ciphertext c and perform a `Decaps` operation to ensure that the same shared secret key `k` is derived.",
          "createdAt": "2025-06-18T15:03:57Z",
          "updatedAt": "2025-06-18T15:04:40Z"
        },
        {
          "author": "wangweij",
          "authorAssociation": "NONE",
          "body": "I know this line is about Decap, but when you say \"the same shared secret key\", it means the same as the one in the Encap operation. If I cannot perform Encap, there is no way to compare the keys.",
          "createdAt": "2025-06-18T21:55:49Z",
          "updatedAt": "2025-06-18T21:55:49Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "reopening for discussion\n\n@wangweij I am not sure I get your point. We are doing tests, so the same entity does the encap and decap operation. Encap operation provides us a shared secret: k, after that Decap also provides us a shared secret: k'. The tester needs to verify both are equal.\nOr do you mean we should replace 'same' with 'equal' because its the mathematical correct term?",
          "createdAt": "2025-06-26T09:51:53Z",
          "updatedAt": "2025-06-26T09:59:50Z"
        },
        {
          "author": "wangweij",
          "authorAssociation": "NONE",
          "body": "Thanks for reopening the issue. Appendix F includes the instruction:\n> Load the public key ek or certificate x5c and perform an encapsulation for it.\n\nMy point is that there\u2019s no way to replay the exact same encapsulation operation, since it\u2019s randomized. Using the `ek` from the test vector doesn\u2019t always produce the same `c` and `k`.\n\n\n",
          "createdAt": "2025-06-26T13:44:21Z",
          "updatedAt": "2025-06-26T13:44:21Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "@wangweij yes your are right. \n@ounsworth I think it makes no sense to include c and k in the test vectors since they change with every Encap() call.",
          "createdAt": "2025-06-27T15:18:42Z",
          "updatedAt": "2025-06-27T15:18:42Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We may add more clarifying text to the document.",
          "createdAt": "2025-07-02T14:51:57Z",
          "updatedAt": "2025-07-02T14:51:57Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@wangweij \nThe intention of the recommended test is that you can load the public key from the test vectors, and your implementation can do an Encap() for it without crashing or throwing errors.\n\nOf course you will get a different `c`. The text of the draft does not say that you will get the same `c`, but anyway I can make the text clearer.\n\nI also think it makes sense to leave `c` and `k` in the test vectors because the test of taking `c` and ensure that you can extract the same `k` is a valuable test of the correctness of your implementation. This is in fact the most important thing you can test using the test vectors.",
          "createdAt": "2025-07-02T14:54:12Z",
          "updatedAt": "2025-07-02T14:56:26Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Circling back to this issue.\n\n\n\n> your are right.\n> [@ounsworth](https://github.com/ounsworth) I think it makes no sense to include c and k in the test vectors since they change with every Encap() call.\n\nI fully disagree.\nThe point is to test that your `Decap(sk, ct) --> k` works correctly. In order to do a known-answer-test (KAT) for this, the test vectors need to provide all three values: `sk, ct, k`. Otherwise you're testing your `Decap()` against your own `Encap()`, which defeats the purpose of known-answer tests.\n\nI'll also note that I've modelled these test vectors exactly after the NIST ACVP KATs which have this structure:\n\n```\n        {\n          \"tcId\": 1,\n          \"deferred\": false,\n          \"ek\": \"ADB031A018...\",\n          \"dk\": \"C1C9276205D0DAD6...\",\n          \"c\": \"3244E86669E69F0F238E3CD7F03...\",\n          \"k\": \"6C832560DFE97BECADFBB340EE3...\",\n          \"m\": \"E8D6BAC09B25469BEE582A7DEE...\"\n        }\n```\n\nhttps://github.com/usnistgov/ACVP-Server/blob/master/gen-val/json-files/ML-KEM-encapDecap-FIPS203/internalProjection.json",
          "createdAt": "2025-07-13T14:13:27Z",
          "updatedAt": "2025-07-13T14:14:45Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am going to close this ticket as \"No Change Needed\".\n@wangweij or @janklaussner can re-open it if you think there is still discussion to have.",
          "createdAt": "2025-07-13T14:15:21Z",
          "updatedAt": "2025-07-13T14:15:31Z"
        }
      ]
    },
    {
      "number": 172,
      "id": "I_kwDOKRPFO868Mddt",
      "title": "Invalid encoding for non-composite ML-KEM test vectors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/172",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "While the non-composite ML-KEM test vectors don't actually test composites, they're useful for verifying one's framework when using these test vectors.\n\nThe PKCS#8 non-composite ML-KEM test vectors are encoded incorrectly. They contain the seed in the private key OCTET STRING without any additional wrapping.  Because the CHOICE encoding is now used for ML-KEM, when encoded as a seed the private key needs an extra layer of OCTET STRING.\n\nNot sure how you then want to handle the raw key.  Should it be the raw SEED, or the raw CHOICE (no PKCS#8, but still CHOICE ANS.1 encoding).",
      "createdAt": "2025-06-18T15:49:20Z",
      "updatedAt": "2025-09-21T21:48:21Z",
      "closedAt": "2025-09-21T21:48:20Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Copy over same as in #219 in Sigs  -  https://github.com/lamps-wg/draft-composite-sigs/issues/210  ",
          "createdAt": "2025-07-02T14:54:18Z",
          "updatedAt": "2025-07-02T15:20:34Z"
        }
      ]
    },
    {
      "number": 173,
      "id": "I_kwDOKRPFO868O70r",
      "title": "Private key serialization is under-specified",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/173",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "The private key serialization is under-specified, at least for EC.  Section 5 of both drafts says the traditional public EC key is encoded as an ECPoint, but says nothing about the private key. RFC5915 which defines ECPrivateKey isn't referenced anywhere in the documents.  The RSAPublicKey, RSAPrivateKey and ECPrivateKey types aren't referenced anywhere in the documents, I think doing so would make serialization clearer.",
      "createdAt": "2025-06-18T20:06:10Z",
      "updatedAt": "2025-09-03T14:36:47Z",
      "closedAt": "2025-09-03T14:36:47Z",
      "comments": [
        {
          "author": "Perksey",
          "authorAssociation": "NONE",
          "body": "I'm surprised the complexity of manually specifying the serialisation/deserialisation functions is preferred to just saying a private key is a sequence of octet strings encapsulating whatever the native form is for each KEM within the composite. Yes it's more work doing those operations (as it's more to decode) but it removes ambiguity and complexity, and makes implementing this proposal harder to get wrong while also having emergent benefits such as implementations being able to generalise over the composite KEM (for decreasing code size, *NOT* for allowing any old algorithm to be used in the composite as this isn't something to be done lightly).\n\nEDIT: This would also apply for public keys as well.",
          "createdAt": "2025-06-22T16:50:58Z",
          "updatedAt": "2025-06-22T16:51:55Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We will add the appropriate references for Signatures and KEM.   Thanks!",
          "createdAt": "2025-07-02T14:27:38Z",
          "updatedAt": "2025-07-02T14:27:38Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/lamps-wg/draft-composite-sigs/issues/215 is related",
          "createdAt": "2025-07-02T14:28:25Z",
          "updatedAt": "2025-07-02T14:29:24Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "in https://github.com.mcas.ms/lamps-wg/draft-composite-sigs/issues/215 we went for even more restrictions not reflected by PR #184 yet, hence reopening.",
          "createdAt": "2025-08-29T13:20:07Z",
          "updatedAt": "2025-08-29T13:20:07Z"
        }
      ]
    },
    {
      "number": 174,
      "id": "I_kwDOKRPFO868O8Zq",
      "title": "x25519/x448 encoding",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/174",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "For the 25519/448 composites, the traditional private key component is the raw 32 or 56 bytes.  Since the EC and RSA private key components are to be encoded as ECPrivateKey and RSAPrivateKey, it might be more consistent to encode the 25519/448 keys as a CurvePrivateKey (i.e. wrap the raw key in an OCTET STRING).  I'm not convinced that doing this one way or the other is better, just that doing so would be consistent. Then all traditional components will be equivalent to the contents of a standalone traditional PrivateKeyInfo.privateKey OCTET STRING.",
      "createdAt": "2025-06-18T20:07:11Z",
      "updatedAt": "2025-08-15T11:59:34Z",
      "closedAt": "2025-08-15T11:59:34Z",
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "@danvangeest thanks for the comment. We had a hard time to figure out the encoding and stuck with this. The reason is that the raw encoding is expected by most crypto libs internally (check this comment, applies to KEMs also: https://github.com/lamps-wg/draft-composite-sigs/issues/146#issuecomment-2810106782)\nThis aligns with our first design goal to limit reencoding work (https://github.com/lamps-wg/draft-composite-sigs/issues/146#issue-2986637607).\n\nSince you do net prefer either, I hope its fine if we do not change it.\n\nThis comment also applies to https://github.com/lamps-wg/draft-composite-sigs/issues/216",
          "createdAt": "2025-06-26T07:39:08Z",
          "updatedAt": "2025-06-26T07:39:08Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see what Dan is pointing out: we are not consistent with the encodings specified in RFC8410, which specifies:\n\n```\n   PrivateKey ::= OCTET STRING\n\n   PublicKey ::= BIT STRING\n```\n\nI have not thought about this enough to have a firm opinion, but it probably makes sense to make it consistent with 8410.",
          "createdAt": "2025-07-02T14:23:09Z",
          "updatedAt": "2025-07-02T14:23:44Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We agreed to make it consistent with RFC 8410.",
          "createdAt": "2025-07-02T14:24:32Z",
          "updatedAt": "2025-07-02T14:24:32Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> I see what Dan is pointing out: we are not consistent with the encodings specified in RFC8410, which specifies:\n> \n> ```\n>    PrivateKey ::= OCTET STRING\n> \n>    PublicKey ::= BIT STRING\n> ```\n\nActually this part is just repeating the OneAsymmetricKey defintion.\nWhat RFC8410 specifies additionally is \n```\n    CurvePrivateKey ::= OCTET STRING\n```\nThere is no such wrapping for the public key, so here I think we are fine. I will just require CurvePrivateKey for the Ed curves.",
          "createdAt": "2025-07-08T20:52:59Z",
          "updatedAt": "2025-07-08T20:52:59Z"
        }
      ]
    },
    {
      "number": 175,
      "id": "I_kwDOKRPFO868O8vF",
      "title": "Incorrect private key test vectors",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/175",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "The test vectors are incorrect for the EC and RSA components of the composite private keys.  The private keys are encoded as a concatenation of the raw (ML-KEM,ML-DSA) seed and a PrivateKeyInfo.  Rather than a PrivateKeyInfo it should be an ECPrivateKey or RSAPrivateKey.  The 25519/448 private key vectors are correct according to the current text.",
      "createdAt": "2025-06-18T20:07:52Z",
      "updatedAt": "2025-06-20T17:55:06Z",
      "closedAt": "2025-06-20T17:55:06Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Dan, I believe I have fixed the issue in this pull request:\nhttps://github.com/lamps-wg/draft-composite-kem/pull/178\n\nIf you could check them and verify that would be appreciated!\n\n",
          "createdAt": "2025-06-19T21:28:50Z",
          "updatedAt": "2025-06-19T21:28:50Z"
        }
      ]
    },
    {
      "number": 176,
      "id": "I_kwDOKRPFO868O9DB",
      "title": "Approximate key sizes",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/176",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "Appendix A.  Approximate Key and Signature Sizes does not seem particularly useful, because it is just approximate.  If you could list the maximum sizes that would be much more useful. I suspect some of the private key values in this table are no longer approximate because of the serialization issues I mentioned above.",
      "createdAt": "2025-06-18T20:08:29Z",
      "updatedAt": "2025-09-03T18:30:31Z",
      "closedAt": "2025-09-03T18:30:31Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is a twin issue with https://github.com/lamps-wg/draft-composite-sigs/issues/218\n\nSee the discussion there.",
          "createdAt": "2025-08-17T14:44:06Z",
          "updatedAt": "2025-08-17T14:44:12Z"
        }
      ]
    },
    {
      "number": 177,
      "id": "I_kwDOKRPFO868Puwj",
      "title": "Issue with ASN.1 - OCTET STRING Wrapping - Applies to Signatures as well",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/177",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "Composite KEM Authors:\n\nI am confused by this:\n\n   kema-CompositeKEM {\n     OBJECT IDENTIFIER:id,\n       PUBLIC-KEY:publicKeyType }\n       KEM-ALGORITHM ::= {\n            IDENTIFIER id\n            VALUE OCTET STRING\n            PARAMS ARE absent\n            PUBLIC-KEYS { publicKeyType }\n            SMIME-CAPS { IDENTIFIED BY id }\n           }\n\nIn Section 6, you say:\n\n   While composite ML-KEM keys and ciphertext values MAY be used raw,\n   the following sections provide conventions for using them within\n   X.509 and other PKIX protocols such that Composite ML-KEM can be used\n   as a drop-in replacement for KEM algorithms in PKCS#10 [RFC2986], CMP\n   [RFC4210], X.509 [RFC5280], and related protocols.\n\nThese two are in conflict.  The ASN.1 is calling for a OCTET STRING wrapper.\n\nI think you want:\n\n   kema-CompositeKEM {\n     OBJECT IDENTIFIER:id,\n       PUBLIC-KEY:publicKeyType }\n       KEM-ALGORITHM ::= {\n            IDENTIFIER id\n            -- VALUE has no ASN.1 wrapping --\n            PARAMS ARE absent\n            PUBLIC-KEYS { publicKeyType }\n            SMIME-CAPS { IDENTIFIED BY id }\n           }\n\nRuss",
      "createdAt": "2025-06-18T21:38:37Z",
      "updatedAt": "2025-07-06T12:34:44Z",
      "closedAt": "2025-07-06T12:34:44Z",
      "comments": []
    },
    {
      "number": 179,
      "id": "I_kwDOKRPFO869XCfC",
      "title": "Where is tradPK in Decap from?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/179",
      "state": "CLOSED",
      "author": "wangweij",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "bug",
        "Blocks WGLC"
      ],
      "body": "The `KemCombiner` operation in the final step requires `tradPK`, but `DeserializePrivateKey(sk)` only gives us `tradSK`. Is `tradPK` derived from `tradSK`? I\u2019m wondering whether all implementations provide a way to do that.",
      "createdAt": "2025-06-25T20:52:44Z",
      "updatedAt": "2025-08-15T12:39:26Z",
      "closedAt": "2025-08-15T12:39:26Z",
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "good catch, I do not think it was our intention to generate tradPK on Decap(). \nI see these options:\n\n1. explicitly provide pk at the Decap() interface\nDownside:\nThis not the default Decap() interface\n\n2. follow the X-Wing Paper and provide the tradPK in the Composite sk\nDownside: \ndeviates from Composite Sigs where we do not need this\nproduces issue with our current enconding, since tradSK and tradPK may not have fixed length \n\n3. provide tradPK as part of ct\nDownside: \nagain, produces issue with our current enconding, since tradCT and tradPK may not have fixed length \n\n4. enforce generation of tradPK at Decap()\nDownside:\nIn case of e.g. RSA 4096 this would increase the runtime significantly\n\n@ounsworth @johngray-dev @opencrypto anything I missed?",
          "createdAt": "2025-06-26T07:11:50Z",
          "updatedAt": "2025-06-26T07:11:50Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This needs to be resolved before WGLC.  ",
          "createdAt": "2025-07-02T14:45:10Z",
          "updatedAt": "2025-07-02T14:45:10Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This kept me up at night.  I think option 3 (using the CipherText to carry the public key) is what we need to go with for the following reasons:\n-  It doesn't change the standard public decap() interface as in option 1.\n-  If the public key is added to the private key (as in option 2), it is problematic for the reasons you site above, as well as when the private key is not accessible (because it is stored on an HSM).   You may only have a reference to the private key, so then trying to extract the public key from a reference would likely involve having to call additional API's.  This turns out to be the exact same reason we did not add the public key onto the private keys for composite signatures.\n- I think expecting an implementation to either regenerate the public key (as in option 4), or having to parse through the private key material to pull out the bits to reconstruct the public key is very efficient.\n- Adding it in the Ciphertext doesn't change any of the discussion around the public and private key encodings.\n\nTherefore, I think appending it to the Composite Cipher Text make the most sense.   The only addition is that we will now need to add a 2-byte length header to indicate the length of the traditional cipherText:\n\ncct  =  TradCTLen ( 2 bytes) || mlkemct || tradct || tradpk\n\n\n~~~\nComposite-ML-KEM.SerializeCiphertext(mlkemCT, tradCT,tradpk) -> bytes\n\n   Explicit inputs:\n\n     mlkemCT  The ML-KEM ciphertext, which is bytes.\n\n     tradCT   The traditional ciphertext in the appropriate\n              encoding for the underlying component algorithm.\n\n     tradpk  The traditional public key in the appropriate encoding\n                  for the underlying component algorithm\n\n   Implicit inputs:\n\n     None\n\n   Output:\n\n     bytes   The encoded composite ciphertext value.\n\n   Serialization Process:\n\n     1. Encode the length of the tradCT into 2 bytes\n\n         tradCTlen = len(tradCT)     \n\n     2. Combine and output the encoded composite ciphertext\n\n        output tradCTlen || mlkemCT || tradCT || tradpk\n\n      Figure 9: Composite-ML-KEM.SerializeCiphertext(mlkemCT, tradCT, tradpk)\n                                  -> bytes\n~~~\n\n   Deserialization reverses this process.  Each component ciphertext is\n   deserialized according to their respective specification as shown in\n   Appendix B.\n\n   The following describes how to instantiate a\n   DeserializeCiphertext(bytes) function for a given composite algorithm\n   represented by <OID>.\n\n~~~\n Composite-ML-KEM<OID>.DeserializeCiphertext(bytes)\n                                                 -> (mldkemCT, tradCT, tradpk)\n\n Explicit inputs:\n\n   bytes   An encoded composite ciphertext value.\n\n Implicit inputs mapped from <OID>:\n\n   ML-KEM   The underlying ML-KEM algorithm and\n            parameter, for example, could be \"ML-KEM-768\".\n\n Output:\n\n   mlkemCT  The ML-KEM ciphertext, which is bytes.\n\n   tradCT   The traditional ciphertext in the appropriate\n            encoding for the underlying component algorithm.\n\n   tradpk  The traditional public key in the appropriate encoding\n                  for the underlying component algorithm\n\n Deserialization Process:\n\n   1.  Read the length of the tradCT from the first 2 bytes of the CipherText\n\n        tradCTlen = bytes[:2]\n   \n   2. Parse each constituent encoded ciphertext.\n      The length of the mlkemCT is known based on the size of\n      the ML-KEM component ciphertext length specified by the Object ID.\n\n      switch ML-KEM do\n         case ML-KEM-768:\n           mlkemCT = bytes[3:1090]\n           tradCT  = bytes[1090:tradCTLen]\n           tradpk = bytes[1090+tradCTLen:]\n         case ML-KEM-1024:\n           mlkemCT= bytes[3:1570]\n           tradCT  = bytes[1570:tractCTLen]\n           tradpk = bytes[1570+tradCTLen:]\n\n      Note that while ML-KEM has fixed-length ciphertexts, RSA and ECDH\n      may not, depending on encoding, so rigorous length-checking is\n      not always possible here.\n\n   3. Output the component ciphertext values\n\n      output (mlkemCT, tradCT, tradpk)\n\n    Figure 10: Composite-ML-KEM<OID>.DeserializeCiphertext(bytes) ->\n                           (mldkemCT, tradCT)\n~~~",
          "createdAt": "2025-07-03T12:45:26Z",
          "updatedAt": "2025-07-03T12:48:07Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think we need to think this through a little bit more.\nI spoke with Bas about this, and he convinced me that putting TradPK in the ciphertext is the wrong answer; instead the only right answer is for the decapsulator to pull the TradPK somehow from the TradSK.\n\nArguments:\n\n1. If you are hashing in the TradPK that you pull from the CT without checking it, then it's no longer actually binding the PK because the attacker could put any value they want there. If you do check it, that means you already have it, so just use that.\n2. See \"Public Key Confusion Attack\" here: https://cryspen.com/post/pqxdh/\n\n\n(2) is an excellent reference because it talks about what goes wrong in a hybrid KEM when you have encoding ambiguity. I think the right answer is that we need to pull TradPK from TradSK, and we need to be clear about which encoding is used when constructing the KEM Combiner. This will also need Security Consideration tweaks, including referencing that blog.",
          "createdAt": "2025-07-06T13:55:14Z",
          "updatedAt": "2025-07-06T13:59:02Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Couldn't the attacker just replace either of the CipherText values as well?  The only way to make sure it is correct is to do a key consistency check, which would mean deriving the public key from the private key (or are we assuming the attacker can't get access to the private key - because if they could, then they could change the value of the public inside it and probably do worse things anyway).  \n\nSo if it has to go in the traditional private key, then the private key format of the traditional key needs to be in a format that would allow the private key material to be derived/extracted.",
          "createdAt": "2025-07-06T17:19:32Z",
          "updatedAt": "2025-07-06T17:19:32Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Couldn't the attacker just replace either of the CipherText values as well?\n\nThe point here is that we're basing our proof of security on the X-Wing proof, and this requires binding the TradPK because without it, RSA-OAEP and ECDH are not IND-CCA2. So if we put the TradPK in the ciphertext and we don't check it against the SK, then we are in fact no longer getting the PK-BIND property, and the proof falls apart.\n\n\n\n> So if it has to go in the traditional private key, then the private key format of the traditional key needs to be in a format that would allow the private key material to be derived/extracted.\n\nCorrect.\n\nSo by process of elimination, we're down to Jan's 1) and 2):\n\n> 1. explicitly provide pk at the Decap() interface\n> 2. follow the X-Wing Paper and provide the tradPK in the Composite sk\n\nI would also suggest a 1b) implicitly provide pk at the Decap() interface. For each algorithm we list the explicit and implicit inputs separately. We could add TradPK to the list of implicit inputs, and then add an Implementation Consideration with suggestions for how to implement this: if the public key is carried in the secret key, then do that, else if you have access to the certificate, then get it from there, else derive the public key from the secret key. We will also need to be explicit about which encoding is used for the KDF -- ex.: we say that both compressed and uncompressed ECPoints are allowed, but we'll need to pick one or else you have ambiguous KDFs.",
          "createdAt": "2025-07-06T21:06:34Z",
          "updatedAt": "2025-07-06T21:06:34Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Author's meeting today.\n\nWe have decided to go with Option 1.\n\nNotes:\n\nmlkemCT || len(TradPK) || TradPK || tradCT\n\n\n\n\nPROBLEM: this does not give you the BIND-PK property that we are going for.\n\n\nmlkemCT || len(r) || r || tradCT\n\n\n\n\n\nExplicit inputs\n\n  sk      Composite private key consisting of decryption private keys\n          for each component.\n \n  pk      Either carried in the secret key sk, or re-derived from the\n          secret key.\n\n  ct      The ciphertext, a byte string.\n\n\n\nOPTION 1\n\nComposite-ML-KEM.SerializePrivateKey(mlkemSeed, tradSK) -> bytes\n\n  1. Combine and output the encoded private key.\n\n     output mlkemSeed || len(tradPK) || tradPK || tradSK\n\n     output mlkemSeed || len(tradSK) || tradSK || tradPK\n\n\nAlso fix DeserializePrivateKey\n\nAlso update 11.4. Particularly mention the case of HSMs where the HSM will not or cannot give you the public key.\n\n\n\n\nOPTION 1b\nChange the KEM Combiner to use HashTradPK instead of tradPK, then:\n\nSerializePrivateKey ::= mlkemSeed || HashTradPK || tradSk\n\n\nOPTION 2\n\nSection 6.3: when you put a Composite-ML-KEM private key into a OneAsymmetricKey, you SHOULD / MUST / RECOMMENDED???? put the TradPK into the OneAsymmetricKey.publicKey field. Note: the ML-KEM public key does not need to be carried since it is already contained within the ML-KEM secret key.\n\nOPTION 2a Leave it out, but re-generate it from the SK\n\n\n\n\nOPTION 3\n\nPromote ECDH to a full KEM via the FO transform.",
          "createdAt": "2025-07-09T15:19:26Z",
          "updatedAt": "2025-07-09T15:19:26Z"
        }
      ]
    },
    {
      "number": 180,
      "id": "I_kwDOKRPFO869gdZV",
      "title": "FIPS vs truncated HMAC",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/180",
      "state": "OPEN",
      "author": "optnfast",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [],
      "body": "> In alignment with ML-KEM [FIPS.203], Composite KEM algorithms output a 256-bit shared secret key at all security levels, truncating is necessary as described in {{sec-kem-combiner}}.\n\nWhere the combiner is SHA3-256 or HMAC-SHA256 this is all good.\n\nHowever where the combiner is HMAC-SHA512 it means we truncate the output to 256 bits.\n\nThis is a headache in the FIPS context:\n* I see nothing in SP800-227ipd which permits truncation, so we can only appeal to the underlying KDF specs.\n* If the combiner is interpreted as the an SP800-56Cr2 one-step KDF we could only get away with it if the result is used directly as key material (it's conceptually the same as only needing 256 bits of KDF output).\n* If the combiner is interpreted as the Extract phase of an SP800-56Cr2 two-step KDF it won't work: the text is clear that the HMAC must be untruncated.\n\nSo if you want more than one AES-256 key, or two AES-128 keys, you're out of luck. I have concrete use cases for up to 1024 bits of output from a PQ/T hybrid KEM so this is going to be a problem for me. (My current use cases don't involve interop so I do have a good plan B, but I'd still like to align with the rest of the world if possible.)\n\nI think I have some responsibility for this, having previously cheered on the use of HMAC-SHA512.\n\nMy suggestion is to remove all truncated HMAC-SHA512 and replace with untruncated HMAC-SHA256. I don't believe this will have any meaningful impact on security level.",
      "createdAt": "2025-06-26T14:50:48Z",
      "updatedAt": "2025-09-21T22:16:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I have concrete use cases for up to 1024 bits of output from a PQ/T hybrid KEM so this is going to be a problem for me. \n\nSo, how do you do this with ML-KEM? It only gives you 256 bits so you'll have to run a KDF to expand it out. How is this any different with Composite ML-KEM?\n\n\n> My suggestion is to remove all truncated HMAC-SHA512 and replace with untruncated HMAC-SHA256. I don't believe this will have any meaningful impact on security level.\n\nI see where you're coming from, but HMAC-SHA512 retains the collision and second pre-image strength of SHA512 through the double-pass of HMAC, and then only truncates down at the end; by that logic there is an impact on security that would need to be studied. It's an interesting question, but we're also under a lot of pressure to just get this thing published. So I vote to leave it as it is.",
          "createdAt": "2025-08-17T14:51:39Z",
          "updatedAt": "2025-08-17T14:51:39Z"
        },
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The problem is not the security of the construction, nor the technical feasibility of using it. The problem is getting it through a FIPS evaluation.\n\nThe truncation step invalidates the analysis in [fips-certification-sec-fips](https://github.com/lamps-wg/draft-composite-kem/blob/main/draft-ietf-lamps-pq-composite-kem.md#fips-certification-sec-fips). As well as SHA3 and HMAC-SHA2, we now have truncated HMAC-SHA2 in the mix, and that isn't one of the acceptable choices under SP800-227ipd.\n\nMore specifically SP800-227ipd references SP800-56Ar3 which offers hash(x), HMAC-hash(salt, x) and KMAC(...) as options. \"Truncated HMAC-hash\" is not among the options. \n\nThings to think about:\n* FIPS-198 does allow for truncated HMACs. But it unambiguously defines HMAC-hash as the untruncated form, so it doesn't quite get us out of this hole.\n* FIPS-180 does allow for truncated hashes. So HMAC-(truncated-SHA512) could be a valid option at least in principle (albeit a somewhat strange one). But that is not the same function as truncated HMAC-SHA512.",
          "createdAt": "2025-08-18T08:21:44Z",
          "updatedAt": "2025-08-18T08:21:44Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Authors group believes this is worth fixing so it can be FIPS certified.   Use HMAC-SHA256 throughout.  \n- ML-KEM outputs 256 bit output\n- If we use HMAC-SHA256, lower collision resistance of internal HMAC... does this matter?\n  -  Suppose ML-KEM is broken but P-521 is not...  unlikely. \n- Authors group agreed to change.\n",
          "createdAt": "2025-08-28T14:37:25Z",
          "updatedAt": "2025-08-28T14:44:58Z"
        },
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thankyou John.\n\n> If we use HMAC-SHA256, lower collision resistance of internal HMAC... does this matter\n\nAFAIK it does not.\n\nPer https://eprint.iacr.org/2006/043.pdf the security of HMAC-H, for a Merkle-Damg\u00e5rd hash H, does not depend on the collision resistance of H but only on the compression function being a PRF. The proof here was motivated by the weakness of SHA1 but we could lean on it here to disregard the 128-bit collision resistance of SHA256.\n\nIntuitively, even if an adversary has an efficient SHA256 collision finder (supporting chosen prefixes and suffixes) and can break exactly one of the component KEMs (i.e. letting them learn or control one of the two shared secrets), what are they going to do with these tools? There is still at least one secret input involved in any key establishment operation so they have no way to make their collision finder match it short of exhaustive search over about 2^256 possible values. Conversely if they start by choosing a colliding pair they have no way to 'drive' the unbroken KEM to match the its secret in one of their inputs better than ~2^256 exhaustive search.",
          "createdAt": "2025-08-29T09:22:34Z",
          "updatedAt": "2025-08-29T09:22:34Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Relates to #206 ",
          "createdAt": "2025-09-21T22:16:21Z",
          "updatedAt": "2025-09-21T22:16:21Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "I_kwDOKRPFO86-I2Ky",
      "title": "It is unclear that the CRT priv key representation is forbidden",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/181",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "One version of the text explicitly required the (n, d) private key representation, but the current text does not make this clear.",
      "createdAt": "2025-06-30T22:05:01Z",
      "updatedAt": "2025-07-02T14:33:07Z",
      "closedAt": "2025-07-02T14:33:07Z",
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as we allow traditional format use.",
          "createdAt": "2025-07-02T14:33:07Z",
          "updatedAt": "2025-07-02T14:33:07Z"
        }
      ]
    },
    {
      "number": 186,
      "id": "I_kwDOKRPFO87BSvuf",
      "title": "KeyGen() and Decap() use mlkemSK instead of mlkemSeed.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/186",
      "state": "CLOSED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Composite KeyGen():\n\nhttps://github.com/lamps-wg/draft-composite-kem/blob/78af696ca5498dcf874089ccaacb89f9c87c3623/draft-ietf-lamps-pq-composite-kem.md?plain=1#L545\n* same issue as in composite-sigs: https://github.com/lamps-wg/draft-composite-sigs/tree/236-editorial-correction-related-to-the-first-appearance-of-mldsask-in-the-document\n\nhttps://github.com/lamps-wg/draft-composite-kem/blob/78af696ca5498dcf874089ccaacb89f9c87c3623/draft-ietf-lamps-pq-composite-kem.md?plain=1#L551\n* has to be mlkemSeed here\n\nComposite Decap()\n\nhttps://github.com/lamps-wg/draft-composite-kem/blob/78af696ca5498dcf874089ccaacb89f9c87c3623/draft-ietf-lamps-pq-composite-kem.md?plain=1#L677\n* has to be mlkemSeed here\n* needs additional mldsa.KeyGen()\n",
      "createdAt": "2025-07-18T11:28:10Z",
      "updatedAt": "2025-07-25T16:08:00Z",
      "closedAt": "2025-07-25T16:08:00Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDOKRPFO87BbwCp",
      "title": "RSA exponent",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/188",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As I understand it, the exponent of the RSA key is not restricted, although there's no specific text for that.  Explicit text should be added saying that any exponent MAY be used but 65537 is RECOMMENDED.",
      "createdAt": "2025-07-19T12:35:52Z",
      "updatedAt": "2025-08-17T15:48:47Z",
      "closedAt": "2025-08-17T15:48:47Z",
      "comments": []
    },
    {
      "number": 191,
      "id": "I_kwDOKRPFO87DTEQ_",
      "title": "Editorial corrections to version 08 from 2025.07.30",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/191",
      "state": "CLOSED",
      "author": "PiotrPopis",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "1. Section 2\n> (...) explicitly hybrid-aware. composite algorithms address\n\nexplicitly hybrid-aware. Composite algorithms address\nExplanation: capital letter\n\n2. Section 2\n> sence \n\nsense\n\n3. Section 2.2\n> (...) -- using its internal sequence of component keys as if they form a single key\n\n(...) -- using its internal concatenation of component keys as if they form a single key\n\n4. Section 3\n> keyss\n\nkeys\n\n5. Section 4.1\n> mlkemSK_\n\nmlkemSK\n\n6. Section 4.1\n> section Section 10.3.\n\nSection 10.3.\n\n7. Section 6.3\n> as as\n\nas\n\n8. Section 7.2\n> charactaristics \n\ncharacteristics\n\n9. Section 7.2\n> However SHA3 is used with X25519 and X448 SHA3-256 to match \n\nHowever SHA3-256 is used with X25519 and X448 to match \n\n10. Section 9.1.1\n> regisetered \n\nregistered \n\n11. Section 10.4\n> behaviour \n\nbehavior\n\n12. Appendix A\n> occaisionally \n\noccasionally\n\n",
      "createdAt": "2025-07-30T10:48:38Z",
      "updatedAt": "2025-08-17T15:48:47Z",
      "closedAt": "2025-08-17T15:48:47Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you Piotr, once again, for a very detailed reading!\n\n\"behaviour\" vs \"behavior\" ... but I'm Canadian and that's how that word is spelled here! \ud83d\ude43  ... yeah, I know, IETF uses American standard English. Fine Fine.\n",
          "createdAt": "2025-08-17T15:39:13Z",
          "updatedAt": "2025-08-17T15:39:13Z"
        }
      ]
    },
    {
      "number": 192,
      "id": "I_kwDOKRPFO87EQrol",
      "title": "Encoding to DER in obvious ways",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/192",
      "state": "CLOSED",
      "author": "bencemali",
      "authorAssociation": "NONE",
      "assignees": [
        "johngray-dev"
      ],
      "labels": [
        "wontfix?"
      ],
      "body": "Section 6.1 says the following:\n```\n... the composite value MUST be wrapped into a DER BIT STRING or OCTET STRING in the obvious ways.\n```\nTo me something like *obvious ways* seems unfitting for an RFC. This wording is especially misleading as the ASN.1 BIT STRING type was not intended to hold byte array like data, but a sequence of flags, and in examples like certificate `subjectPublicKey` fields, one explicitly needs to keep the trailing zeros (see OpenSSL's `ossl_asn1_string_set_bits_left` for example). This may be worth clarifying.",
      "createdAt": "2025-08-05T11:22:39Z",
      "updatedAt": "2025-09-21T21:13:27Z",
      "closedAt": "2025-09-21T21:13:27Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, we could clarify that. However, we're not any more vague than the ML-DSA in X.509 RFC, see:\n\nhttps://datatracker.ietf.org/doc/html/draft-ietf-lamps-dilithium-certificates-12#name-ml-dsa-public-keys-in-pkix\n\nCan you propose wording that you think would be clearer?",
          "createdAt": "2025-08-17T15:56:50Z",
          "updatedAt": "2025-08-17T15:57:07Z"
        },
        {
          "author": "bencemali",
          "authorAssociation": "NONE",
          "body": "@ounsworth\nI see. I still think \"obvious ways\" gives off the wrong impression. Maybe I would make the following changes for clarity:\n```diff\n- ... the composite value MUST be wrapped into a DER BIT STRING or OCTET STRING in the obvious ways.\n+ ... the composite value MUST be wrapped into a DER BIT STRING or OCTET STRING.\n```\n```diff\n- ... of the last octet becoming the last bit of the bit string.\n+ ... of the last octet becoming the last bit of the bit string. Truncation of trailing zeros SHALL NOT be performed and the unused-bits octet MUST be set to 0.\n```",
          "createdAt": "2025-08-18T08:56:39Z",
          "updatedAt": "2025-08-18T11:53:01Z"
        }
      ]
    },
    {
      "number": 193,
      "id": "I_kwDOKRPFO87GU3gO",
      "title": "Change domain separators to HPKE-style Labels?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/193",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This matches draft-cfrg-concrete-hybrid-kem.\n\nThat means the starship for X-Wing, and ASCII strings of the form `QSF-P256-MLKEM768-SHAKE256-SHA3256` ... need to coordinate with Richard Barnes about whether the KeyGen() PRG (\"SHAKE256\", in this case) is really an interop param.\n\nAnother advantage of this is that it nicely avoids the need to ask IANA to pre-allocate the OIDs so that we can roll the DomSep table. So we can close #131 .",
      "createdAt": "2025-08-16T15:10:10Z",
      "updatedAt": "2025-08-28T13:29:21Z",
      "closedAt": "2025-08-28T13:29:21Z",
      "comments": []
    },
    {
      "number": 198,
      "id": "I_kwDOKRPFO87Gv4bC",
      "title": "Choose a single encoding for each primitive",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/198",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This ticket a checklist that we have picked a single encoding for each underlying primitive.\n\n* ML-KEM\n  * Pub: Raw\n  * Priv: Raw Seed\n  * CT: Raw\n* RSA\n  * Pub: ____\n  * Priv: ____\n  * CT: ____\n* ECDH\n  * Pub: ____\n  * Priv: ____\n  * CT: ____\n* EdDH\n  * Pub: ____\n  * Priv: ____\n  * CT: ____\n\nThis information should be inserted into the draft either as a list or as a table.\n\nRelated to https://github.com/lamps-wg/draft-composite-sigs/issues/244",
      "createdAt": "2025-08-19T13:41:14Z",
      "updatedAt": "2025-08-20T13:41:13Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 199,
      "id": "I_kwDOKRPFO87IBU5d",
      "title": "Can the size table to turned into a table of maximum sizes?",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/199",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Dan Van Geest points out that a table of approximate sizes with text saying _\"MUST NOT perform strict length checking based on the values in this table\"_ is not all that useful, and potentially dangerous if people miss that sentence.\n\nNow that we have locked down the encoding for each component, and values like `e=65537`, it should be possible to calculate a maximum size for each entry in the table, which would make the table much more useful.",
      "createdAt": "2025-08-26T14:02:37Z",
      "updatedAt": "2025-08-27T00:35:11Z",
      "closedAt": "2025-08-27T00:35:11Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Duplicate of #176 ",
          "createdAt": "2025-08-27T00:35:11Z",
          "updatedAt": "2025-08-27T00:35:11Z"
        }
      ]
    },
    {
      "number": 200,
      "id": "I_kwDOKRPFO87Ieetd",
      "title": "EC public key is encoded as RAW, needs to be ECPoint",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/200",
      "state": "OPEN",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "TODO - Code bug - EC public key is RAW (X9.62) value, not an ECPoint which is what we decided to use. ",
      "createdAt": "2025-08-28T13:55:52Z",
      "updatedAt": "2025-08-28T14:54:12Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 201,
      "id": "I_kwDOKRPFO87IfTZy",
      "title": "Add Consolidated Algorithm Table for KEM",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/201",
      "state": "CLOSED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "janklaussner"
      ],
      "labels": [],
      "body": "Similar to https://github.com/lamps-wg/draft-composite-sigs/pull/254 in signatures, we want to do in KEM.",
      "createdAt": "2025-08-28T14:53:41Z",
      "updatedAt": "2025-09-21T21:12:45Z",
      "closedAt": "2025-09-21T21:12:45Z",
      "comments": []
    },
    {
      "number": 206,
      "id": "I_kwDOKRPFO87KzzcB",
      "title": "SHA2 vs SHA3 for the KEM combiner",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/206",
      "state": "OPEN",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is the only outstanding item not covered in https://github.com/lamps-wg/draft-composite-sigs/issues/244\n\nSHA2 vs SHA3 for the KEM combiner. Alignment with cms-mldsa which uses SHA2, vs alignment with cfrg-hybrid-kems which uses SHA3. MikeO is working with Richard Barnes. We need to re-survey the community on the operational requirements behind this point. It would be nice if we could just use SHA3 throughout, maybe except for the RSA composites which CFRG doesn't have.",
      "createdAt": "2025-09-10T13:50:14Z",
      "updatedAt": "2025-09-22T11:34:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Will need to update the FIPS Compliance section.\n\nSome pointers from Richard:\n\nApprovals analysis:\nSP800-227 approves the SP800-56Cr2 KDFs\nFIPS 140-3 IG D.P approves the counterless variant of the SP800-56Cr2 s4.1 provided the output is no longer than the hash function output, i.e. an approved hash can be a one-step KDF.\nSP800-131Ar2 approves SHA3 for all uses",
          "createdAt": "2025-09-22T11:34:33Z",
          "updatedAt": "2025-09-22T11:34:33Z"
        }
      ]
    },
    {
      "number": 208,
      "id": "I_kwDOKRPFO87L-Quc",
      "title": "Using Figures to list algorithm steps",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/208",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Figures are used to list algorithm steps, e.g. \"Figure 1: Composite-ML-KEM<OID>.KeyGen() -> (pk, sk)\".\n\nBecause the contents of the figure is just a sequence of lines of text, when reading the pdf and txt versions of the draft, it's not clear where the figure begins.  At a minimum these figures should be indented a number of spaces, but really do they need to be labeled figures at all?  The figure numbers aren't referenced from anywhere, \n",
      "createdAt": "2025-09-16T12:32:33Z",
      "updatedAt": "2025-09-21T21:49:51Z",
      "closedAt": "2025-09-21T21:49:50Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in b2c0085eb899ffc85f50b9005e6182c5bcbffc5a",
          "createdAt": "2025-09-21T21:49:51Z",
          "updatedAt": "2025-09-21T21:49:51Z"
        }
      ]
    },
    {
      "number": 209,
      "id": "I_kwDOKRPFO87L-ZCH",
      "title": "Timing invariance in KeyGen",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/209",
      "state": "CLOSED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft says keygen SHOULD be timing invariant if one of the algorithms fails.  Is this actually necessary?  You can't learn anything about the keys if you never use them because one of them failed.  Even if you keep the successful one and regen the failed one, is an attacker learning anything useful.  This seems like an unnecessary stipulation to include.",
      "createdAt": "2025-09-16T12:40:34Z",
      "updatedAt": "2025-09-21T22:15:20Z",
      "closedAt": "2025-09-21T22:15:20Z",
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in 269c11ae58725630084aefc10c322bf5ad927c42",
          "createdAt": "2025-09-21T22:15:20Z",
          "updatedAt": "2025-09-21T22:15:20Z"
        }
      ]
    },
    {
      "number": 211,
      "id": "I_kwDOKRPFO87M9dJ2",
      "title": "Roll the OIDs for -08",
      "url": "https://github.com/lamps-wg/draft-composite-kem/issues/211",
      "state": "OPEN",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-21T22:14:16Z",
      "updatedAt": "2025-09-21T22:14:16Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "PR_kwDOKRPFO85bsBcD",
      "title": "Adding a ML-KEM512_RSA2048 combo",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/3",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-02T15:59:27Z",
      "updatedAt": "2024-08-03T23:21:22Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "8ecdef1572329af10c78e3ebb26ed087116dd22e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mlkem512-rsa2048",
      "headRefOid": "fc99e0e2f27f08b26cc5c858b17cbbf901122c3e",
      "closedAt": "2023-10-02T22:53:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have changed the ASN.1 substantially enough in #4 that it's easier to just start this PR over again once that PR is merged.",
          "createdAt": "2023-10-02T22:53:29Z",
          "updatedAt": "2023-10-02T22:53:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 4,
      "id": "PR_kwDOKRPFO85buNe6",
      "title": "Removing CompositeKEMParams",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/4",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-02T22:17:04Z",
      "updatedAt": "2023-10-03T14:22:46Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e18c3c43c266b1c703dc03e6e438d5b2ef91046d",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_asn1_remove_params",
      "headRefOid": "3e56992462b1c2adcfb2e2194d96c1dbbcc43697",
      "closedAt": "2023-10-03T14:22:20Z",
      "mergedAt": "2023-10-03T14:22:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "1fb6913195222dfd8e61349c1fc2e7f73b9e494e"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Looks good! Other than needing to define the ASN.1 module OID: id-mod-composite-kems\r\n> \r\n> I was able to compile the ASN.1, so that is great!\r\n\r\nYeah, I replace the `TBDMOD` with `999` when I'm test-compiling, but I've gotta leave something that's easy for IANA to CTRL+F replace.",
          "createdAt": "2023-10-03T14:18:19Z",
          "updatedAt": "2023-10-03T14:18:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85ikr5T",
          "commit": {
            "abbreviatedOid": "3a3f3d3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!   Other than needing to define the ASN.1 module OID:\r\nid-mod-composite-kems\r\n\r\nI was able to compile the ASN.1, so that is great!",
          "createdAt": "2023-10-03T00:02:33Z",
          "updatedAt": "2023-10-03T00:02:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOKRPFO85bzF-Z",
      "title": "Added id-MLKEM512-RSA2048-KMAC128",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/5",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-03T14:30:06Z",
      "updatedAt": "2023-10-04T15:23:29Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "1fb6913195222dfd8e61349c1fc2e7f73b9e494e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_add_MLKEM512-RSA2048",
      "headRefOid": "4cdaef1fa7c88ec971b57ec0a16dd0c9476d189a",
      "closedAt": "2023-10-04T15:23:20Z",
      "mergedAt": "2023-10-04T15:23:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "dc2a6d100628b032e9bfac40a57edf842ef43e09"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOKRPFO85b61Iv",
      "title": "Demoted RSA 3072 to 128-bit Level 1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/6",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This relates to the LAMPS mailist discussion:\r\n\r\nhttps://mailarchive.ietf.org/arch/msg/spasm/xSKIRjtMSJ8M7N7Fx3X09ASUHC8/\r\n\r\nThe main branch is option 3.1.\r\nThis PR is option 3.2.\r\n\r\nWe should wait to merge this PR pending the results of that discussion thread.",
      "createdAt": "2023-10-04T16:09:56Z",
      "updatedAt": "2024-08-03T23:21:06Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6f3d6ee7dfb5df2492b5d6a8bcd2495884ae6e27",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_downgrade_RSA3072",
      "headRefOid": "efba46de1223f1868aa6d0e94686fdd96ad239d2",
      "closedAt": "2023-10-24T17:56:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "This was already included in the john_integration branch Merge #8 ",
          "createdAt": "2023-10-24T17:56:28Z",
          "updatedAt": "2023-10-24T17:56:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85jHrif",
          "commit": {
            "abbreviatedOid": "efba46d"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-10-07T01:46:16Z",
          "updatedAt": "2023-10-07T01:46:41Z",
          "comments": [
            {
              "originalPosition": 1,
              "body": "On Line 12 you do not need to import SIGNATURE-ALGORITHM or ParamOptions.   I removed them and was able to compile this ASN.1  ",
              "createdAt": "2023-10-07T01:46:16Z",
              "updatedAt": "2023-10-07T01:46:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOKRPFO85b9Pfi",
      "title": "synced with cfrg-kem-combiners-04 and rfc5990bis-05",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/7",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-10-05T02:31:29Z",
      "updatedAt": "2024-08-03T23:20:54Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6f3d6ee7dfb5df2492b5d6a8bcd2495884ae6e27",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mike_sync_cfrg-kem-combiner-04",
      "headRefOid": "12f2ba3d9e6f87ab863797c798e0746d5e834309",
      "closedAt": "2023-10-24T17:53:45Z",
      "mergedAt": "2023-10-24T17:53:45Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "12f2ba3d9e6f87ab863797c798e0746d5e834309"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85jHrcO",
          "commit": {
            "abbreviatedOid": "12f2ba3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look good Mike.   Thanks for making sure it is up to date.",
          "createdAt": "2023-10-07T01:43:27Z",
          "updatedAt": "2023-10-07T01:43:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO85k8PYr",
          "commit": {
            "abbreviatedOid": "12f2ba3"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changes look great!",
          "createdAt": "2023-10-23T21:00:18Z",
          "updatedAt": "2023-10-23T21:00:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOKRPFO85dqxZ6",
      "title": "John integration",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/8",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The version of this .md file and asn1 module integrated Mike's other two pull request plus fixes up a few other nits.   ",
      "createdAt": "2023-10-24T17:52:40Z",
      "updatedAt": "2023-10-24T17:53:42Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "945a58d29ce79bd8ad302f47e03cf5d52869378e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "john_integration",
      "headRefOid": "746c0b1eb4d160cf9df130d8ebffe186310a22dc",
      "closedAt": "2023-10-24T17:53:42Z",
      "mergedAt": "2023-10-24T17:53:42Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "d6a1ebdc2a5b920fbbd20f1cc33410304471e3c3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 11,
      "id": "PR_kwDOKRPFO85lPYQe",
      "title": "Aligned with X-Wing",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/11",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-01-27T22:50:55Z",
      "updatedAt": "2024-07-07T15:01:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e9db1fa3e40edcca15acbee1d19db1c3b7ea9089",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_xwing",
      "headRefOid": "b355af26d5fdfc0f009fee63d3a6d6739d78f57e",
      "closedAt": "2024-07-07T15:01:39Z",
      "mergedAt": "2024-07-07T15:01:39Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "5c9f8ea429ce1d2bcd9ff0c8e65908c19dc2911f"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #13 ",
          "createdAt": "2024-02-06T14:59:53Z",
          "updatedAt": "2024-02-06T14:59:53Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should align with the openpgp-pqc draft:\r\n\r\n~~~\r\nKEK = SHA3-256(counter || ecdhKeyShare || mlkemKeyShare || ecdhCipherText ||\r\n ecdhPublicKey  || mlkemCipherText || mlkemPublicKey || domSep || len(domSep) \r\n || algID )\r\n~~~\r\n\r\nSee parallel github issue: \r\nhttps://github.com/openpgp-pqc/draft-openpgp-pqc/issues/127",
          "createdAt": "2024-07-06T01:33:02Z",
          "updatedAt": "2024-07-06T01:33:02Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "TODO: this is a massive PR. Review again when I'm less sleep-deprived.",
          "createdAt": "2024-07-06T04:15:02Z",
          "updatedAt": "2024-07-06T04:15:02Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #27 \r\nCloses #2 \r\nCloses #26 ",
          "createdAt": "2024-07-06T04:15:27Z",
          "updatedAt": "2024-07-06T04:17:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85uG_7x",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-27T23:41:09Z",
          "updatedAt": "2024-01-27T23:41:09Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Nice to see X-Wing is a FIPS standard ;).",
              "createdAt": "2024-01-27T23:41:09Z",
              "updatedAt": "2024-01-27T23:41:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHdDk",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:03:21Z",
          "updatedAt": "2024-01-28T09:05:56Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "\ud83d\udc4d",
              "createdAt": "2024-01-28T09:03:21Z",
              "updatedAt": "2024-01-28T09:05:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHihZ",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:47:04Z",
          "updatedAt": "2024-01-28T09:47:29Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "```suggestion\nHowever, optimizations may be made in the following ways:\n```\n",
              "createdAt": "2024-01-28T09:47:05Z",
              "updatedAt": "2024-01-28T09:47:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85uHi48",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dconnolly",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-28T09:54:15Z",
          "updatedAt": "2024-01-28T09:54:19Z",
          "comments": [
            {
              "originalPosition": 93,
              "body": "This is a good question, not sure yet",
              "createdAt": "2024-01-28T09:54:15Z",
              "updatedAt": "2024-01-28T09:54:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85vL6sc",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T14:33:41Z",
          "updatedAt": "2024-02-06T14:33:41Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Good catch. Fixed.",
              "createdAt": "2024-02-06T14:33:41Z",
              "updatedAt": "2024-02-06T14:33:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85vhC6P",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "csosto-pk",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-08T18:12:55Z",
          "updatedAt": "2024-02-08T18:12:55Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "> Similarly, RSA-KEM {{I-D.ietf-lamps-rfc5990bis}} is a bijective map between the shared secret `Z` and the ciphertext `C` and so is naturally immune to ciphertext collision. This leaves only ECDH, X25519 and X448 which are not ciphertext collision resistant and for which the ciphertexts need to be included in the derivation of the shared secret.\r\n\r\nI am not sure I get that. Why is RSA-KEM in rfc5990bis CCR?\r\n\r\nrfc5990bis defines\r\n\r\n```\r\nCEK <-  random 256-bits\r\nz <-$ [0, n);\r\nc <- z^e mod n;\r\nWK <- ENCRYPT(KDF(z), CEK);\r\nCC <- (WK, c)\r\nRSA-ENCAPS(pubkey=(e,n)) :=  (CC, CEK) \r\n```\r\n\r\nSomeone that can break `c` or `WK` can produce a different `CC'` which leads to the same `CEK` by producing a different value of  `c`. ML-KEM did not have that issue because there is only one random `m` used for the encapsulation.\r\n\r\n",
              "createdAt": "2024-02-08T18:12:55Z",
              "updatedAt": "2024-02-08T18:12:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85wTysv",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "dstebila",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-16T02:56:57Z",
          "updatedAt": "2024-02-16T02:56:57Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "I'm just looking at this now, so apologies if I'm mistaken. But I think the argument that the mapping between RSA ciphertext and plaintext is bijective only holds once you fix the modulus.  So I think you would need some binding to the modulus in the KDF input to achieve bijectivity.  (But do not take this as a proof that it's okay if you have this -- would need more careful consideration than I've given it so far.)",
              "createdAt": "2024-02-16T02:56:57Z",
              "updatedAt": "2024-02-16T02:56:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86A1Adq",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-06T04:14:40Z",
          "updatedAt": "2024-07-06T04:14:41Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "To err on the safe side, this has been changed to:\r\n\r\n> Ciphertext collision resistance is not guaranteed for either RSA-KEM or ECDH, therefore these ciphertexts are bound to the key derivation.",
              "createdAt": "2024-07-06T04:14:41Z",
              "updatedAt": "2024-07-06T04:14:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86A21dx",
          "commit": {
            "abbreviatedOid": "5fb7140"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-07T13:13:09Z",
          "updatedAt": "2024-07-07T13:13:09Z",
          "comments": [
            {
              "originalPosition": 257,
              "body": "Isn't the definition of CCR that we care about here that you can't have `z -> c` and `z' -> c` where `z != z'` ? Since we're not borrowing the symmetric WRAP primitive from 5990, I don't see why that matters?",
              "createdAt": "2024-07-07T13:13:09Z",
              "updatedAt": "2024-07-07T13:13:09Z"
            }
          ]
        }
      ]
    },
    {
      "number": 14,
      "id": "PR_kwDOKRPFO85mKTX8",
      "title": "Changed title from 'Internet PKI' to 'PKIX and CMS'. Closes #1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/14",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-06T15:48:58Z",
      "updatedAt": "2024-02-14T15:44:03Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "cad051fe5dbcc17e8e4004bfd1c5333b9d47749f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_sf_comments",
      "headRefOid": "0a978937cc7192e6dea167eec971384282ab1423",
      "closedAt": "2024-02-14T15:44:00Z",
      "mergedAt": "2024-02-14T15:44:00Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "35040231761a50c992c75598c14014d66e36d5ad"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "PR_kwDOKRPFO85mL58Q",
      "title": "Added a Use In CMS section",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/15",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Adding this section here avoids the need for a wrapper draft telling you how to use composite KEM in CMS.\r\n\r\nCloses #12 ",
      "createdAt": "2024-02-06T20:03:04Z",
      "updatedAt": "2024-03-02T22:18:04Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "7c67eb88a0e162b00965b20289623482461fc5e3",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_use_in_cms",
      "headRefOid": "b4d7f10d0d9df568418bbd00d2ad28a9c2cd11fa",
      "closedAt": "2024-03-02T22:17:51Z",
      "mergedAt": "2024-03-02T22:17:50Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "5c2e3c04d64682a6b556fa3114836149b935c64a"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Note-to-self: look at whether we need to specify higher levels of KDF and WRAP for the stronger algorithms -- see how DVG did it in the CMS-Kyber draft.\r\n\r\nUPDATE: done.",
          "createdAt": "2024-02-13T20:41:49Z",
          "updatedAt": "2024-02-14T18:14:36Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Question: does the `## Certificate Conventions` section collide with the recently-merged Key Usage section?\r\n\r\nUPDATE: I think this is fine because this section is intended to be able to be standalone if LAMPS wants the alg definitions, and the \"Use in CMS\" to become separate documents.",
          "createdAt": "2024-02-14T15:41:32Z",
          "updatedAt": "2024-02-14T18:14:28Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We also need to add the SMIME-CAPS to the ASN.1 (find a good example doc).",
          "createdAt": "2024-02-16T15:50:47Z",
          "updatedAt": "2024-02-16T15:50:47Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the review @danvangeest \r\n\r\nStill TODO:\r\n\r\n* We also need to add the SMIME-CAPS to the ASN.1 (find a good example doc).\r\n  * UPDATE: done.",
          "createdAt": "2024-02-29T23:10:58Z",
          "updatedAt": "2024-03-01T16:35:39Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Review comments from Russ:\r\n\r\n> Mike:\r\n>\r\n>You are using a mix of \"wrap algorithm\" and \"key-encryption algorithm\".  CMS usually uses the later.  Line 683 got it just right.  That is, id-aes256-Wrap identifies a particular key-encryption algorithm.  I am not sure the text at the top is aligned.\r\n>\r\n>Line 663: I think you need o say how that happens.  In some cases a different OID is used, but in others a different parameter value is used.\r\n>\r\n>Line 675: make it clear thet it is the KEM.Encaps(pk).  The function is specific to the KEM identified in 'kem'.\r\n>\r\n>Line 681: Do any of your composite KEM algorithms REQUIRE a ukm?  I can imagine a way to use DH and ECDH that require a UKM.\r\n>\r\n>Russ\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2024-03-01T19:09:56Z",
          "updatedAt": "2024-03-01T19:09:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO85vPR3s",
          "commit": {
            "abbreviatedOid": "abebe14"
          },
          "author": "job",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T20:40:04Z",
          "updatedAt": "2024-02-06T20:40:05Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Typo: \u201cwith with\u201d",
              "createdAt": "2024-02-06T20:40:05Z",
              "updatedAt": "2024-02-06T20:40:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85v_HOG",
          "commit": {
            "abbreviatedOid": "abebe14"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-13T20:04:18Z",
          "updatedAt": "2024-02-13T20:04:19Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Thanks. Fixed.",
              "createdAt": "2024-02-13T20:04:19Z",
              "updatedAt": "2024-02-13T20:04:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85wL5I0",
          "commit": {
            "abbreviatedOid": "3d77392"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-15T09:05:24Z",
          "updatedAt": "2024-02-15T10:43:04Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "```suggestion\r\n`kdf` identifies the key-derivation function (KDF). Note that the KDF used for CMS RecipientInfo process MAY be different than the KDF used within the composite KEM Algorithm, which MAY be different than the KDFs (if any) used within the component KEMs of the composite KEM Algorithm.\r\n```",
              "createdAt": "2024-02-15T09:08:13Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 171,
              "body": "```suggestion\r\nThe digitalSignature and dataEncipherment values MUST NOT be present. That is, a public key intended to be employed only with a composite KEM algorithm MUST NOT also be employed for data encryption or for digital signatures. This requirement does not carry any particular security consideration; only the convention that KEM keys be identifed with the `keyEncipherment` key usage.\r\n```",
              "createdAt": "2024-02-15T10:09:11Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n{: #tab-cms-kdf-wrap title=\"REQUIRED pairings for CMS KDF and WRAP\"}\r\n```",
              "createdAt": "2024-02-15T10:10:43Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 130,
              "body": "```suggestion\r\n\r\n\\[EDNOTE: OIDs for KMAC-based KDFs are expected. Should they be used in place of the HKDF-with-sha3 OIDs above?]\r\n\r\nwhere:\r\n```\r\nI assume this because SHA3 isn't great to use with HKDF, and implementers will need KMAC KDF implementations anyways.\r\n",
              "createdAt": "2024-02-15T10:11:14Z",
              "updatedAt": "2024-02-29T23:09:43Z"
            },
            {
              "originalPosition": 135,
              "body": "```suggestion\r\nImplementors MAY safely substitute stronger KDF and WRAP algorithms than those indicated; for example `id-alg-hkdf-with-sha3-512` and `id-aes256-Wrap` MAY be safely used in place of `id-alg-hkdf-with-sha3-384`and `id-aes192-Wrap`, for example, where SHA3-384 or AES-192 are not supported.\r\n```",
              "createdAt": "2024-02-15T10:11:52Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 106,
              "body": "```suggestion\r\nWhen a particular Composite KEM OID is supported, an implementation MUST support the corresponding KDF algorithm identifier in {{tab-cms-kdf-wrap}}.\r\n```\r\nid-alg-hkdf-with-sha3-256 is too low a bar for NIST level 5 KEMs.",
              "createdAt": "2024-02-15T10:14:22Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 108,
              "body": "```suggestion\r\nWhen a particular Composite KEM OID is supported, an implementation MUST support the corresponding WRAP algorithm identifier in {{tab-cms-kdf-wrap}}.\r\n```\r\nAES-Wrap-128 is too low a bar for NIST level 5 KEMs.",
              "createdAt": "2024-02-15T10:14:40Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\nThe following table lists the REQUIRED KDF and WRAP algorithms to preserve security and performance characteristics of each composite algorithm.\r\n```",
              "createdAt": "2024-02-15T10:14:52Z",
              "updatedAt": "2024-02-15T10:43:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85xHL4Y",
          "commit": {
            "abbreviatedOid": "3d77392"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Sorry! I created this review last week but forgot to actually submit it!",
          "createdAt": "2024-02-23T09:35:15Z",
          "updatedAt": "2024-02-23T09:35:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO85x_TDm",
          "commit": {
            "abbreviatedOid": "b38b617"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T00:56:26Z",
          "updatedAt": "2024-03-02T00:56:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I don't know anything about ASN.1 but shouldn't these be `kema-MLKEM512-ECDH-P256-KMAC128.&smimeCaps`, etc.  I just base this on what I see in RFC 5911.",
              "createdAt": "2024-03-02T00:56:26Z",
              "updatedAt": "2024-03-02T00:56:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO85yAjuJ",
          "commit": {
            "abbreviatedOid": "b38b617"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T22:13:53Z",
          "updatedAt": "2024-03-02T22:13:53Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Yup, sure should. Good catch.",
              "createdAt": "2024-03-02T22:13:53Z",
              "updatedAt": "2024-03-02T22:13:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOKRPFO85myUbx",
      "title": "Added a Key Usage section.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/18",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-13T18:59:24Z",
      "updatedAt": "2024-02-14T15:42:35Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d715b285547da9e1e5cdcc6402f9ee12467293b0",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_keyusage",
      "headRefOid": "883493f8be12e12f0f990747504fb602a571a40f",
      "closedAt": "2024-02-14T15:42:32Z",
      "mergedAt": "2024-02-14T15:42:32Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "c7d185a40c1fab7398209130efaf9f9e7d68355f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "PR_kwDOKRPFO85myV9-",
      "title": "Added a justification referencing BSI and ANSSI",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/19",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-13T19:04:51Z",
      "updatedAt": "2024-08-03T23:20:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d715b285547da9e1e5cdcc6402f9ee12467293b0",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_justification",
      "headRefOid": "b3d679177abaf074a95648a7f30e431b7f151f3f",
      "closedAt": "2024-02-14T15:38:46Z",
      "mergedAt": "2024-02-14T15:38:46Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "cbbf3553e9500e82bfb603e1020ad80ab99e35be"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "PR_kwDOKRPFO85ofl_1",
      "title": "Swapped from hkdf-sha3 to kmac-kdf",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/23",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #22 ",
      "createdAt": "2024-03-02T22:52:30Z",
      "updatedAt": "2024-03-02T22:55:48Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f3cbed9e55465cf52a19b176ec3866d630d50d60",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_kmac_kdf",
      "headRefOid": "29996ec0b628b5b9d5b729e7d474e6f767b00355",
      "closedAt": "2024-03-02T22:55:44Z",
      "mergedAt": "2024-03-02T22:55:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "7182d2070fb8cc90f20c0aee2995fadd4c73f629"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 30,
      "id": "PR_kwDOKRPFO850nWea",
      "title": "Lifted AES-192 to AES-256. Closes #25",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/30",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-07T15:05:48Z",
      "updatedAt": "2024-07-08T14:37:27Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "5c9f8ea429ce1d2bcd9ff0c8e65908c19dc2911f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_25",
      "headRefOid": "c41d13fa5423c3fee6d6bfa6e57efbb183583788",
      "closedAt": "2024-07-07T15:11:22Z",
      "mergedAt": "2024-07-07T15:11:22Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "f2f42ca5d4cd09b4e6e2b6b796799b85475b909e"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Mike.  Edits look really great and justification text is also good.",
          "createdAt": "2024-07-08T14:37:26Z",
          "updatedAt": "2024-07-08T14:37:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 32,
      "id": "PR_kwDOKRPFO850nq02",
      "title": "Replaced RSA-KEM with RSA-OAEP",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/32",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #21 \r\nCloses #24 ",
      "createdAt": "2024-07-07T20:01:19Z",
      "updatedAt": "2024-07-09T21:11:20Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "854b646b1d5e4980d28fd8d0544cd41414fc7540",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_rsa-oaep",
      "headRefOid": "aa69c0300a5ef1cb55f2fd8340888b1c01519c7e",
      "closedAt": "2024-07-07T20:05:39Z",
      "mergedAt": "2024-07-07T20:05:39Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "9c7c0842388dd2bc031ab56772088f4e74f36f8a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86BMYpc",
          "commit": {
            "abbreviatedOid": "aa69c03"
          },
          "author": "dstebila",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-09T21:11:20Z",
          "updatedAt": "2024-07-09T21:11:20Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Why is this title `DHKEM.Encaps` -- shouldn't it be something like `RSAOAEPKEM.Encaps`?",
              "createdAt": "2024-07-09T21:11:20Z",
              "updatedAt": "2024-07-09T21:11:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "PR_kwDOKRPFO8505OXw",
      "title": "Rename DHKEM to RSAKEM where appropriate",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/36",
      "state": "MERGED",
      "author": "dconnolly",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-09T22:52:24Z",
      "updatedAt": "2024-07-09T23:29:52Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "20c8eba3deb1dc8a874c7e60610b72460c92cbac",
      "headRepository": "dconnolly/draft-composite-kem",
      "headRefName": "dconnolly-patch-1",
      "headRefOid": "ea78b5561f196c12de0ab07bd1b3a277193344dc",
      "closedAt": "2024-07-09T23:29:51Z",
      "mergedAt": "2024-07-09T23:29:51Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "71b98a70e405b3d4c5848d40a4ce5afbde8d14b1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 53,
      "id": "PR_kwDOKRPFO853DCLJ",
      "title": "Alg List Adjustments",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/53",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-31T22:56:40Z",
      "updatedAt": "2024-08-29T20:39:46Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f1e57323a77e9edea06e507cdd863ef6a208e1ed",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_list_trim",
      "headRefOid": "7f066cda04c4d941ac7d28971f186621f4d31776",
      "closedAt": "2024-08-29T20:39:43Z",
      "mergedAt": "2024-08-29T20:39:43Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "cebe4bf67f85968eabb79f6aecc328b57323bfd8"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #47 ",
          "createdAt": "2024-07-31T23:02:17Z",
          "updatedAt": "2024-07-31T23:02:17Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #39",
          "createdAt": "2024-08-03T23:12:37Z",
          "updatedAt": "2024-08-03T23:12:37Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The MLKEM-1024 combos should be offered with both HKDF-SHA2 and SHA3.",
          "createdAt": "2024-08-14T14:52:32Z",
          "updatedAt": "2024-08-14T14:52:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86HF863",
          "commit": {
            "abbreviatedOid": "8a8c430"
          },
          "author": "sergemister",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:36:31Z",
          "updatedAt": "2024-08-28T14:36:31Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "Would it be clearer to say \"i.e. the default salt is used\"?  Or say \"HashLen zeros\" instead of \"all zeros\".  The salt in RFC 5869 can vary in length, and we don't want an implementation to specify a string of zeros of some other length.",
              "createdAt": "2024-08-28T14:36:31Z",
              "updatedAt": "2024-08-28T14:36:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86HF1lU",
          "commit": {
            "abbreviatedOid": "ae0f651"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:26:15Z",
          "updatedAt": "2024-08-29T19:53:23Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "Fix the \"First Algorithm\" column.",
              "createdAt": "2024-08-28T14:26:15Z",
              "updatedAt": "2024-08-29T19:53:23Z"
            },
            {
              "originalPosition": 68,
              "body": "Fix this, then good to merge.",
              "createdAt": "2024-08-28T14:32:14Z",
              "updatedAt": "2024-08-29T19:53:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOKRPFO853WKpM",
      "title": "Combiner tweaks",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/55",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-03T23:47:53Z",
      "updatedAt": "2024-08-28T14:34:32Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2d6b93f6d35fa31c16c42d8da5795e11ee68f550",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_combiner_tweaks",
      "headRefOid": "833e2fbb379c0f0c41ff130d775ddf7e26a0159c",
      "closedAt": "2024-08-28T14:34:28Z",
      "mergedAt": "2024-08-28T14:34:28Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "f4a123a27c77d596366a3cf7a45d2a4b7ffb8d8f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 56,
      "id": "PR_kwDOKRPFO853ghn2",
      "title": "Editorial changes",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/56",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-06T00:35:56Z",
      "updatedAt": "2024-09-28T17:00:38Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_editorial",
      "headRefOid": "fe3fa56fa8a22b4a82fcc5062656ba893a6c6e50",
      "closedAt": "2024-09-28T17:00:29Z",
      "mergedAt": "2024-09-28T17:00:29Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "b9c8f48b9eb803bc47afc448b2808bb49723df64"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The security considerations need more work, especially the one about key reuse.\r\n\r\nAnother argument against key reuse is documented in https://github.com/lamps-wg/draft-composite-sigs/issues/49",
          "createdAt": "2024-09-25T15:04:09Z",
          "updatedAt": "2024-09-25T15:04:09Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #72 ",
          "createdAt": "2024-09-27T14:51:25Z",
          "updatedAt": "2024-09-27T14:51:25Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR has not been fully reviewed by the author's group, but I have been over it several times and I am merging it to close off all the related Issues.",
          "createdAt": "2024-09-28T16:58:03Z",
          "updatedAt": "2024-09-28T16:58:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86K6Ibj",
          "commit": {
            "abbreviatedOid": "e1202d8"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "2 small issues, one question",
          "createdAt": "2024-09-26T08:26:06Z",
          "updatedAt": "2024-09-26T09:20:46Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Its already -04",
              "createdAt": "2024-09-26T08:26:07Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            },
            {
              "originalPosition": 209,
              "body": "Is there a reason why it says \u201eshould\u201c and not \u201eshall\u201c or \u201emust\u201c? Proposal: \r\n[..] output shall be truncated [\u2026] by using the leftmost bits.",
              "createdAt": "2024-09-26T08:56:52Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            },
            {
              "originalPosition": 302,
              "body": "Typo: \u201eCUrve\u201c",
              "createdAt": "2024-09-26T09:19:07Z",
              "updatedAt": "2024-09-26T09:20:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86HGGY7",
          "commit": {
            "abbreviatedOid": "fe3fa56"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:49:02Z",
          "updatedAt": "2024-09-28T16:55:30Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "typo \"achaive\".",
              "createdAt": "2024-08-28T14:49:03Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 18,
              "body": "We should think about this more. ML-KEM's FO requires the public key anyway, so the ML-KEM's private key needs to have it anyway, so we don't need to duplicate it at the composite layer. Same for RSA: the public key is a subset of the private key. We only really need to think about ECC (RFC 5915). Perhaps we need to treat ECC as a special case here?\r\n\r\nCertainly, the \"MUST\" needs to be broken out into cases.",
              "createdAt": "2024-08-28T14:59:01Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 41,
              "body": "Done",
              "createdAt": "2024-09-26T15:43:20Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            },
            {
              "originalPosition": 18,
              "body": "Done",
              "createdAt": "2024-09-28T14:13:31Z",
              "updatedAt": "2024-09-28T16:55:30Z"
            }
          ]
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOKRPFO854BS5m",
      "title": "RSA-OAEP tweaks.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/57",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #35",
      "createdAt": "2024-08-10T22:11:44Z",
      "updatedAt": "2024-09-12T21:07:28Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "bbb08d15cde69aff6bcd6f751561c98668084de8",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_rsa-oaep-fix",
      "headRefOid": "7eae90b8aacec762dbc10eaa5d1614b43a50500f",
      "closedAt": "2024-09-12T20:56:13Z",
      "mergedAt": "2024-09-12T20:56:13Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "be23fd95e0964c49151786b172cc94b5e289db28"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After I make the two changes noted above, I am ok to go ahead and merge this.",
          "createdAt": "2024-09-11T14:53:30Z",
          "updatedAt": "2024-09-11T14:53:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86HGDcg",
          "commit": {
            "abbreviatedOid": "cc4086d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-28T14:45:31Z",
          "updatedAt": "2024-09-05T18:44:57Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "We do not believe that passing domSep down into RSA-OAEP does not give any security advantage, so it would simplify implementations if we leave OAEP's `L` empty because empty is the standard way to implement PKCS#1 OAEP.\r\n\r\nChange to empty string.",
              "createdAt": "2024-08-28T14:45:31Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            },
            {
              "originalPosition": 106,
              "body": "Change to empty string, ie fixed value as per 8017.",
              "createdAt": "2024-08-28T14:46:18Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            },
            {
              "originalPosition": 106,
              "body": "Also change id-pSpecified to id-empty or whatever.",
              "createdAt": "2024-08-28T14:46:48Z",
              "updatedAt": "2024-09-05T18:44:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86I7xeb",
          "commit": {
            "abbreviatedOid": "17591e8"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-11T14:40:56Z",
          "updatedAt": "2024-09-11T14:52:51Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "To match 9180, this should be \"Encap()\" and \"Decap()\".\r\nTODO: change throughout the document.",
              "createdAt": "2024-09-11T14:40:56Z",
              "updatedAt": "2024-09-11T14:52:51Z"
            },
            {
              "originalPosition": 117,
              "body": "Turn this into a real note.\r\n\"... since the mask length will be constant for each composite algorithm, implementations could pre-compute and hard-code the mask length value.\"",
              "createdAt": "2024-09-11T14:52:42Z",
              "updatedAt": "2024-09-11T14:52:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 66,
      "id": "PR_kwDOKRPFO856xUDp",
      "title": "ASN.1 tweaks. Closes #34",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/66",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #34 ",
      "createdAt": "2024-09-08T14:27:21Z",
      "updatedAt": "2024-09-08T14:32:32Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "bbb08d15cde69aff6bcd6f751561c98668084de8",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_asn1_fix_34",
      "headRefOid": "08a2d909be83b3f6d7c27ac414b18cba0dfd51da",
      "closedAt": "2024-09-08T14:32:29Z",
      "mergedAt": "2024-09-08T14:32:29Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "03278690c4c51cb487c0a3cf6394dfcb0bf01483"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 70,
      "id": "PR_kwDOKRPFO858sLI9",
      "title": "Updated ASN.1 module for Carl's feedback.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/70",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #29 \r\n\r\n(I think I incorrectly tagged this against #26 in the git commit)",
      "createdAt": "2024-09-25T17:37:10Z",
      "updatedAt": "2024-09-26T14:45:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "621cd6172f85737deb63552ed656b0e5ce989e30",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_asn1_29",
      "headRefOid": "2eb343caadc6a3990d8018c1dd797a203ca51011",
      "closedAt": "2024-09-26T14:45:15Z",
      "mergedAt": "2024-09-26T14:45:15Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 71,
      "id": "PR_kwDOKRPFO8581s1c",
      "title": "Mikeo key reuse",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/71",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-09-26T19:23:41Z",
      "updatedAt": "2024-10-17T20:48:02Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "43d8fd88aa950b480ba2d8ba6c1fd5a95a897fa7",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_key_reuse",
      "headRefOid": "e195957eec0b2463013b8e32194c4860582aa02e",
      "closedAt": "2024-10-17T20:47:57Z",
      "mergedAt": "2024-10-17T20:47:57Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "15f90210a93cddb819ddb3195322968426d9e910"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86LajL7",
          "commit": {
            "abbreviatedOid": "d014c63"
          },
          "author": "br-hale",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T02:17:06Z",
          "updatedAt": "2024-10-01T02:17:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Suggested edit:\r\n\r\nWhen using single-algorithm cryptography, the best practice is to always generate fresh keying material for each purpose, for example when renewing a certificate, or obtaining both a TLS and S/MIME certificate for the same device, however in practice key reuse in such scenarios is not always catastrophic to security and therefore often tolerated. ",
              "createdAt": "2024-10-01T02:17:06Z",
              "updatedAt": "2024-10-01T02:17:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86LaqKx",
          "commit": {
            "abbreviatedOid": "d014c63"
          },
          "author": "br-hale",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-01T02:57:46Z",
          "updatedAt": "2024-10-01T02:57:47Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Suggested edit:\r\n\r\n\"However there is still a risk of key reuse which relates to certificate revocation, as well as general key reuse security issues.\"",
              "createdAt": "2024-10-01T02:57:46Z",
              "updatedAt": "2024-10-01T02:57:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86NRgVW",
          "commit": {
            "abbreviatedOid": "4cfcd21"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2024-10-15T17:58:06Z",
          "updatedAt": "2024-10-15T19:02:36Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "...eleven specific pairwise combinations...\r\ncount is currently nine, right?",
              "createdAt": "2024-10-15T17:58:06Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            },
            {
              "originalPosition": 197,
              "body": "[...]and therefore IND-CCA2 secure so, long as [...]\r\n-> [...] secure, so long as [...]",
              "createdAt": "2024-10-15T18:35:29Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            },
            {
              "originalPosition": 227,
              "body": "is this statement true? Afaik its more complicated in the real world. Is there an RFC describing this?",
              "createdAt": "2024-10-15T18:59:06Z",
              "updatedAt": "2024-10-15T19:02:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDOKRPFO85-VfAx",
      "title": "Added text about fixed-length inputs and ML-KEM decaps failures",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/75",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #74 \r\nCloses #67 ",
      "createdAt": "2024-10-11T12:04:02Z",
      "updatedAt": "2024-10-17T19:50:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b9c8f48b9eb803bc47afc448b2808bb49723df64",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_lengths",
      "headRefOid": "0088399e87e1ff59189c68bdd4e27d4cf624f95e",
      "closedAt": "2024-10-17T19:50:25Z",
      "mergedAt": "2024-10-17T19:50:25Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "0fbb50682911cee9aa5bb7c9dc2ad1f3651b5d7a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86NRePO",
          "commit": {
            "abbreviatedOid": "bd062a4"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T17:55:08Z",
          "updatedAt": "2024-10-15T17:55:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOKRPFO85-liWU",
      "title": "Add explicit ALgorithmIdentifiers of component keys.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/76",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-14T19:49:10Z",
      "updatedAt": "2024-10-21T13:52:44Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b9c8f48b9eb803bc47afc448b2808bb49723df64",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "20-add-a-new-section-explicitly-list-spki-algids",
      "headRefOid": "2dc3ed64c60fbe72c829c7a5542fa928f8be732d",
      "closedAt": "2024-10-18T20:10:01Z",
      "mergedAt": "2024-10-18T20:10:01Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "9a74e4a2de8be612643d3e735356b2687aeb5a40"
      },
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "Question to group: for RSA key AlgIds it is possible to be very specific on its usage. Do we want/need this?",
          "createdAt": "2024-10-15T17:45:48Z",
          "updatedAt": "2024-10-15T17:45:48Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This does not yet provide an encoding of OAEP parameters. We need to address that before merging.\r\n\r\nUpdate: Just need John to provide a DER encoding of the RSA-OAEP params.",
          "createdAt": "2024-10-17T19:44:04Z",
          "updatedAt": "2024-10-17T21:09:38Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "@ounsworth , @johngray-dev : added DER encoding and some places where RSA 4096 combo was missing... I assumed that the OAEP params for RSA 4096 are the same as for RSA 2048",
          "createdAt": "2024-10-18T12:30:28Z",
          "updatedAt": "2024-10-18T12:30:28Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks Jan! I'm going to merge this now.",
          "createdAt": "2024-10-18T19:49:51Z",
          "updatedAt": "2024-10-18T19:49:51Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janklaussner your DER encoding of the RSA-OAEP AlgID had an extra NULL at the end that John and I couldn't figure out, so I replaced it with a DER encoding produced by our toolkit.",
          "createdAt": "2024-10-18T20:05:59Z",
          "updatedAt": "2024-10-18T20:05:59Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> @janklaussner your DER encoding of the RSA-OAEP AlgID had an extra NULL at the end that John and I couldn't figure out, so I replaced it with a DER encoding produced by our toolkit.\r\n\r\n@ounsworth @johngray-dev I'm using OpenSSL and try to create or import OAEP keys, but neither my nor your encoding worked. How did you do it? Can you send me an example public key that works for you? Otherwise I doubt this kind of \"key\" is supported by OpenSSL.\r\nThanks!",
          "createdAt": "2024-10-21T13:52:42Z",
          "updatedAt": "2024-10-21T13:52:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86Nyq0m",
          "commit": {
            "abbreviatedOid": "0f406b1"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-18T19:52:10Z",
          "updatedAt": "2024-10-18T19:52:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOKRPFO85_CS6l",
      "title": "Aligned Use In CMS section with draft-cms-kyber",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/78",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #65",
      "createdAt": "2024-10-18T00:53:09Z",
      "updatedAt": "2024-10-19T22:44:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "9a74e4a2de8be612643d3e735356b2687aeb5a40",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cmskyber_align",
      "headRefOid": "43650524e50277232f8017847e331d80409587b9",
      "closedAt": "2024-10-19T22:44:46Z",
      "mergedAt": "2024-10-19T22:44:46Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "4b48abc2e93188b6d5043369d373ed8f4860c400"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Also, from Section 5:\r\n> \r\n> \" _HKDF_: [RFC5869]. Salt is not provided; ie the default salt (all zeroes of length HashLen) will be used. In all cases, the output length of HKDF is the same as the block size of the underlying hash function, for example `HKDF-SHA256/256` means HKDF-SHA256 with an output length `L` of 256 bits (32 octets).\"\r\n> \r\n> \"In all cases...\" is not true anymore, because the output size of HKDF when used in CMS KEMRecipientInfo depends on the key size of the wrap function. Now you will have to be explicit about the output sizes in the instances where HKDF is used.\r\n\r\nYou're right that I needed to clean up that sentence a bit, but your conclusion is not right. This table describes the KDF used inside Composite ML-KEM. With the most recent change, Composite ML-KEM will always output a 256-bit shared secret key (same as ML-KEM). The KDF used with CMS KEMRI (specified separately in Table #tab-cms-kdf-wrap) has a variable output size to match the wrap function.",
          "createdAt": "2024-10-19T22:07:45Z",
          "updatedAt": "2024-10-19T22:07:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86NuI5o",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Also, from Section 5:\r\n\r\n\" _HKDF_: [RFC5869]. Salt is not provided; ie the default salt (all zeroes of length HashLen) will be used. In all cases, the output length of HKDF is the same as the block size of the underlying hash function, for example `HKDF-SHA256/256` means HKDF-SHA256 with an output length `L` of 256 bits (32 octets).\"\r\n\r\n\"In all cases...\" is not true anymore, because the output size of HKDF when used in CMS KEMRecipientInfo depends on the key size of the wrap function.  Now you will have to be explicit about the output sizes in the instances where HKDF is used.",
          "createdAt": "2024-10-18T10:22:15Z",
          "updatedAt": "2024-10-18T11:39:11Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "General comment: Throughout the document, instead of saying \"Composite KEM\", should you say \"Composite ML-KEM\"?",
              "createdAt": "2024-10-18T10:22:16Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nAll recommendations for using Composite ML-KEM in CMS are fully aligned with the use of ML-KEM in CMS {{I-D.ietf-lamps-cms-kyber}}.\r\n```",
              "createdAt": "2024-10-18T10:22:55Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nWhen Composite ML-KEM is employed for a recipient, the RecipientInfo alternative for that recipient MUST be OtherRecipientInfo using the KEMRecipientInfo structure as defined in {{RFC9629}}.\r\n```",
              "createdAt": "2024-10-18T10:23:15Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\n> kem identifies the KEM algorithm; it MUST contain one of the Composite ML-KEM identifiers listed in {{sec-alg-ids}}.\r\n```",
              "createdAt": "2024-10-18T10:25:42Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\n> kdf identifies the key-derivation algorithm. Note that the Key Derivation Function (KDF) used for CMS RecipientInfo process MAY be different than the KDF used within the Composite ML-KEM algorithm or one of its components.\r\n```",
              "createdAt": "2024-10-18T10:27:00Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n> ukm is an optional random input to the key-derivation function. Composite ML-KEM doesn't place any requirements on the ukm contents.\r\n```",
              "createdAt": "2024-10-18T10:27:17Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 119,
              "body": "```suggestion\r\n### Components for Composite ML-KEM in CMS\r\n```",
              "createdAt": "2024-10-18T10:28:22Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 121,
              "body": "```suggestion\r\nA compliant implementation MUST support the following algorithms combinations for the KEMRecipientInfo kdf and wrap fields when the corresponding Composite ML-KEM algorithm is listed in the KEMRecipientInfo kem field. The KDFs listed below align with the KDF used internally for the KEM combiner. An implementation MAY also support other key-derivation functions and other key-encryption algorithms within CMS KEMRecipientInfo.\r\n```",
              "createdAt": "2024-10-18T10:28:40Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 121,
              "body": "I'm making a bunch of theses \"CompositeML-KEM\" -> \"Composite ML-KEM\" suggestions.  I've only found \"CompositeML-KEM\" in the edits for this PR, not elsewhere in the file.  Maybe \"CompositeML-KEM\" is what you want (I don't think it should be; what's a \"CompositeML\"?), but either way it should be consistent throughout the document.  I think all instances of \"Composite KEM\" should be changed to \"Composite ML-KEM\".",
              "createdAt": "2024-10-18T10:30:46Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 143,
              "body": "```suggestion\r\n* `id-aes*-wrap` are defined in [RFC3394].\r\n```",
              "createdAt": "2024-10-18T10:38:56Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 134,
              "body": "```suggestion\r\n| id-MLKEM768-RSA2048               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-RSA3072               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-RSA4096               | id-alg-hkdf-with-sha256 | id-aes128-wrap     |\r\n| id-MLKEM768-X25519                | id-sha3-256             | id-aes128-wrap     |\r\n| id-MLKEM768-ECDH-P384             | id-alg-hkdf-with-sha384 | id-aes256-wrap     |\r\n| id-MLKEM768-ECDH-brainpoolP256r1  | id-alg-hkdf-with-sha384 | id-aes256-wrap     |\r\n| id-MLKEM1024-ECDH-P384            | id-sha3-512             | id-aes256-wrap     |\r\n| id-MLKEM1024-ECDH-brainpoolP384r1 | id-sha3-512             | id-aes256-wrap     |\r\n| id-MLKEM1024-X448                 | id-sha3-512             | id-aes256-wrap     |\r\n```",
              "createdAt": "2024-10-18T10:39:29Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 134,
              "body": "RFC 3394 doesn't capitalize the W in id-aesXXX-wrap.",
              "createdAt": "2024-10-18T10:40:12Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 129,
              "body": "id-sha3-256/512 is not a KDF that can be used by KEMRecipientInfo. RFC 9629 requires the KDF to take IKM, L and info parameters.  A straight SHA3 invocation doesn't take info or length parameters.\r\n\r\nYour options are id-alg-hkdf-with-sha3-256 or id-kmac128.\r\n\r\nIf you use KMAC, you can steal section 2.2.2 of draft-ietf-lamps-cms-kyber-04 as a parallel for your \"Use of the HKDF-based Key Derivation Function\" section: https://datatracker.ietf.org/doc/html/draft-ietf-lamps-cms-kyber-04#section-2.2.2\r\n\r\nIf you use HKDF with SHA3, change the \"HKDF may be used with different hash functions...\" paragraph of the \"Use of the HKDF-based Key Derivation Function\" section to mention SHA3 and HKDF with SHA3 identifiers.",
              "createdAt": "2024-10-18T10:57:14Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            },
            {
              "originalPosition": 130,
              "body": "Per table 3 of https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r5.pdf, I don't believe that SHA-384 and SHA3-512 are necessary (although perhaps you're matching with the internal Composite ML-KEM KDF.\r\n\r\nSHA-256/SHA3-256/KMAC128 all have >= 256 bits of (2nd) preimage resistance, which is what's needed for a KDF.  Collision resistance isn't needed , there SHA-256, etc have only 128 bits of security.\r\n\r\nBy this same logic, your KEM Combiner KDFs can also be reduced to use only SHA-256 and SHA3-256 instead of any higher variants.",
              "createdAt": "2024-10-18T11:11:42Z",
              "updatedAt": "2024-10-18T11:23:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Ny0xU",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-18T20:22:22Z",
          "updatedAt": "2024-10-18T20:22:22Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "Good suggestion. I'll do that.",
              "createdAt": "2024-10-18T20:22:22Z",
              "updatedAt": "2024-10-18T20:22:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N05-E",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T13:51:13Z",
          "updatedAt": "2024-10-19T13:51:13Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Oh rats, that's a really good point. Ok. So I can't *fully* align this with the internal hash function used within the KEM combiner. Of course it needs to have the API of a real KDF.",
              "createdAt": "2024-10-19T13:51:13Z",
              "updatedAt": "2024-10-19T13:51:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1F-N",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T14:34:50Z",
          "updatedAt": "2024-10-19T14:34:50Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Very helpful, thanks.",
              "createdAt": "2024-10-19T14:34:50Z",
              "updatedAt": "2024-10-19T14:34:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1F-o",
          "commit": {
            "abbreviatedOid": "e07ee99"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T14:34:59Z",
          "updatedAt": "2024-10-19T14:35:00Z",
          "comments": [
            {
              "originalPosition": 130,
              "body": "Very helpful, thanks.",
              "createdAt": "2024-10-19T14:34:59Z",
              "updatedAt": "2024-10-19T14:35:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N1LVu",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T15:06:59Z",
          "updatedAt": "2024-10-19T15:29:49Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Something's wrong here and I'm not sure what you're trying to say.  Per Table 3, KMAC128 has 128 bits of preimage resistance, not >= 256.  And KMAC hasn't even been brought up yet in this document, so if you're just referring to the KDFs in #tab-kem-algs, remove the mention of KMAC and say they all provider 258 bits of security, not 128.",
              "createdAt": "2024-10-19T15:06:59Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 74,
              "body": "And I realize the issue, in one of my previous comments I said that KMAC-128 was one of your options.  I should have said KMAC-256, sorry.  I was confusing KMAC-128 with SHAKE128/256, which does have 256 bits of security.  But per table 3 of SP.800-57pt1r5, KMAC128 has 128 bits and KMAC256 has 256 bits.  Since you're only using ML-KEM-768 and up, KMAC256 makes sense.",
              "createdAt": "2024-10-19T15:15:50Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 97,
              "body": "Per my comment above, all this (and the table below) should be KMAC256 instead of KMAC128.",
              "createdAt": "2024-10-19T15:17:02Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            },
            {
              "originalPosition": 131,
              "body": "I can't figure out the logic in the choice between KMAC and HKDF in this table. In particular, sometimes ECDH is paired with HKDF and sometimes it's paired with KMAC.\r\n\r\nDoesn't the same logic from cms-kyber apply here - implementations might not have SHA3 at the CMS level, so that's why we use HKDF-with-SHA2 everywhere?\r\n\r\nI realize that in my previous review I said your options here were KMAC vs HKDF-with-SHA3, but I clearly didn't look at the pairings closely enough to realize I didn't understand why things were paired as they were. ",
              "createdAt": "2024-10-19T15:28:16Z",
              "updatedAt": "2024-10-19T15:29:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2Eq_",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:18:48Z",
          "updatedAt": "2024-10-19T22:18:48Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Hi @danvangeest,\r\n\r\nThe choices have been debated to death on the LAMPS and OpenPGP mailing lists. I have tried to provide some kind of coherent explanation in the very next section \"## Rationale for choices\", so let me know if that doesn't make sense, but the truth is that I can't really defend the choices beyond that I'm trying to balance about 15 conflicting opinions on the mailing list, and while I'm never going to make everyone happy, this set seems to be some kind of global minimum in how much I get yelled at.\r\n\r\n\r\nThe main things I'm trying to align against are:\r\n\r\n1. X-Wing (draft-connolly-cfrg-xwing-kem-04) uses SHA3-256, so our id-MLKEM768-X25519 should do the same.\r\n2. openpgp uses SHA3-256 for all combinations -- https://datatracker.ietf.org/doc/html/draft-ietf-openpgp-pqc-04#name-key-combiner -- Russ has been adamant that these two drafts align as much as possible.\r\n3. Some people want SHA2 combinations, so I somewhat arbitrarily decided to make the ML-KEM768's (except X-Wing) use SHA2, and the ML-KEM1024's use SHA3. This is supposed to be some kind of compromise instead of just 2x\u2019ing the list to provide every combination with both SHA2 and SHA3.\r\n\r\nI guess the test will be if anyone says that the NEED ML-KEM1024 with SHA2, in which case I'll have to ask the LAMPS mailing list whether Objective 2 should be completely thrown out the window in order to satisfy Objective 3, or if I should just 2x the list.",
              "createdAt": "2024-10-19T22:18:48Z",
              "updatedAt": "2024-10-19T22:24:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2GRL",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:37:48Z",
          "updatedAt": "2024-10-19T22:37:48Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Oh I see my mistake.\r\n\r\nSP.800-56pt1r5 Table 3: I didn't read carefully enough. SHA-256 and SHA3-256 are equivalent to KMAC128 when you need collision resistance, but are equivalent to KMAC256 when you only need (2nd) pre-image resistance. Thanks.",
              "createdAt": "2024-10-19T22:37:48Z",
              "updatedAt": "2024-10-19T22:37:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2HJD",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:42:00Z",
          "updatedAt": "2024-10-19T22:42:00Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Done.",
              "createdAt": "2024-10-19T22:42:00Z",
              "updatedAt": "2024-10-19T22:42:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86N2HPK",
          "commit": {
            "abbreviatedOid": "6ddb734"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-19T22:42:12Z",
          "updatedAt": "2024-10-19T22:42:12Z",
          "comments": [
            {
              "originalPosition": 97,
              "body": "Done.",
              "createdAt": "2024-10-19T22:42:12Z",
              "updatedAt": "2024-10-19T22:42:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOKRPFO85_IUFT",
      "title": "Public key ASN.1 re-work and Private key compression",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/80",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "First text for key format changes.  The ASN.1 module still needs to be updated.",
      "createdAt": "2024-10-18T17:30:48Z",
      "updatedAt": "2024-10-20T01:33:12Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "15f90210a93cddb819ddb3195322968426d9e910",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "59-PublicPrivateKeyCompression",
      "headRefOid": "5f8dc4c6d894ceba31d86b254a0806bac8da8134",
      "closedAt": "2024-10-20T01:33:12Z",
      "mergedAt": "2024-10-20T01:33:12Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "db1bcb0f2495cb6375fd35aa58c7918008f13646"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 82,
      "id": "PR_kwDOKRPFO85_OlVh",
      "title": "ietf121_top-to-bottom",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/82",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- [x] Top-to-bottom alignment pass\r\n- [ ] Go through all the xml2rfc compiler warnings\r\n- [x] Run spell-check",
      "createdAt": "2024-10-20T14:29:18Z",
      "updatedAt": "2024-10-21T20:34:56Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "db1bcb0f2495cb6375fd35aa58c7918008f13646",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "ietf121_top-to-bottom",
      "headRefOid": "1b9cb635d5a990decbb1ed637ef1adad43f0f800",
      "closedAt": "2024-10-21T20:34:48Z",
      "mergedAt": "2024-10-21T20:34:48Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "de2d8de6461c6dc564d1666a75d25b9fd105ad25"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 84,
      "id": "PR_kwDOKRPFO85_n0H2",
      "title": "Fix the ML-KEM encodings",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/84",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "resolves #83",
      "createdAt": "2024-10-23T13:56:53Z",
      "updatedAt": "2024-10-23T14:55:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "de2d8de6461c6dc564d1666a75d25b9fd105ad25",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "83-Fix-MLKEM-Encodings",
      "headRefOid": "fe81529d35e07ac7ac83b96a3a4ded45d5500c06",
      "closedAt": "2024-10-23T14:55:25Z",
      "mergedAt": "2024-10-23T14:55:25Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "af137b53cb1a0e9de0f73c7856a5e2e97f165dcf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 85,
      "id": "PR_kwDOKRPFO86AicuP",
      "title": "Fix typos",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/85",
      "state": "MERGED",
      "author": "jiep",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-10-31T15:29:40Z",
      "updatedAt": "2024-11-09T18:56:25Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "af137b53cb1a0e9de0f73c7856a5e2e97f165dcf",
      "headRepository": "jiep/draft-composite-kem",
      "headRefName": "patch-1",
      "headRefOid": "747f274e53846548cd1c5019b65402b4801fc4f0",
      "closedAt": "2024-11-09T18:56:25Z",
      "mergedAt": "2024-11-09T18:56:25Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "8810bc0ebb42fb9553387361765f1a56756170db"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks!",
          "createdAt": "2024-11-09T18:56:17Z",
          "updatedAt": "2024-11-09T18:56:17Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 94,
      "id": "PR_kwDOKRPFO86CSeTf",
      "title": "Drop DER encoding for composite ML-KEM functions",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/94",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #88 \r\n\r\nI also moved content around in this PR to make it flow a bit better, e.g., by moving security-relevant stuff to the security considerations and keeping the main implementation details in the primary document.",
      "createdAt": "2024-11-18T19:02:58Z",
      "updatedAt": "2024-11-28T20:04:26Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "8810bc0ebb42fb9553387361765f1a56756170db",
      "headRepository": "chris-wood/draft-composite-kem",
      "headRefName": "caw/drop-der",
      "headRefOid": "9d96c618ae0f6a56976ba2b5fb6bfa7b53c74547",
      "closedAt": "2024-11-28T20:04:26Z",
      "mergedAt": "2024-11-28T20:04:26Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "0c6ecfa4cb8c47814fe3f5bc98cf250d185ae59b"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks @chris-wood lots of good changes. @johngray-dev  we'll need to sync up the section re-arranging in composite-sigs to match.\r\n\r\nChris, ironically, I think the one thing you have not done in your PR is drop the DER encoding. The ASN.1 SEQUENCE wrapper is still there, so in fact this does not close #88 \r\n\r\n     CompositeKEMPublicKey ::= SEQUENCE SIZE (2) OF BIT STRING\r\n\r\nWhat was your intention there?",
          "createdAt": "2024-11-19T18:56:24Z",
          "updatedAt": "2024-11-19T19:02:11Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The DER encoding is still present for those that want to use it. However, the outputs of the composite ML-KEM key generation function are distinctly _not_ these `CompositeKEMPublicKey` values. They're internal, implementation-specific values. Callers can then invoke `SerializePublicKey`, which is the model for HPKE, to produce a simple, wire-format-encoded public key, or they can encode it using `CompositeKEMPublicKey` if they need to.\r\n\r\nThe point of this PR is to allow both encodings. Does that clarify?",
          "createdAt": "2024-11-19T20:38:07Z",
          "updatedAt": "2024-11-19T20:38:07Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> The point of this PR is to allow both encodings. Does that clarify?\r\n\r\nThat sounds super confusing for implementers. Let's just do one encoding. Let's drop the DER entirely.\r\n\r\nBut that does mean that we're going to have to list out explicit byte cutoffs where the first ends and the next begins.",
          "createdAt": "2024-11-19T20:57:07Z",
          "updatedAt": "2024-11-19T20:58:56Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> That sounds super confusing for implementers. Let's just do one encoding. Let's drop the DER entirely.\r\n\r\nI would be pleased with this outcome. I'll update the PR to match.\r\n\r\n> But that does mean that we're going to have to list out explicit byte cutoffs where the first ends and the next begins.\r\n\r\nNo? These outputs are fixed-length. There's no need to encode the lengths. ",
          "createdAt": "2024-11-19T21:00:57Z",
          "updatedAt": "2024-11-19T21:01:23Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "We are trying to keep the Composite Signatures and Composite KEM documents in similar alignment structurally.   I have opened a similar issue for composite signatures (https://github.com/lamps-wg/draft-composite-sigs/issues/85).  We had planned to completely remove the ASN.1 wrapping and keep the similar document structure (where possible) and not have multiple encodings.  It looks like you are okay with that Chris which is great.    So Chris I'll use what you did in Composite KEM as a kind of template to update composite signatures, and then maybe add some tweaks into your branch (fully remove ASN.1) before final merging.  I hope you are okay with that.   I was thinking of adding a simple ML-KEM / ML-DSA size table for key reconstitution.  ",
          "createdAt": "2024-11-19T21:43:58Z",
          "updatedAt": "2024-11-19T21:43:58Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@johngray-dev that works for me -- do you want to take over this PR?",
          "createdAt": "2024-11-19T21:52:09Z",
          "updatedAt": "2024-11-19T21:52:09Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, I can take over this PR since I was just starting the same thing on composite sigs, and I like the way you specified the serialization process, so I'll replicate that in Signatures as well (since the composite key serialization procedures are basically the same thing)...  :)",
          "createdAt": "2024-11-20T14:13:48Z",
          "updatedAt": "2024-11-20T14:13:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86R1Fjl",
          "commit": {
            "abbreviatedOid": "788d82c"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T20:42:28Z",
          "updatedAt": "2024-11-19T20:42:29Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-11-19T20:42:28Z",
              "updatedAt": "2024-11-19T20:42:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86R1FsG",
          "commit": {
            "abbreviatedOid": "169d9b3"
          },
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T20:42:47Z",
          "updatedAt": "2024-11-19T20:42:48Z",
          "comments": [
            {
              "originalPosition": 203,
              "body": "```suggestion\r\nThe specific values for `KDF` are defined per Composite ML-KEM algorithm in {{tab-kem-algs}} and the specific values for `Domain` are defined per Composite ML-KEM algorithm in {{sec-alg-ids}}.\r\n```",
              "createdAt": "2024-11-19T20:42:48Z",
              "updatedAt": "2024-11-19T20:42:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDOKRPFO86Caofv",
      "title": "Add P-256 variant, use HKDF-Extract instead of HKDF as the combiner KDF, and add HPKE integration section",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/95",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This will need to be modified based on #94, in particular to update the `DeriveKeyPair` description, but the rest of the change in this section should stand on its own. \r\n\r\nCloses #93, #87, #86",
      "createdAt": "2024-11-19T16:42:41Z",
      "updatedAt": "2025-01-06T18:00:39Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2650db111320b4b487e341c9c2d4c03465a586e5",
      "headRepository": "chris-wood/draft-composite-kem",
      "headRefName": "caw/add-p256-and-hpke",
      "headRefOid": "0c25d4be8b681b813c262ee582f45dcf4709b8e6",
      "closedAt": "2025-01-05T01:01:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth @johngray-dev I'll revert the HKDF drop for now, replacing it with HKDF-Extract (as discussed at IETF 121), but I'd like to discuss this again in the future.",
          "createdAt": "2024-11-19T21:52:33Z",
          "updatedAt": "2024-11-19T21:59:43Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ounsworth @johngray-dev I updated this PR. One question that came up was what KDF do we want to use for turning input seeds into seeds for the underlying component KEMS? To elaborate, the HPKE `DeriveKeyPair` function takes a seed as input. The specification of `DeriveKeyPair` currently expands that seed into two components -- one for each component KEM. The first piece goes to `ML-KEM.KeyGen_internal`, and the second piece goes to the traditional KEM's `DeriveKeyPair` function. Currently, the PR uses SHAKE256 as the XOF to do this expansion, exactly as X-Wing does. But if we believe the premise that SHA3 will _not_ be available in all environments, we might want to do something else.\r\n\r\n(To be clear, I don't think it's reasonable to believe that SHA-3 implementations will _not_ be available. This is new code, after all, and new code could just as well add SHA-3 if it's not available.)\r\n\r\nIn any case, could you please have a look and let me know what you think? This is the final piece of the puzzle before we can get some actual HPKE code points!",
          "createdAt": "2025-01-02T21:10:59Z",
          "updatedAt": "2025-01-02T21:10:59Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Chris.   Thanks for the update.   I'm okay with these changes except that I noticed you switched the prototype OIDs back to ending with .21 ... .29...    Those were from the previous version and won't be compatible with this update since we removed the ASN.1 sequence wrappings (so this upcoming -06 version will not be binary compatible with the last version).   So if you could update the OIDs to use .30 to .39 then we wouldn't cause prototype interoperability issues.   Eventually we will get official OIDs from IANA, but for people wanting to interoperate now we use these prototype OIDS.   I'm ok with adding the MLKEM768-ECDH-P256 one as well.  So re-numbering the OIDs starting at 30 makes sense.  For example:\r\n\r\n2.16.840.1.114027.80.5.2.30 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA2048\r\n2.16.840.1.114027.80.5.2.31 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA3072\r\n2.16.840.1.114027.80.5.2.32 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-RSA4096\r\n2.16.840.1.114027.80.5.2.33 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-X25519\r\n2.16.840.1.114027.80.5.2.34 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P256\r\n2.16.840.1.114027.80.5.2.35 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-P384\r\n2.16.840.1.114027.80.5.2.36 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM768-ECDH-brainpoolP256r1\r\n2.16.840.1.114027.80.5.2.37 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-P384\r\n2.16.840.1.114027.80.5.2.38 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-ECDH-brainpoolP384r1\r\n2.16.840.1.114027.80.5.2.39 \u00a0 entrust-Algorithm-ExplicitComposite-KEM.id-MLKEM1024-X448\r\n\r\nThat would also mean you need to update the DER Encoded OID table again.   The ASN.1 module will also need to be updated to add the new MLKEM768-ECDH-P256.   Other than that I think the pull looks great.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2025-01-03T21:46:04Z",
          "updatedAt": "2025-01-03T21:46:04Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I think this PR is trying to do too much all at once, which makes it hard to review. It would be better if this was broken out into multiple PRs so that we can merge the P-256 thing while we discuss the other parts.",
          "createdAt": "2025-01-05T00:30:13Z",
          "updatedAt": "2025-01-05T00:30:13Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood\r\n> One question that came up was what KDF do we want to use for turning input seeds into seeds for the underlying component KEMS?\r\n\r\n> ... expands that seed into two components -- one for each component KEM. The first piece goes to ML-KEM.KeyGen_internal, and the second piece goes to the traditional KEM's DeriveKeyPair function.\r\n\r\nBut this is explicitly FIPS-disallowed because FIPS 203 / 204 do not allow a KDF in between your DRBG and Keygen_internal. This is exactly the reason that X-Wing has its own LAMPS draft and is not part of this draft -- X-Wing does not care whether you can make a FIPS-certified implementation of it, but this draft does.\r\n\r\nI consider any kind of combined KeyGen to be a harmful change to this draft and I will reject any PRs that do that.",
          "createdAt": "2025-01-05T00:41:17Z",
          "updatedAt": "2025-01-05T00:49:13Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> (To be clear, I don't think it's reasonable to believe that SHA-3 implementations will not be available. This is new code, after all, and new code could just as well add SHA-3 if it's not available.)\r\n\r\nI don't particularly care one way or another, but the request for SHA2 combiners came from Deb Cooley on behalf of NSA. Here's the PQUIP 118 recording where she made her case: https://youtu.be/W46QrMvlLZU?feature=shared&t=5655\r\n\r\nJoe Saloway made a similar request (but not on-recording). If you want the SHA2 combiners to be ditched, then you'll need to get Deb and Joe to withdraw their requests for it.",
          "createdAt": "2025-01-05T00:55:36Z",
          "updatedAt": "2025-01-05T00:56:20Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll open a separate PR to add the P-256 variant.\r\nI'm ok in principle with adding an HPKE Integration section, but let's have that in its own PR cause I think we'll have to do a few iterations on it to balance the requirements of HPKE and PKI (particularly around KeyGen).",
          "createdAt": "2025-01-05T01:01:32Z",
          "updatedAt": "2025-01-05T01:01:32Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Separating the items into their own issues will make it easier to track down the road, so I'm good with these suggestions.  \r\n",
          "createdAt": "2025-01-06T18:00:37Z",
          "updatedAt": "2025-01-06T18:00:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 99,
      "id": "PR_kwDOKRPFO86Gvatf",
      "title": "Adding a MLKEM768+P256 variant",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/99",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #86 \r\n\r\nTo do before merge:\r\n\r\n- [x] Assign a prototyping OID for `id-MLKEM768-ECDH-P256` from the Entrust OID arc -- update all the places in the draft that need it.\r\n- [x] Once the OID is assigned, compute the domain separator for it.\r\n- [ ] Review by Chris Wood",
      "createdAt": "2025-01-05T01:23:22Z",
      "updatedAt": "2025-01-22T15:53:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2650db111320b4b487e341c9c2d4c03465a586e5",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_p256",
      "headRefOid": "0a0f094f661be48460a7b6299391ddd9463343f9",
      "closedAt": "2025-01-22T15:53:48Z",
      "mergedAt": "2025-01-22T15:53:48Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "dadf513a5e1093dd63055071520d582b951546b1"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood does this do what you want?",
          "createdAt": "2025-01-05T01:23:49Z",
          "updatedAt": "2025-01-05T01:23:49Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 100,
      "id": "PR_kwDOKRPFO86Gvlmh",
      "title": "HKDF tweaks",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/100",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #87\r\nCloses #93 ",
      "createdAt": "2025-01-05T05:34:58Z",
      "updatedAt": "2025-01-29T19:10:09Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2650db111320b4b487e341c9c2d4c03465a586e5",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_hkdf",
      "headRefOid": "c4c6b922e29a13911d9e501a82f056fb5d942e12",
      "closedAt": "2025-01-29T19:10:01Z",
      "mergedAt": "2025-01-29T19:10:01Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "eecf979901fdbbebc8d30d7d3c63e2411f9a7b77"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chris-wood I would like your review on this.\r\n\r\nRegardless of how you feel about whether or not SHA2 combiners should be included, does this PR address the issue that the HKDF combiner was under-specified?",
          "createdAt": "2025-01-05T05:37:06Z",
          "updatedAt": "2025-01-05T05:37:17Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm going to merge this so that we can proceed with the other PRs that depend on it. If Ilari has more comments, we can address those separately.",
          "createdAt": "2025-01-29T19:04:39Z",
          "updatedAt": "2025-01-29T19:04:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86W2uK2",
          "commit": {
            "abbreviatedOid": "c63ebd5"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-05T16:08:23Z",
          "updatedAt": "2025-01-05T16:08:24Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "The input block length of SHA-256 is 64 bytes, not 32, so the salt should presumably be 64 bytes of zeros, not 32. However, both will lead to the same output (due to how HMAC works).\r\n",
              "createdAt": "2025-01-05T16:08:23Z",
              "updatedAt": "2025-01-05T16:08:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86W2uXs",
          "commit": {
            "abbreviatedOid": "c63ebd5"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-05T16:14:00Z",
          "updatedAt": "2025-01-05T16:14:00Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Is that clear enough from parameter names, or should that explicitly be HKDF-Extract-SHA256?\r\n\r\nThere are two HKDF operations (HKDF-Extract and HKDF-Expand), and parameters being salt and IKM only makes sense for HKDF-Extract.",
              "createdAt": "2025-01-05T16:14:00Z",
              "updatedAt": "2025-01-05T16:14:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86W2ucp",
          "commit": {
            "abbreviatedOid": "c63ebd5"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-05T16:16:23Z",
          "updatedAt": "2025-01-05T16:16:23Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "The SHA-3 one seems to be just SHA3-256, which would be option 1 (hash(x)), not option 2?",
              "createdAt": "2025-01-05T16:16:23Z",
              "updatedAt": "2025-01-05T16:16:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86ZckNT",
          "commit": {
            "abbreviatedOid": "c63ebd5"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-26T21:51:41Z",
          "updatedAt": "2025-01-26T21:51:42Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "Good catch. Thank you.",
              "createdAt": "2025-01-26T21:51:41Z",
              "updatedAt": "2025-01-26T21:51:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86ZckXd",
          "commit": {
            "abbreviatedOid": "c63ebd5"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-26T21:56:06Z",
          "updatedAt": "2025-01-26T21:56:06Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I've been debating with myself whether this should be `HKDF-Extract()`, or `HKDF-Expand( HDKF-Extract() )`.\r\n\r\nIn the end, I think there is no need for stretching, so only HKDF-Extract() is needed, and that makes things simpler.",
              "createdAt": "2025-01-26T21:56:06Z",
              "updatedAt": "2025-01-26T21:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Zeobi",
          "commit": {
            "abbreviatedOid": "e71c69d"
          },
          "author": "ilaril",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-27T09:41:02Z",
          "updatedAt": "2025-01-27T09:41:02Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Nit: Input block size of SHA384 is 128 bytes (16 words of 8 bytes each).\r\n\r\n(Not that it makes actual difference as HMAC would zero-extend the key anyway.)",
              "createdAt": "2025-01-27T09:41:02Z",
              "updatedAt": "2025-01-27T09:41:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Z3lsQ",
          "commit": {
            "abbreviatedOid": "e71c69d"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-29T15:51:05Z",
          "updatedAt": "2025-01-29T15:51:06Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "this is a typo",
              "createdAt": "2025-01-29T15:51:06Z",
              "updatedAt": "2025-01-29T15:51:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Z4SJh",
          "commit": {
            "abbreviatedOid": "e71c69d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-29T16:54:19Z",
          "updatedAt": "2025-01-29T16:54:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Right. I need to actually go read FIPS 180-4 so that I don't continue getting this wrong.",
              "createdAt": "2025-01-29T16:54:19Z",
              "updatedAt": "2025-01-29T16:54:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Z45Xb",
          "commit": {
            "abbreviatedOid": "e71c69d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-29T18:01:17Z",
          "updatedAt": "2025-01-29T18:01:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Wait. HKDF (RFC 5869) says:\r\n> if not provided, it is set to a string of HashLen zeros\r\n\r\nAnd some of its test vectors have `salt = (0 octets)`, so maybe it's easier for me to do the same instead of trying to figure out the correct-width input? As you say, HKDF will internally handle this properly.",
              "createdAt": "2025-01-29T18:01:17Z",
              "updatedAt": "2025-01-29T18:01:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86Z47el",
          "commit": {
            "abbreviatedOid": "e71c69d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-29T18:05:37Z",
          "updatedAt": "2025-01-29T18:05:37Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "@ilaril Can you please re-check that the current wording is ok?",
              "createdAt": "2025-01-29T18:05:37Z",
              "updatedAt": "2025-01-29T18:05:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDOKRPFO86Gw8D6",
      "title": "Added appdx comparing with X-Wing and ETSI CatKDF.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/101",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #91\r\n\r\nTODO before merging:\r\n\r\n- [ ] Review from Peter C, especially:\r\n  - the new appendix comparing this specification with ETSI CatKDF\r\n  - The intro is still a bit misleading about the endorsement from BSI, which Peter C correctly points out is to an earlier version of the composite draft, however we have Jan Klau\u00dfner as an author and close collaboration with Stavros Kousidis on the CFRG version, so BSI is a bull collaborator on developing this.\r\n- [ ] Review from Chris Wood / Deirdre / Bas, especially:\r\n  - The new appendix comparing this specification with X-Wing\r\n- [ ] I was not previously aware of ETSI TS 103 744's CatKDF. We should have a discussion on the LAMPS list about whether we want to add the ML-KEM CT to the KDF in order to offer equivalent security properties as ETSI CatKDF.",
      "createdAt": "2025-01-06T01:05:33Z",
      "updatedAt": "2025-03-01T23:33:51Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "71163b933921b010cdd40e39659f0c81091aa22f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_catkdf",
      "headRefOid": "6aea5967ae7714f8c501061f57a38396121ecc27",
      "closedAt": "2025-03-01T23:33:48Z",
      "mergedAt": "2025-03-01T23:33:48Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "1e772eadfe5cacc1841b4ac84b392e9f9b948684"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I should do another pass at making the text clearer. \"This specification\" is unclear -- I should say \"Composite KEM\".\r\nShould also describe more clearly that that paragraph is just highlighting that these are different constructions.",
          "createdAt": "2025-01-22T16:02:00Z",
          "updatedAt": "2025-01-22T16:02:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86W6FTP",
          "commit": {
            "abbreviatedOid": "d2714f5"
          },
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-06T10:06:17Z",
          "updatedAt": "2025-01-06T10:06:17Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "- Typo: *Thit*\r\n- \"is explicitely disallowed\". Presently.\r\n- \"it impossible to create a FIPS-compliant\" of X-Wing private key import.",
              "createdAt": "2025-01-06T10:06:17Z",
              "updatedAt": "2025-01-06T10:06:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86W_Q3Z",
          "commit": {
            "abbreviatedOid": "d2714f5"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-07T00:02:12Z",
          "updatedAt": "2025-01-07T00:02:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Thanks, fixed.\r\n\r\nYeah, if NIST eventually softens the prohibition on derived seeds, that would be fantastic and then X-Wing and Composite could fully collapse together, but NIST has not given any indication of when / how / if they are going to do that, so for now I think we need to proceed like this. Sigh.",
              "createdAt": "2025-01-07T00:02:12Z",
              "updatedAt": "2025-01-07T00:02:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86YA3zF",
          "commit": {
            "abbreviatedOid": "d2714f5"
          },
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T16:38:39Z",
          "updatedAt": "2025-01-14T16:38:39Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Fantastic indeed: https://groups.google.com/a/list.nist.gov/g/pqc-forum/c/lMTIIPu9yDY/m/38felspKBQAJ ! ",
              "createdAt": "2025-01-14T16:38:39Z",
              "updatedAt": "2025-01-14T16:38:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86YA5ae",
          "commit": {
            "abbreviatedOid": "d2714f5"
          },
          "author": "bwesterb",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-14T16:40:32Z",
          "updatedAt": "2025-01-14T16:40:32Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Given the stated plan, and the fact that there are no ML-KEM-768 modules yet, wouldn't it make sense for the long term to align id-MLKEM768-X25519  with X-Wing. Of course you would want to do something different for the P256 one.",
              "createdAt": "2025-01-14T16:40:32Z",
              "updatedAt": "2025-01-14T16:40:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86ZCvJd",
          "commit": {
            "abbreviatedOid": "6e97f2d"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-22T15:58:52Z",
          "updatedAt": "2025-01-22T15:58:52Z",
          "comments": [
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n\r\n```\r\n\r\nRemove this ednote.",
              "createdAt": "2025-01-22T15:58:52Z",
              "updatedAt": "2025-01-22T15:58:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86ZbdZq",
          "commit": {
            "abbreviatedOid": "d2714f5"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-26T01:01:46Z",
          "updatedAt": "2025-01-26T01:01:46Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "While I agree in principle, unfortunately a plan isn't enough. There are ML-KEM modules going through FIPS as we speak that do not even support SEED, let alone seed-from-kdf, and there are claims that seed-based private keys in general are not allowed in a CMVP-validated module. So unfortunately, I think Composites has to stay the way it is and support what is currently allowed in FIPS CMVP.",
              "createdAt": "2025-01-26T01:01:46Z",
              "updatedAt": "2025-01-26T01:01:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 103,
      "id": "PR_kwDOKRPFO86I_ox4",
      "title": "Adjusted the combiner of id-MLKEM1024-ECDH-P384 from SHA3 to SHA2-384",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/103",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026 so that it is compliant with CNSA 2.0.\r\n\r\nCloses #102 \r\n\r\nRebased on top of #100. Merge that one first.",
      "createdAt": "2025-01-26T02:24:16Z",
      "updatedAt": "2025-01-30T21:16:28Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "dadf513a5e1093dd63055071520d582b951546b1",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cnsa20",
      "headRefOid": "15dbcfc83766e38385438db622fe82e97103f39f",
      "closedAt": "2025-01-30T21:16:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not ready, more work required.\r\n\r\nNow that the general HKDF tweaks are merged to main, I should just cherry-pick the commit that changes MLKEM1024 from SHA3 to HKDF-SHA384, and start a new PR.",
          "createdAt": "2025-01-29T19:30:43Z",
          "updatedAt": "2025-01-29T19:30:43Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Replaced by #107 ",
          "createdAt": "2025-01-30T21:16:28Z",
          "updatedAt": "2025-01-30T21:16:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 104,
      "id": "PR_kwDOKRPFO86I_tli",
      "title": "Updated the FIPS Certification section to reflect SP 800-227ipd",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/104",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #64 ",
      "createdAt": "2025-01-26T03:47:59Z",
      "updatedAt": "2025-01-30T20:03:29Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2d680d15552e5b5f0c3f9c2c21ab13161bbcd531",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_sp800_227",
      "headRefOid": "95149a1681905e28b1a9d3205ae91a32674237c0",
      "closedAt": "2025-01-30T20:03:26Z",
      "mergedAt": "2025-01-30T20:03:26Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "6655e33e910fbe9a0f052960580640d4ad7ed678"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 105,
      "id": "PR_kwDOKRPFO86JB94L",
      "title": "Piotr's corrections",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/105",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #96 ",
      "createdAt": "2025-01-27T03:19:15Z",
      "updatedAt": "2025-01-27T03:37:18Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "dadf513a5e1093dd63055071520d582b951546b1",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_96",
      "headRefOid": "dda0ab8bd2db053a5fb7401cbf16f62b02158188",
      "closedAt": "2025-01-27T03:37:18Z",
      "mergedAt": "2025-01-27T03:37:18Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "90d5c2de6c9eee0900c596f8e72f4eb90a055bf7"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 106,
      "id": "PR_kwDOKRPFO86JKi6D",
      "title": "Added a \"Why Hybrids?\" security consideration.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/106",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #97",
      "createdAt": "2025-01-28T03:01:04Z",
      "updatedAt": "2025-01-29T15:30:32Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "90d5c2de6c9eee0900c596f8e72f4eb90a055bf7",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_97",
      "headRefOid": "14080149410ecf969ab38bcb6a8d2f4660a27517",
      "closedAt": "2025-01-29T15:30:03Z",
      "mergedAt": "2025-01-29T15:30:03Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "c13d23e334748789cff37329f591e36c143175db"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 107,
      "id": "PR_kwDOKRPFO86JjaUd",
      "title": "Adjusted the combiner of id-MLKEM1024-ECDH-P384 from SHA3 to SHA2-384\u2026",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/107",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026 so that it is compliant with CNSA 2.0.\r\n\r\nCloses #102 \r\n\r\nReplaces #103 ",
      "createdAt": "2025-01-30T21:16:04Z",
      "updatedAt": "2025-01-30T22:24:48Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6655e33e910fbe9a0f052960580640d4ad7ed678",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cnsa20_b",
      "headRefOid": "51456ac12dc319e315ec04682e9de16adb14c9a7",
      "closedAt": "2025-01-30T22:24:45Z",
      "mergedAt": "2025-01-30T22:24:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "ff8f0be1f4830ad3e006e8a631df0082523ae947"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 110,
      "id": "PR_kwDOKRPFO86M-msl",
      "title": "Added size table",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/110",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #77 ",
      "createdAt": "2025-02-28T19:04:58Z",
      "updatedAt": "2025-05-01T01:38:58Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e123232f09b2d69ffcd5556e03fc15b1a224bc4c",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_size_table",
      "headRefOid": "1867c81375bfe3dad525926d93d34ca20c68fffe",
      "closedAt": "2025-05-01T01:38:55Z",
      "mergedAt": "2025-05-01T01:38:55Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "99d38abc13846cb7d94becca25cbd83b277185fc"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 111,
      "id": "PR_kwDOKRPFO86NDEhM",
      "title": "Hybrid security considerations",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/111",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "DO NOT MERGE UNTIL:\r\n\r\n- [x] Resolve that RSA-OAEP ciphertext is variable-length.\r\n\r\nCloses #54 \r\nCloses #92 ",
      "createdAt": "2025-03-01T23:28:25Z",
      "updatedAt": "2025-03-03T19:59:01Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "71163b933921b010cdd40e39659f0c81091aa22f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_oaep",
      "headRefOid": "205acd0e369b538a049d15c725f525489df753aa",
      "closedAt": "2025-03-03T19:59:01Z",
      "mergedAt": "2025-03-03T19:59:01Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "c45bedaf8fa44bfbe7635fd2b785b5de9d203308"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDOKRPFO86NFUqo",
      "title": "Added a fixed 4-byte length encoding value for the first mlkem compon\u2026",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/113",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026ent so the keys and ciphertexts can be separated.",
      "createdAt": "2025-03-03T01:35:47Z",
      "updatedAt": "2025-03-03T01:38:15Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "1e772eadfe5cacc1841b4ac84b392e9f9b948684",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "112_jg_add_length_encoding",
      "headRefOid": "02a83a4758b8382eb297552477da7e7e130f1eeb",
      "closedAt": "2025-03-03T01:38:15Z",
      "mergedAt": "2025-03-03T01:38:15Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "f631b3f5d650317c19898c996e116a48703f5f11"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "closes #112",
          "createdAt": "2025-03-03T01:36:31Z",
          "updatedAt": "2025-03-03T01:36:31Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 115,
      "id": "PR_kwDOKRPFO86NLpGH",
      "title": "Clarify the encoding used for the KEM keys and Ciphertexts",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/115",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T16:58:56Z",
      "updatedAt": "2025-05-22T19:25:06Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f631b3f5d650317c19898c996e116a48703f5f11",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "114_jg_clarify_component_Serialization",
      "headRefOid": "5a836ad42be72496ed3171b6f811ebfab0da30e2",
      "closedAt": "2025-03-03T18:21:19Z",
      "mergedAt": "2025-03-03T18:21:19Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "4ce5ccb869e5b20d92ea388dd2256d13bc234606"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 116,
      "id": "PR_kwDOKRPFO86NMHF0",
      "title": "Add 4-byte length check guidance for key and ciphertext serialization",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/116",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-03T18:02:45Z",
      "updatedAt": "2025-05-22T19:18:29Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "f631b3f5d650317c19898c996e116a48703f5f11",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "112_jg_add_length_encoding",
      "headRefOid": "08ab18b2e00904ab411946f706c434d3aeaa771a",
      "closedAt": "2025-03-03T18:03:29Z",
      "mergedAt": "2025-03-03T18:03:29Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "5b57dab38e47b2717329407002168fefb182c3a1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 124,
      "id": "PR_kwDOKRPFO86QQUR2",
      "title": "Overhaul of the serialization sections",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/124",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-03-26T18:20:35Z",
      "updatedAt": "2025-04-17T23:44:08Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "105b31fe27e1c3da232954d2cf5cb9658b0570bf",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_no_length_tag",
      "headRefOid": "c0bad7d27a7598ee9b22bbef5cf6bbb32c7e86c3",
      "closedAt": "2025-04-17T23:43:44Z",
      "mergedAt": "2025-04-17T23:43:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "10182f65355ea1d6f048633526665831b49db698"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 127,
      "id": "PR_kwDOKRPFO86RzBHX",
      "title": "Split CMS into its own document",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/127",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #126 ",
      "createdAt": "2025-04-08T14:21:28Z",
      "updatedAt": "2025-04-17T20:46:57Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "bb5477a830cf55e9e18bdc7482cdd6fbc0dc5c45",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cms_split",
      "headRefOid": "8c9c1629ac95b8d826d8488624ef464d490a864f",
      "closedAt": "2025-04-17T20:43:53Z",
      "mergedAt": "2025-04-17T20:43:53Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "105b31fe27e1c3da232954d2cf5cb9658b0570bf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 134,
      "id": "PR_kwDOKRPFO86T139G",
      "title": "Added domain separator generation to the python script",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/134",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #133 ",
      "createdAt": "2025-04-24T23:47:54Z",
      "updatedAt": "2025-04-30T14:31:10Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d390094b8c9f78f9ed9bebf8eedbefd2c5c774ad",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_domsep",
      "headRefOid": "c1bc8033436568106dae315badcd1550672da0a2",
      "closedAt": "2025-04-30T14:31:06Z",
      "mergedAt": "2025-04-30T14:31:06Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "e123232f09b2d69ffcd5556e03fc15b1a224bc4c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 135,
      "id": "PR_kwDOKRPFO86T2FS8",
      "title": "Add P521 combo",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/135",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #132 \r\n\r\nRebased on top of #134 , therefore that one needs to be merged first.\r\n\r\nTODO:\r\n\r\n- [ ] Update .asn file (ASN.1 Module).",
      "createdAt": "2025-04-25T00:52:20Z",
      "updatedAt": "2025-05-01T02:00:54Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "99d38abc13846cb7d94becca25cbd83b277185fc",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_p521",
      "headRefOid": "8457554390954d4d07853a95198f0881652c895f",
      "closedAt": "2025-05-01T01:51:52Z",
      "mergedAt": "2025-05-01T01:51:52Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "2697cc38bacaa7b4caeb5a340e09d7e652f227ba"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 136,
      "id": "PR_kwDOKRPFO86UElvF",
      "title": "Remove DER Encoding Rules section",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/136",
      "state": "CLOSED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since we are not encoding as raw bytes, no need for the section on DER encoding rules.\r\n\r\nCloses #117 ",
      "createdAt": "2025-04-27T13:43:17Z",
      "updatedAt": "2025-05-17T14:36:42Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d390094b8c9f78f9ed9bebf8eedbefd2c5c774ad",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_noder",
      "headRefOid": "726a2d266f1d650a0144b19fd97bd5514d096fa7",
      "closedAt": "2025-05-17T14:36:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am going to close this PR and try again in a fresh one.",
          "createdAt": "2025-05-17T14:36:42Z",
          "updatedAt": "2025-05-17T14:36:42Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86n8YB8",
          "commit": {
            "abbreviatedOid": "726a2d2"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The term DER is used throughout the document, so removing the reference seems not right.",
          "createdAt": "2025-05-06T09:51:46Z",
          "updatedAt": "2025-05-06T09:54:01Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Same commant as in -sigs: DER is used in draft, why remove it here?",
              "createdAt": "2025-05-06T09:51:47Z",
              "updatedAt": "2025-05-06T09:54:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDOKRPFO86UFL7Q",
      "title": "Tweaks to serialization sections",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/137",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #119 \r\nCloses #122 \r\nCloses #114 ",
      "createdAt": "2025-04-27T19:46:47Z",
      "updatedAt": "2025-05-23T15:16:50Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "72fb1bc909eaca86e466a63d46ed3c1323fb045e",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_serialization",
      "headRefOid": "caa6c1210635ea3836f2b5859d0286a397dbe7af",
      "closedAt": "2025-05-23T15:16:49Z",
      "mergedAt": "2025-05-23T15:16:49Z",
      "mergedBy": "janklaussner",
      "mergeCommit": {
        "oid": "352e0c1eef220bb6abfe00872904e12802913366"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ready to merge.",
          "createdAt": "2025-05-15T03:27:40Z",
          "updatedAt": "2025-05-15T03:27:40Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86n8wua",
          "commit": {
            "abbreviatedOid": "0e76d75"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Whole section \"SerializePublicKey and DeserializePublicKey\" exists twice plus several copy&paste errors from -sigs draft",
          "createdAt": "2025-05-06T10:22:06Z",
          "updatedAt": "2025-05-06T10:55:37Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "remove mention of 4-byte length field",
              "createdAt": "2025-05-06T10:22:06Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 84,
              "body": "There is no error raised in the algorithm, so also change this section",
              "createdAt": "2025-05-06T10:24:58Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 175,
              "body": "This whole section is a duplicate of the previous? ",
              "createdAt": "2025-05-06T10:32:43Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 236,
              "body": "mlkemSeed",
              "createdAt": "2025-05-06T10:35:51Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 250,
              "body": "mlkemSeed",
              "createdAt": "2025-05-06T10:36:12Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 262,
              "body": "Line 944: CompositeSignatureValue -> CompositeCiphertextValue \r\nLine 981: signature -> ciphertext\r\nLine 995: signature -> ciphertext\r\nLine 991: ECDSA -> ECDH",
              "createdAt": "2025-05-06T10:41:02Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 186,
              "body": "signature -> KEM",
              "createdAt": "2025-05-06T10:41:42Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            },
            {
              "originalPosition": 259,
              "body": "signature-> ciphertext",
              "createdAt": "2025-05-06T10:42:52Z",
              "updatedAt": "2025-05-06T10:55:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86pZv1T",
          "commit": {
            "abbreviatedOid": "0e76d75"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-15T03:24:59Z",
          "updatedAt": "2025-05-15T03:24:59Z",
          "comments": [
            {
              "originalPosition": 250,
              "body": "This is in the deleted duplicate section, ... done now.",
              "createdAt": "2025-05-15T03:24:59Z",
              "updatedAt": "2025-05-15T03:24:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86qGeAF",
          "commit": {
            "abbreviatedOid": "1d258eb"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-20T11:38:33Z",
          "updatedAt": "2025-05-20T11:38:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86qmymj",
          "commit": {
            "abbreviatedOid": "1d258eb"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-22T19:01:41Z",
          "updatedAt": "2025-05-22T19:01:41Z",
          "comments": [
            {
              "originalPosition": 166,
              "body": "Same comment as in Signatures - The RSA private key format in 8017 section A.1.2 contains the fields for the CRT co-efficients and other data.  They are not optional values, but you could pass ZERO values for the integer fields if you don't want to use them.  ",
              "createdAt": "2025-05-22T19:01:41Z",
              "updatedAt": "2025-05-22T19:01:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86qmz5-",
          "commit": {
            "abbreviatedOid": "1d258eb"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-22T19:04:10Z",
          "updatedAt": "2025-05-22T19:04:10Z",
          "comments": [
            {
              "originalPosition": 238,
              "body": "This should be ML-KEM",
              "createdAt": "2025-05-22T19:04:10Z",
              "updatedAt": "2025-05-22T19:04:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86qvpcc",
          "commit": {
            "abbreviatedOid": "1d258eb"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-23T14:24:03Z",
          "updatedAt": "2025-05-23T14:24:03Z",
          "comments": [
            {
              "originalPosition": 166,
              "body": "Like in Sigs, we will remove the line:  For maximum interoperability, it is RECOMMENDED to use the `(n,d)` private key representation.",
              "createdAt": "2025-05-23T14:24:03Z",
              "updatedAt": "2025-05-23T14:24:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 139,
      "id": "PR_kwDOKRPFO86VIle9",
      "title": "Updates comparison to new ETSI Hybrid KDFs.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/139",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Updates reference to ETSI TS 103 744 V1.2.1.\r\nAligns comparison with new KDF options in ETSIs TS. \r\nRemoves KMAC OID since its not used in draft.",
      "createdAt": "2025-05-06T16:07:56Z",
      "updatedAt": "2025-05-14T14:31:34Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "cc427e13f34b9ba9bcf28adf3f8955395ce53f68",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "130-update-comparison-with-version-121-of-etsi-catkdf",
      "headRefOid": "3ed0959fdb462010ee46a5595bbd3fa54b3db390",
      "closedAt": "2025-05-14T14:31:30Z",
      "mergedAt": "2025-05-14T14:31:30Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "678621b9d1303d7d877db9ca11734259b40ff93e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86pTdpH",
          "commit": {
            "abbreviatedOid": "3ed0959"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-14T14:31:20Z",
          "updatedAt": "2025-05-14T14:31:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOKRPFO86VOYdZ",
      "title": "Merges the two NIST certification sections.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/140",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-07T07:56:44Z",
      "updatedAt": "2025-05-14T14:38:03Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "cc427e13f34b9ba9bcf28adf3f8955395ce53f68",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "125-we-currently-have-two-fips-certification-sections----merge-them",
      "headRefOid": "6c48573ebb946dc45cf5ebeb1c8b97d59e3e0615",
      "closedAt": "2025-05-14T14:37:59Z",
      "mergedAt": "2025-05-14T14:37:58Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "65d9c99113f84e4a81757161412d6fc8397af14a"
      },
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "The original text said that we do not use the \"HKDF-Extract\" step, which contradicts our HKDF description:\r\nhttps://github.com/lamps-wg/draft-composite-kem/blob/cc427e13f34b9ba9bcf28adf3f8955395ce53f68/draft-ietf-lamps-pq-composite-kem.md?plain=1#L583\r\n\r\nI fixed it to \"we do not need to use the HKDF-Expand step\" and hope this is correct...",
          "createdAt": "2025-05-07T08:03:45Z",
          "updatedAt": "2025-05-07T08:03:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86pTjD4",
          "commit": {
            "abbreviatedOid": "6c48573"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-14T14:37:41Z",
          "updatedAt": "2025-05-14T14:37:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDOKRPFO86VVxEj",
      "title": "Auto-including domsep and size table",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/141",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-07T21:27:35Z",
      "updatedAt": "2025-05-07T22:34:48Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "cc427e13f34b9ba9bcf28adf3f8955395ce53f68",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_auto_include_tables",
      "headRefOid": "8c13a7cb1863073792f8cb6da11829c49d84e8b9",
      "closedAt": "2025-05-07T21:40:13Z",
      "mergedAt": "2025-05-07T21:40:13Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "5f61eef54f02d20656f9a9ebce01d7d7fc13b3dd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86oSOlC",
          "commit": {
            "abbreviatedOid": "8c13a7c"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Just a comment about the RSA 3072 and 4096 keysizes.",
          "createdAt": "2025-05-07T22:31:38Z",
          "updatedAt": "2025-05-07T22:34:48Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I'm curious as to why these changed by a couple bytes, but the 2048 one did not/",
              "createdAt": "2025-05-07T22:31:38Z",
              "updatedAt": "2025-05-07T22:34:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOKRPFO86Wkj_X",
      "title": "Removed all the DER wrapping text",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/143",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sister PR in Sigs:\r\n\r\n* https://github.com/lamps-wg/draft-composite-sigs/pull/164\r\n\r\nRemoved duplicate Serialization section.\r\n\r\nSignificantly cut down the sections that deal with DER encoding and ASN.1 structures ... I think we don't need any of that now that we have explicit non-DER serialization routines defined.\r\n\r\nCloses #114 \r\nCloses #117 \r\nCloses #142 \r\n\r\nTODO before merging:\r\n\r\n- [x] Make sure the modified ASN.1 module compiles and matches the ASN.1 in the body.",
      "createdAt": "2025-05-17T15:24:55Z",
      "updatedAt": "2025-05-23T14:22:38Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "65d9c99113f84e4a81757161412d6fc8397af14a",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_noder1",
      "headRefOid": "8d524a6bbea6b5485780b25c9e11b47190e8ea45",
      "closedAt": "2025-05-23T14:22:38Z",
      "mergedAt": "2025-05-23T14:22:38Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "72fb1bc909eaca86e466a63d46ed3c1323fb045e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86qRwfn",
          "commit": {
            "abbreviatedOid": "8d524a6"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I fixed some smaller spelling and ASN.1 errors, now it looks sound for me.\r\nI wonder though if we could get rid of all the individual pk-* definitions for each combination. In the end we only pass through the object identifier id and fix the key usage. But right now I can not wrap my head around how exactly it would look like....",
          "createdAt": "2025-05-21T08:23:18Z",
          "updatedAt": "2025-05-21T08:23:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86qmv24",
          "commit": {
            "abbreviatedOid": "8d524a6"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-22T18:57:11Z",
          "updatedAt": "2025-05-22T18:57:11Z",
          "comments": [
            {
              "originalPosition": 220,
              "body": "Should we remove the CMS comment (Same comment as I had for signatures).",
              "createdAt": "2025-05-22T18:57:11Z",
              "updatedAt": "2025-05-22T18:57:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86qmxNk",
          "commit": {
            "abbreviatedOid": "8d524a6"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-22T18:59:02Z",
          "updatedAt": "2025-05-22T18:59:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 144,
      "id": "PR_kwDOKRPFO86W7J8M",
      "title": "Added section on subset profile",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/144",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #123",
      "createdAt": "2025-05-20T16:37:20Z",
      "updatedAt": "2025-05-21T14:13:44Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "65d9c99113f84e4a81757161412d6fc8397af14a",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_profile",
      "headRefOid": "7a024b943f30334c2122aaaddcf5fa6cc44ed35a",
      "closedAt": "2025-05-21T14:13:39Z",
      "mergedAt": "2025-05-21T14:13:39Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "0e1843ae0ea2bb9433bb4063e2f403fd741e45a5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86qQe61",
          "commit": {
            "abbreviatedOid": "7a024b9"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good",
          "createdAt": "2025-05-21T06:27:14Z",
          "updatedAt": "2025-05-21T06:27:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDOKRPFO86W-6J0",
      "title": "Incorporating Piotr's feedback from #129",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/145",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is based on top of #137, so merge that first before reviewing this.\r\n\r\nSo far, I'm up to Piotr's comment \"9.\"",
      "createdAt": "2025-05-21T02:55:49Z",
      "updatedAt": "2025-05-25T01:30:06Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "352e0c1eef220bb6abfe00872904e12802913366",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_129",
      "headRefOid": "0d0095670f64dba6fdc1d3b121ccccf3dbf0e85f",
      "closedAt": "2025-05-25T01:30:03Z",
      "mergedAt": "2025-05-25T01:30:03Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "b3247a22d6a0fbffda2a77e8b7d6a96c8f777882"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86qmu4t",
          "commit": {
            "abbreviatedOid": "85084b9"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks ready to merge.",
          "createdAt": "2025-05-22T18:55:22Z",
          "updatedAt": "2025-05-22T18:55:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 147,
      "id": "PR_kwDOKRPFO86Xb8Bb",
      "title": "146 jg new oids",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/147",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Added new prototype OIDS in Markdown, ASN.1 and reference implementation\r\ncloses #146 ",
      "createdAt": "2025-05-23T19:05:15Z",
      "updatedAt": "2025-05-23T22:17:56Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "352e0c1eef220bb6abfe00872904e12802913366",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "146_jg_newOIDs",
      "headRefOid": "dae4e6b75d434bf5c4168a870faf137e1857f938",
      "closedAt": "2025-05-23T22:17:56Z",
      "mergedAt": "2025-05-23T22:17:56Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "7f6f4681601e904c2fe3baee197fbb3027d7dd90"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "closes #146 ",
          "createdAt": "2025-05-23T19:06:47Z",
          "updatedAt": "2025-05-23T19:06:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86q0PwJ",
          "commit": {
            "abbreviatedOid": "dae4e6b"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2025-05-23T22:17:10Z",
          "updatedAt": "2025-05-23T22:17:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 150,
      "id": "PR_kwDOKRPFO86XqVPR",
      "title": "Addressing Carl's feedback",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/150",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Relates to https://github.com/lamps-wg/draft-composite-sigs/issues/148 in -sigs",
      "createdAt": "2025-05-26T16:13:37Z",
      "updatedAt": "2025-05-30T15:19:27Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b3247a22d6a0fbffda2a77e8b7d6a96c8f777882",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_carl_148",
      "headRefOid": "5823a7830ee85093117a97f9d02ca11e47ff4b61",
      "closedAt": "2025-05-30T15:19:24Z",
      "mergedAt": "2025-05-30T15:19:24Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "806a5d5cb7c990f05511751dccf096ba07b5cd35"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janklaussner  I fixed the mistakes. Ready for you to look again.",
          "createdAt": "2025-05-28T16:41:29Z",
          "updatedAt": "2025-05-28T16:41:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86rU60V",
          "commit": {
            "abbreviatedOid": "f5df8c8"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "One open Question as comment.",
          "createdAt": "2025-05-28T10:00:40Z",
          "updatedAt": "2025-05-28T10:01:29Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "why remove this section?",
              "createdAt": "2025-05-28T10:00:41Z",
              "updatedAt": "2025-05-28T10:01:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86raaLN",
          "commit": {
            "abbreviatedOid": "1f10f23"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Ready to merge ;)",
          "createdAt": "2025-05-28T17:03:57Z",
          "updatedAt": "2025-05-28T17:03:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDOKRPFO86XzbO3",
      "title": "Adds clarifications on serlialization sections.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/151",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Removes last usages of term 'tradKey''.\r\nClarifies encoding of ECDH and Edward PKs.\r\nRemoves mentions of 'CompositeKEMPrivateKey'.\r\n\r\nCloses #129 ",
      "createdAt": "2025-05-27T15:18:21Z",
      "updatedAt": "2025-05-28T14:16:39Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b3247a22d6a0fbffda2a77e8b7d6a96c8f777882",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "129-proposals-for-changes-in-chapters-2-5-mainly-concerning-the-serialization-aspect",
      "headRefOid": "00f9ce86369c9765f1e1b38257eea4dd5692a064",
      "closedAt": "2025-05-28T14:16:38Z",
      "mergedAt": "2025-05-28T14:16:38Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "bea1f430b5fe7904d277d2ae269c4603671120e5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86rNa-G",
          "commit": {
            "abbreviatedOid": "00f9ce8"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Good catches!",
          "createdAt": "2025-05-27T19:55:54Z",
          "updatedAt": "2025-05-27T19:55:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86rOtQy",
          "commit": {
            "abbreviatedOid": "00f9ce8"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T21:36:39Z",
          "updatedAt": "2025-05-27T21:36:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOKRPFO86YKaOX",
      "title": "Clarified notation around KDFs",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/154",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #153 \r\nCloses #160 ",
      "createdAt": "2025-05-29T18:02:24Z",
      "updatedAt": "2025-06-03T21:56:03Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "50b140eef7837a2f2a50262692a06c96683e5c2c",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_153",
      "headRefOid": "02059cd84823d0a0a291107d1c7ecca9ce9a0212",
      "closedAt": "2025-06-03T21:56:03Z",
      "mergedAt": "2025-06-03T21:56:03Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "6099a2151ad341899ce0715ecd658bce1a49ad13"
      },
      "comments": [
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "@ounsworth \r\n1. The latest fix for KDF=HKDF clarifies a number of concerns raised in issue #153, \u200b\u200bi.e. the sentence: \r\n_Within this specification, \"HKDF\" means only the \"HKDF-Extract\" step; the \"HKDF-Expand\" step is always omitted when computing a composite KEM combiner._\r\n\r\n2.  My previous comments were rather aimed at other changes, namely to clarify that HKDF should have the following form and parameters:\r\n(...)\r\nelse if KDF is \"HKDF\"\r\nss = Expand(HKDF-Extract(salt=\"\", IKM=mlkemSS || tradSS || tradCT\r\n|| tradPK || Domain), info, L)\r\n- Note: salt is the empty string (0 octets), which will\r\n- internally be mapped to the zero vector `0x00..00` of\r\n- the correct input size for the underlying hash function\r\n- as per section 2.2 of [RFC5869];\r\n- info is a zero-length string and\r\n- L is 32 (256 bits).\r\nwhich would be consistent with the provisions of section D.1.1:\r\n(...) _The Composite KEM variants that use SHA3 as a combiner fit form (12) while the variants that use HKDF-SHA2 fit form (13)._\r\nNow I see that my previous comment was not understood - I should probably point out the above sentence from D.1.1.\r\n\r\n3. What now?\r\nThe sentence from D.1.1. must be changed, but I recommend to maintain compliance with NIST SP 800-227. Since NIST approves both one-step key derivation and two-step key derivation, let's not modify the \"two-step\" version, which will be considered as non-compliance, and let's introduce only the \"one-step\" version with three hash functions: SHA256, SHA3-256 and SHA384/256 to KEM Combiner.\r\n\r\nHowever, such an approach, although rather compliant with NIST 227, requires modification of section 10.2.3 \"SHA3 vs HKDF-SHA2\", in particular the last paragraph:\r\n_SHA3 is known to have all of the necessary dual-PRF properties [X-Wing], but SHA2 does not and therefore all SHA2-based constructions MUST use SHA2 within an HMAC construction such as HKDF-SHA2 [GHP18]._\r\nOf course, a change in this section must also be made if the authors decide to leave only the Extract() function, and not the entire Expand(Extract()).\r\n\r\nMy recommendation:\r\n- NIST 227 compliance is a MUST;\r\n- \"dual-PRF properies\" is of lesser importance to me, as long as NIST accepts it.",
          "createdAt": "2025-05-30T09:27:27Z",
          "updatedAt": "2025-05-30T09:27:27Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hi @PiotrPopis \r\n\r\nI still do not understand your comment.\r\nWe are never using the \"two-step\" construction from SP 56Cr2 / 227. We are only using \"One-step\"; we either use it in the form\r\n\r\n    SHA3(x)\r\n\r\nwhich is SP 800-56Cr2 section 4.1 Option 1, and (12) in SP 800-227.\r\n\r\nOr else we are doing \r\n\r\n    HKDF-Expand(salt, x) = HMAC(salt, x)\r\n\r\nwhich is SP 800-56Cr2 section 4.1 Option 2, and still (12) in SP 800-227. **This is still a one-step KDF as per NIST**.\r\n\r\nI though this was already clearly stated in D.1.1:\r\n\r\n> The HKDF-SHA2 options can be certified under [[SP.800-56Cr2](https://lamps-wg.github.io/draft-composite-kem/draft-ietf-lamps-pq-composite-kem.html#SP.800-56Cr2)] One-Step Key Derivation Option 2 ...\r\n\r\n... Oh I see the problem. That paragraph is in conflict with a sentence higher up in D.1.1:\r\n\r\n> The Composite KEM variants that use SHA3 as a combiner fit form (12) while the variants that use HKDF-SHA2 fit form (13).\r\n\r\nOk, yes, that sentence is incorrect. there is definitely some clean-up work to do here on D.1.1. Probably I should delete formula (13) since in the end we don't use it.",
          "createdAt": "2025-05-30T15:34:22Z",
          "updatedAt": "2025-05-30T15:37:09Z"
        },
        {
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "body": "@ounsworth \r\nIt is now clear to me that KEM Combiner should always use one-step key derivation according to equation (12) of NIST 227.\r\nIn the case of SHA3 it will be option 1 according to chapter 4.1 of NIST SP 800-56C rev. 2, while in the case of SHA2 it will be option 2 according to 800-56Cr2.\r\n\r\nWe agreed that the previous provisions were ambiguous in this matter, and I was additionally confused by the reference to HKDF compliant with RFC5869.\r\n\r\nFor me (and probably many others reading the document) HKDF is a function described in RFC 5859. Therefore, when I see the phrase _if KDF is \"HKDF\"_, I expect the familiar function from RFC 5859. Instead, I read that it is just Extract(), which is basically an HMAC with a fixed key of zeros.\r\n\r\nI suggest - in addition to changes in D.1.1 - abandoning the reference to HKDF, and instead write directly that in the case of SHA2 we use the HMAC function (FIPS198, RFC 2104) as KDF with the key K being a string of HashLen zeros.\r\n\r\nI confirm that the document indicates that it is only \"partial\" HKDF (limited only to the Extract() function), but the reader still has doubts about the \"full\" version of HKDF - see e.g. section 7.1, where there is a clear suggestion of \"full\" HKDF: _For the use of HKDF [RFC5869]: a salt is not provided; i.e. the default salt (all zeroes of length HashLen) will be used. For HKDF-SHA256 the output of 256 bit output is used directly; for HKDF-SHA384/256, HKDF is invoked with SHA384 and then the output is truncated to 256 bits, meaning that only the first 256 bits of output are used._\r\n\r\nHowever, if the authors decided to leave the current provisions regarding HKDF, I recommend clarifying the following in chapter 7.1:\r\nFor the use of HKDF [RFC5869] (**reduced to just the Extract() function**): a salt is not provided; i.e. the default salt (all zeroes of length HashLen) will be used. For HKDF-SHA256 the output of 256 bit output is used directly; for HKDF-SHA384/256, HKDF is invoked with SHA384 and then the output is truncated to 256 bits, meaning that only the first 256 bits of output are used.\r\n\r\nAdditionally: I withdraw my comment regarding the modification of section 10.2.3.",
          "createdAt": "2025-06-02T10:31:31Z",
          "updatedAt": "2025-06-02T10:31:31Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closes #160 ",
          "createdAt": "2025-06-03T15:47:19Z",
          "updatedAt": "2025-06-03T15:47:19Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this also Closes #158 ",
          "createdAt": "2025-06-03T21:39:10Z",
          "updatedAt": "2025-06-03T21:39:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86rzD2A",
          "commit": {
            "abbreviatedOid": "2019cb1"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Seems very clear to me.   ",
          "createdAt": "2025-05-30T19:10:41Z",
          "updatedAt": "2025-05-30T19:10:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86scwnd",
          "commit": {
            "abbreviatedOid": "af38b55"
          },
          "author": "carl-wallace",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T16:09:01Z",
          "updatedAt": "2025-06-03T16:09:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86sczTY",
          "commit": {
            "abbreviatedOid": "af38b55"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T16:12:06Z",
          "updatedAt": "2025-06-03T16:12:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86sgOLU",
          "commit": {
            "abbreviatedOid": "af38b55"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T21:08:36Z",
          "updatedAt": "2025-06-03T21:08:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDOKRPFO86Yrnwe",
      "title": "Remove mention of CNSA",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/157",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #156 ",
      "createdAt": "2025-06-02T18:33:41Z",
      "updatedAt": "2025-06-03T21:12:28Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "806a5d5cb7c990f05511751dccf096ba07b5cd35",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_cnsa",
      "headRefOid": "2b4f5b562858d335230279e88d3ddc945b409271",
      "closedAt": "2025-06-03T21:12:28Z",
      "mergedAt": "2025-06-03T21:12:28Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "50b140eef7837a2f2a50262692a06c96683e5c2c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86sQopb",
          "commit": {
            "abbreviatedOid": "2b4f5b5"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-02T21:50:58Z",
          "updatedAt": "2025-06-02T21:50:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86sYq9S",
          "commit": {
            "abbreviatedOid": "2b4f5b5"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T12:35:29Z",
          "updatedAt": "2025-06-03T12:35:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86sgPok",
          "commit": {
            "abbreviatedOid": "2b4f5b5"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T21:11:46Z",
          "updatedAt": "2025-06-03T21:11:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 159,
      "id": "PR_kwDOKRPFO86Yr--s",
      "title": "Changed SHA384 to SHA512",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/159",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #158",
      "createdAt": "2025-06-02T19:12:53Z",
      "updatedAt": "2025-06-03T12:40:09Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "mikeo_153",
      "baseRefOid": "97160456bf372879d3d8b6f1c43c7198d4f8d892",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_sha384",
      "headRefOid": "4ee75a042d21fe84873bb7c2a2f4e2b71f9d6630",
      "closedAt": "2025-06-03T12:04:32Z",
      "mergedAt": "2025-06-03T12:04:32Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "0bc40b4ef4e53f025015c1411bd1d1cc9f142b54"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am changing the merge target: I am merging into the branch for #154 rather than Main.",
          "createdAt": "2025-06-03T11:43:51Z",
          "updatedAt": "2025-06-03T11:43:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86sQnIJ",
          "commit": {
            "abbreviatedOid": "0969698"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-02T21:47:03Z",
          "updatedAt": "2025-06-02T21:47:03Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Is this correct.  Should it be HKDF-SHA512 instead of SHA3-256 in the KDF column?",
              "createdAt": "2025-06-02T21:47:03Z",
              "updatedAt": "2025-06-02T21:47:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86sQs6X",
          "commit": {
            "abbreviatedOid": "0969698"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-02T22:01:16Z",
          "updatedAt": "2025-06-02T22:01:16Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This Paragraph:\r\n\r\n> The lower security levels (i.e. ML-KEM768) are provided with HKDF-SHA2 as the KDF in order to facilitate implementations that do not have easy access to SHA3 outside of the ML-KEM function. Higher security levels (i.e. ML-KEM1024) are paired with SHA3 for computational efficiency except for one variant paired with HKDF-SHA384 in order to leave open the possibility of compliance with [CNSA2.0], and the Edwards Curve (X25519 and X448) combinations are paired with SHA3 for compatibility with other similar specifications.\r\n\r\nSeems to indicate This one:  id-MLKEM1024-ECDH-P384-HKDF-SHA384  but it was changed to id-MLKEM1024-ECDH-P384-HKDF-SHA512 by this change.   \r\n\r\nI'm still confused by the last line, the name.  If KDF is indeed SHA3-256 for line 1095\r\n\r\n| id-MLKEM1024-ECDH-brainpoolP384r1-HKDF-SHA512  | &lt;CompKEM&gt;.58   | MLKEM1024       | ECDH-brainpoolP384r1 | SHA3-256 |\r\n\r\nShouldn't it be called:  id-MLKEM1024-ECDH-brainpoolP384r1-SHA3-256  ?",
              "createdAt": "2025-06-02T22:01:16Z",
              "updatedAt": "2025-06-02T22:01:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86sUP2H",
          "commit": {
            "abbreviatedOid": "0969698"
          },
          "author": "PiotrPopis",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T07:08:35Z",
          "updatedAt": "2025-06-03T07:08:35Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I understood Richard Kettlewell's comment to mean that only the KDF column in table 2 (section 7.1) needs to be corrected, where HKDF-SHA384/256 should be replaced by HKDF-SHA512/256. This is de facto an editorial change, but it introduces compatibility of hash function names with FIPS 180-4, especially sections 6.5 and 6.7.",
              "createdAt": "2025-06-03T07:08:35Z",
              "updatedAt": "2025-06-03T07:08:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86sXSB2",
          "commit": {
            "abbreviatedOid": "0969698"
          },
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T10:50:25Z",
          "updatedAt": "2025-06-03T10:50:26Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think we still need some notation clarity.\r\n\r\nMy understanding (and hope l-) was that the goal was HKDF-Extract-SHA512, truncated to 256 bits. Since HDKF-Extract is just HMAC with a fixed key, we might write this:\r\n\r\n`  (HMAC-SHA-512(0,Z))/256`\r\n\r\nThe current notation (HKDF-SHA512/256) however risks confusion with using SHA512/256 (FIPS 180-4 s5.3.6 & s6.7) as the hash. We might write this:\r\n\r\n`  HMAC-(SHA-512/256)(0,Z)`\r\n\r\nThis is _not the same thing_: with SHA512/256 the inner hash of the HMAC is truncated, and both hashes use different initial hash values.\r\n\r\nIt could also risk confusion with the FIPS 180-4 s7 permission to just truncate hashes without changing IHVs etc.\r\n\r\nOther notes:\r\n\r\n* SHA512/256 is referenced by SP800-56Cr2, so I think it would still be acceptable in a FIPS environment\r\n* I suspect SHA512/256 is not commonly implemented. It's an easy lift but really, who wants to?\r\n* SHA384 has different initial hash values again.",
              "createdAt": "2025-06-03T10:50:26Z",
              "updatedAt": "2025-06-03T10:51:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86sX59u",
          "commit": {
            "abbreviatedOid": "0969698"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-03T11:38:26Z",
          "updatedAt": "2025-06-03T11:38:27Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Good point. I will remove the \"HMAC-SHA512/256\" notation and instead put \"HMAC-SHA512\" in the table, and also add an explicit \"truncate(ss, 256)\" to the KemCombiner function definition.",
              "createdAt": "2025-06-03T11:38:26Z",
              "updatedAt": "2025-06-03T11:38:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDOKRPFO86Y46EK",
      "title": "Spell check and xml2rfc warnings",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/161",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Relates to #148 \r\nRelates to #128 ",
      "createdAt": "2025-06-03T19:34:54Z",
      "updatedAt": "2025-06-04T16:22:26Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "23df6bd47221eb37f9cab54b4c274a7ee3f70c49",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_spellcheck_warnings",
      "headRefOid": "26ec60433dd873b8930290cd3a51cbdf7fdecb89",
      "closedAt": "2025-06-04T16:22:20Z",
      "mergedAt": "2025-06-04T16:22:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "def1a52a7045919cc3fc44c8a43074e85a8092f9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86sgesX",
          "commit": {
            "abbreviatedOid": "26ec604"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-03T21:41:45Z",
          "updatedAt": "2025-06-03T21:41:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 162,
      "id": "PR_kwDOKRPFO86ZCrRP",
      "title": "Direct spec references for ECDH KEM components",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/162",
      "state": "MERGED",
      "author": "optnfast",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-04T14:56:01Z",
      "updatedAt": "2025-06-04T16:21:53Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6099a2151ad341899ce0715ecd658bce1a49ad13",
      "headRepository": "optnfast/draft-composite-kem",
      "headRefName": "localize-references",
      "headRefOid": "7928f8f2662029d5cae7b26e1850934044ec1d84",
      "closedAt": "2025-06-04T16:21:53Z",
      "mergedAt": "2025-06-04T16:21:53Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "cbb9169d356c209382e635fab12a5a22fa8b0b5b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 163,
      "id": "PR_kwDOKRPFO86ZCshj",
      "title": "Fix a couple of broken external references",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/163",
      "state": "CLOSED",
      "author": "optnfast",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-04T14:57:58Z",
      "updatedAt": "2025-06-04T14:58:54Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6099a2151ad341899ce0715ecd658bce1a49ad13",
      "headRepository": "optnfast/draft-composite-kem",
      "headRefName": "fixrefs",
      "headRefOid": "e453cf0e8c936c04c1fefdca7171335d96d6ac9a",
      "closedAt": "2025-06-04T14:58:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "optnfast",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In fact I see Mike beat me to it, closing.",
          "createdAt": "2025-06-04T14:58:54Z",
          "updatedAt": "2025-06-04T14:58:54Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 164,
      "id": "PR_kwDOKRPFO86ZFXqS",
      "title": "-sigs and -kems alignment",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/164",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #166 \r\nCloses #168 \r\nCloses #169\r\nCloses #164",
      "createdAt": "2025-06-04T19:58:13Z",
      "updatedAt": "2025-09-21T21:33:01Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "a23cd0165c32e0870c973f64085e804d92b5db0a",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_sig_kem_alignment",
      "headRefOid": "2ed78e73df9c5d368ae78e7c7675d7a9cf87d3aa",
      "closedAt": "2025-06-12T17:26:48Z",
      "mergedAt": "2025-06-12T17:26:48Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "b9af933c93148f0014a329f3b514904433bb1c2a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 165,
      "id": "PR_kwDOKRPFO86ZLNnr",
      "title": "Clarify FIPS-140 approval situation around DHKEM",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/165",
      "state": "MERGED",
      "author": "optnfast",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-06-05T10:29:22Z",
      "updatedAt": "2025-06-07T00:48:23Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "2ea84ed772f98723d4d0be5fbe07f85266dbd5bc",
      "headRepository": "optnfast/draft-composite-kem",
      "headRefName": "fips-nuances",
      "headRefOid": "832776435d6559e81ae6e486f94a425d4048dd1b",
      "closedAt": "2025-06-07T00:48:23Z",
      "mergedAt": "2025-06-07T00:48:23Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "a23cd0165c32e0870c973f64085e804d92b5db0a"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Good clarification.",
          "createdAt": "2025-06-07T00:48:19Z",
          "updatedAt": "2025-06-07T00:48:19Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 170,
      "id": "PR_kwDOKRPFO86asSJu",
      "title": "Fixes and alignments",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/170",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* refer to all EC algorithms as DH, because ECDH in most case excludes X25519 and X448\r\n* adds secp256r1 to fixed algorithms identifiers",
      "createdAt": "2025-06-16T10:47:07Z",
      "updatedAt": "2025-06-16T16:41:28Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "b9af933c93148f0014a329f3b514904433bb1c2a",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "janklaussner-patch-1",
      "headRefOid": "a293237e144463f492f495355fbadd07caaf8104",
      "closedAt": "2025-06-16T15:31:09Z",
      "mergedAt": "2025-06-16T15:31:09Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "3bc22de64711da43a505fbd4015e738d34929319"
      },
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "One thing I like to crosscheck: \r\nhttps://github.com/lamps-wg/draft-composite-kem/blob/b9af933c93148f0014a329f3b514904433bb1c2a/draft-ietf-lamps-pq-composite-kem.md?plain=1#L694\r\nI removed the tuple return in this PR because I am not aware that TradKEM.Decap() returns something else than tradSS.\r\n",
          "createdAt": "2025-06-16T10:51:48Z",
          "updatedAt": "2025-06-16T10:51:48Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for these changes Jan.  They look good.  I agree we shouldn't have to return a tuple from the decaps function when it returns a single ss.  That may have been left over from our attempt to make things more generic a few weeks ago.  ",
          "createdAt": "2025-06-16T14:46:32Z",
          "updatedAt": "2025-06-16T14:46:32Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86uyZ8d",
          "commit": {
            "abbreviatedOid": "a293237"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-16T14:46:50Z",
          "updatedAt": "2025-06-16T14:46:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86uzAg6",
          "commit": {
            "abbreviatedOid": "a293237"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Changes look good. Thanks for the careful review.",
          "createdAt": "2025-06-16T15:29:39Z",
          "updatedAt": "2025-06-16T15:29:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOKRPFO86bUGUY",
      "title": "Change the encoding of the ECDSA and RSA components to PKCS1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/178",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #175 \r\n\r\nCorrected the composite component encoding format.",
      "createdAt": "2025-06-19T21:27:55Z",
      "updatedAt": "2025-06-20T17:55:05Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "24c2cfd4b8210c4a70961c56f2b99e140b109dd2",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "jg_fixRSA_EC_Encoding",
      "headRefOid": "7de65d04047c12f41e101c472a9d1f654390821e",
      "closedAt": "2025-06-20T17:55:05Z",
      "mergedAt": "2025-06-20T17:55:05Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "208230972b48d37484eaeb81eaf4baeed086bda2"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Dan for Verifying so quickly!",
          "createdAt": "2025-06-20T14:23:46Z",
          "updatedAt": "2025-06-20T14:23:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86ve1ZG",
          "commit": {
            "abbreviatedOid": "09ce9b5"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Verified that the ECDSA test vectors work.  I don't have the RSS ones implemented yet, but the ASN.1 looks good.",
          "createdAt": "2025-06-19T22:02:54Z",
          "updatedAt": "2025-06-19T22:02:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOKRPFO86dfsWX",
      "title": "Jg 177 asn.1",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/182",
      "state": "MERGED",
      "author": "johngray-dev",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixed the ASN.1 module for the pk-CompositeSignature and sa-CompositeSignature\r\n\r\nCloses #177",
      "createdAt": "2025-07-04T21:10:00Z",
      "updatedAt": "2025-07-06T12:34:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "208230972b48d37484eaeb81eaf4baeed086bda2",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "jg_177_ASN.1",
      "headRefOid": "91289c00b859d3b8b9372db7068b26c179f17973",
      "closedAt": "2025-07-06T12:34:44Z",
      "mergedAt": "2025-07-06T12:34:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "774e8cf1776cc19160816fe2e06e4b5a17ed5999"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86ySpm4",
          "commit": {
            "abbreviatedOid": "91289c0"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-06T12:34:39Z",
          "updatedAt": "2025-07-06T12:34:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "PR_kwDOKRPFO86eAtQh",
      "title": "Changes representation of X25519/X448 private keys to CurvePrivateKey.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/183",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #174",
      "createdAt": "2025-07-08T20:51:52Z",
      "updatedAt": "2025-08-15T11:59:33Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "fed5eab7ee4088bce75a80db5264b20d3a778121",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "174-x25519x448-encoding",
      "headRefOid": "dd88dc427544f7949d48fc6c3744b0275be13ad1",
      "closedAt": "2025-08-15T11:59:33Z",
      "mergedAt": "2025-08-15T11:59:33Z",
      "mergedBy": "janklaussner",
      "mergeCommit": {
        "oid": "51420da83d152fbc7d8b659032d9efcfe7f1b01b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86yxZre",
          "commit": {
            "abbreviatedOid": "014a38f"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Text looks good, I haven't reviewed the test vectors.",
          "createdAt": "2025-07-08T23:06:41Z",
          "updatedAt": "2025-07-08T23:06:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86z1_RV",
          "commit": {
            "abbreviatedOid": "014a38f"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the Change.  Looks good Jan!",
          "createdAt": "2025-07-14T18:00:17Z",
          "updatedAt": "2025-07-14T18:00:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 184,
      "id": "PR_kwDOKRPFO86eIJOe",
      "title": "Makes encoding of EC and RSA components more specific.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/184",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #173",
      "createdAt": "2025-07-09T13:32:15Z",
      "updatedAt": "2025-08-29T13:21:57Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "7faa41fbe51816c03e9b98ee6b93a54160306445",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "173-private-key-serialization-is-under-specified",
      "headRefOid": "2db7bf6dcde3dffe02ee6e2bd96b7fdc17a52076",
      "closedAt": "2025-08-13T14:16:20Z",
      "mergedAt": "2025-08-13T14:16:20Z",
      "mergedBy": "janklaussner",
      "mergeCommit": {
        "oid": "b42e01d6d40e450f90d4932d7744dec200aac584"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86y7ocp",
          "commit": {
            "abbreviatedOid": "2db7bf6"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-09T15:15:35Z",
          "updatedAt": "2025-07-09T15:15:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86y_be6",
          "commit": {
            "abbreviatedOid": "2db7bf6"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-09T20:20:30Z",
          "updatedAt": "2025-07-09T20:20:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 185,
      "id": "PR_kwDOKRPFO86eK4TA",
      "title": "Adding tradPK to sk",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/185",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #179",
      "createdAt": "2025-07-09T18:22:46Z",
      "updatedAt": "2025-09-21T21:33:01Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "51420da83d152fbc7d8b659032d9efcfe7f1b01b",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_add_tradPK_to_sk",
      "headRefOid": "243222667a6523c8394f9a8e7f23b5c2057f0e29",
      "closedAt": "2025-08-15T12:39:25Z",
      "mergedAt": "2025-08-15T12:39:25Z",
      "mergedBy": "janklaussner",
      "mergeCommit": {
        "oid": "38832ef0207bad13b83e9d2a2a7e0351b5b0d28f"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does this require rolling the OIDs? Probably yes.",
          "createdAt": "2025-07-09T18:44:06Z",
          "updatedAt": "2025-07-09T18:44:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86y-2Vc",
          "commit": {
            "abbreviatedOid": "dbceb87"
          },
          "author": "sfluhrer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T19:26:28Z",
          "updatedAt": "2025-07-09T19:26:28Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "I think you need TradPK here as well",
              "createdAt": "2025-07-09T19:26:28Z",
              "updatedAt": "2025-07-09T19:26:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86y-54o",
          "commit": {
            "abbreviatedOid": "dbceb87"
          },
          "author": "sfluhrer",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T19:31:48Z",
          "updatedAt": "2025-07-09T19:31:48Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "\"the private key serialization\" - it feels like the second half of that sentence is missing",
              "createdAt": "2025-07-09T19:31:48Z",
              "updatedAt": "2025-07-09T19:31:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86y--G3",
          "commit": {
            "abbreviatedOid": "dbceb87"
          },
          "author": "sfluhrer",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "I put the two things I found inline",
          "createdAt": "2025-07-09T19:38:44Z",
          "updatedAt": "2025-07-09T19:38:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86y_Se8",
          "commit": {
            "abbreviatedOid": "dbceb87"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T20:08:30Z",
          "updatedAt": "2025-07-09T20:08:31Z",
          "comments": [
            {
              "originalPosition": 84,
              "body": "D'oh!",
              "createdAt": "2025-07-09T20:08:30Z",
              "updatedAt": "2025-07-09T20:08:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86y_TBW",
          "commit": {
            "abbreviatedOid": "dbceb87"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-09T20:09:14Z",
          "updatedAt": "2025-07-09T20:09:14Z",
          "comments": [
            {
              "originalPosition": 144,
              "body": "Uhh, yep. I meant to come back and finish that.",
              "createdAt": "2025-07-09T20:09:14Z",
              "updatedAt": "2025-07-09T20:09:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86y_aSG",
          "commit": {
            "abbreviatedOid": "19afe87"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-09T20:18:49Z",
          "updatedAt": "2025-07-09T20:18:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86y_og9",
          "commit": {
            "abbreviatedOid": "19afe87"
          },
          "author": "sfluhrer",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-09T20:40:59Z",
          "updatedAt": "2025-07-09T20:40:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86zJV_O",
          "commit": {
            "abbreviatedOid": "19afe87"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-10T12:54:07Z",
          "updatedAt": "2025-07-10T12:54:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOKRPFO86fj8RZ",
      "title": "Fix KeyGen() and Decap() to use mlkemSeed instead of mlkemSK",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/187",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "* Composite.KeyGen() returns now mlkemSeed in serialized Composite Private Key.\r\n* Composite.Decap() now generates mlkemSK from mlkemSeed.\r\n* Fixes function calls to ML-KEM.* in Decap().",
      "createdAt": "2025-07-18T11:41:12Z",
      "updatedAt": "2025-07-25T16:07:59Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "78af696ca5498dcf874089ccaacb89f9c87c3623",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "186-keygen-and-decap-use-mlkemsk-instead-of-mlkemseed",
      "headRefOid": "e36c1c9a92c5917ffdf340b69778efdc198e559e",
      "closedAt": "2025-07-25T16:07:59Z",
      "mergedAt": "2025-07-25T16:07:59Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "c6ae932711ec984d5c371a3cb087338b145b3092"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 189,
      "id": "PR_kwDOKRPFO86fsJa-",
      "title": "write an artifact zip",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/189",
      "state": "MERGED",
      "author": "xyakimo1",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-19T16:33:24Z",
      "updatedAt": "2025-07-19T17:24:35Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "78af696ca5498dcf874089ccaacb89f9c87c3623",
      "headRepository": "xyakimo1/draft-composite-kem",
      "headRefName": "artifacts_certs_r5",
      "headRefOid": "2700de7a8f234f44e47a739cb61691914318627c",
      "closedAt": "2025-07-19T17:24:35Z",
      "mergedAt": "2025-07-19T17:24:35Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "293a257042e849ab76fc605320d773b91a9af2d3"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thank you Stepan, this is great!\r\n\r\nI'll merge this.\r\n\r\nThe next step is to make  PR to https://github.com/IETF-Hackathon/pqc-certificates  .. to add this zip. It probably makes sense to add a new folder `providers/composite-kem-ref-impl` (and maybe rename the existing `composite-ref-impl` to `composite-sigs-ref-impl`)",
          "createdAt": "2025-07-19T17:24:26Z",
          "updatedAt": "2025-07-19T17:24:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO8607UK4",
          "commit": {
            "abbreviatedOid": "2700de7"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-19T17:22:22Z",
          "updatedAt": "2025-07-19T17:22:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "PR_kwDOKRPFO86f0qon",
      "title": "Validate artifacts_certs_r5.zip",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/190",
      "state": "MERGED",
      "author": "xyakimo1",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-07-21T10:23:59Z",
      "updatedAt": "2025-07-24T18:15:20Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "293a257042e849ab76fc605320d773b91a9af2d3",
      "headRepository": "xyakimo1/draft-composite-kem",
      "headRefName": "r5_private_key_verification",
      "headRefOid": "da318bdcbcb6382a0c5020de55e91ec277339cff",
      "closedAt": "2025-07-24T18:15:20Z",
      "mergedAt": "2025-07-24T18:15:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "dea68949b9ac86b7261b431cb30f683978452eb2"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is amazing! I am going to go ahead and merge, and then integrate into the automated tests in the hackathon repo!",
          "createdAt": "2025-07-24T18:15:16Z",
          "updatedAt": "2025-07-24T18:15:16Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 194,
      "id": "PR_kwDOKRPFO86j9buL",
      "title": "Properly wrapped the non-composite ML-KEM test vector priv keys in an\u2026",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/194",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\u2026 OCTET STRING to satisfy the CHOICE structure. Closes #172",
      "createdAt": "2025-08-16T21:17:26Z",
      "updatedAt": "2025-09-21T21:48:22Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "e15f5d5018e52a932a4147b249cded2864841f89",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_mlkem_priv_raw",
      "headRefOid": "b0f6c0b413004edb69170f6b9064835522f5c227",
      "closedAt": "2025-09-21T21:48:20Z",
      "mergedAt": "2025-09-21T21:48:20Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "feff3c8374e353c60bfff3e111b123dbf129912c"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@danvangeest  I would like your review on this. \r\n\r\nThis PR mirrors https://github.com/lamps-wg/draft-composite-sigs/pull/219 in -sigs.",
          "createdAt": "2025-08-16T21:18:16Z",
          "updatedAt": "2025-08-16T21:18:16Z"
        },
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "Authors agree, please merge after resolving conflict.",
          "createdAt": "2025-08-28T13:37:20Z",
          "updatedAt": "2025-08-28T13:37:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO87BCn-B",
          "commit": {
            "abbreviatedOid": "f891cb7"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-09-18T10:26:29Z",
          "updatedAt": "2025-09-18T10:56:06Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "`dk_pkcs8` is now a properly encoded ML-KEM PKCS#8 (in this case the seed CHOICE which is an octet string with tag [0]) with ASN.1 type 0x80.\r\n\r\nHowever, `dk` is just a regular OCTET STRING (ASN.1 type 0x04) wrapping the raw private key.  This encoding is useful to no one, it should either be the CHOICE encoding (i.e. the same as `dk_pkcs8` without the PKCS#8 wrapping), or it should be the raw seed without any ANS.1 wrapping.\r\n\r\nSince `ek` is simply a raw public key without any ASN.1 wrapping, I think `pk` should also be the raw key without any ASN.1 wrapping.  Also Appendix F says \"dk the raw decapsulation private key.\"\r\n\r\nSince these tests are meant to mirror the NIST ACVP KATs, should `dk` be the expanded key?  Regardless, the text \"dk the raw decapsulation private key.\" should be changed to a more explicit \"dk the raw decapsulation private key in <seed? expanded?> format.\" `dk_pkcs` could be any of the CHOICE options, currently seed.\r\n\r\nPerhaps controversially, do `ek` and `dk` actually need to be included in the test vectors when we already have `x5c` and `dk_pkcs8`?  Possibly, since some implementations may only implement the algorithm and some may also implement the encoding.",
              "createdAt": "2025-09-18T10:26:29Z",
              "updatedAt": "2025-09-18T10:56:06Z"
            },
            {
              "originalPosition": 11,
              "body": "Per my other comment on this review, I believe that `dk` should just be the raw bytes.  Hence the standalone KEM logic on line 1159 should be removed and the raw bytes always set for `jsonTest['dk']`.\r\n\r\nOnly when encoding the key into PKCS#8 does there need to be different logic.  Here on line 1175 the comment should be changed from\r\n\r\n> \\# for standalone ML-KEM, we need to wrap the private key in an OCTET STRING, but not when it's a composite\r\n\r\nto\r\n\r\n> \\# for standalone ML-KEM, we need to encode the private key using ML-DSA's CHOICE encoding, but not when it's a composite",
              "createdAt": "2025-09-18T10:54:21Z",
              "updatedAt": "2025-09-18T10:56:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BuZik",
          "commit": {
            "abbreviatedOid": "f891cb7"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-21T21:21:43Z",
          "updatedAt": "2025-09-21T21:21:43Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Good point. My intention was for it to be the raw seed.\r\nAnd that's what's done in composite-sigs:\r\nhttps://github.com/lamps-wg/draft-composite-sigs/blob/main/src/testvectors.json#L8\r\n\r\n... so that's a bug. I'll fix that.\r\n\r\n... somewhat embarassingly, I ended up having to put in stupid wrapper code to deal with this stray OCTET STRING ... and yet I still didn't realize that this was wrong LOL\r\n\r\n```\r\n  def loadKeyPair(self, private_bytes: bytes) -> None:\r\n    if len(private_bytes) == 66:\r\n      # there's an extra OctetString wrapper\r\n      private_bytes = private_bytes[2:]\r\n```\r\n\r\nGreat. Let's take that out.",
              "createdAt": "2025-09-21T21:21:43Z",
              "updatedAt": "2025-09-21T21:22:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BuauQ",
          "commit": {
            "abbreviatedOid": "f891cb7"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-21T21:39:07Z",
          "updatedAt": "2025-09-21T21:39:07Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Fixed in [5ac0c98](https://github.com/lamps-wg/draft-composite-kem/pull/194/commits/5ac0c9866ddda1dc2a08211900224eaf4fd5b333)",
              "createdAt": "2025-09-21T21:39:07Z",
              "updatedAt": "2025-09-21T21:39:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 195,
      "id": "PR_kwDOKRPFO86j-Gq-",
      "title": "Changed OID-based domain separators to HPKE-style ASCII labels",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/195",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #193 \r\nCloses #131 ",
      "createdAt": "2025-08-17T03:09:07Z",
      "updatedAt": "2025-08-28T13:29:31Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "38832ef0207bad13b83e9d2a2a7e0351b5b0d28f",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_domsep_cfrg_alignment",
      "headRefOid": "65f0e049d33f07a71131fb57d10b6f93b75cf6ab",
      "closedAt": "2025-08-28T13:29:20Z",
      "mergedAt": "2025-08-28T13:29:20Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "6afe372f793aef353865587150cb96312446a388"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 196,
      "id": "PR_kwDOKRPFO86j_fMU",
      "title": "RECOMMEND e=65537.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/196",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #188",
      "createdAt": "2025-08-17T15:12:01Z",
      "updatedAt": "2025-09-21T21:32:55Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "eb3c35a64aaef569dcaf58badfb2e4a07ab32e36",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_65537",
      "headRefOid": "1b563ddf86c46b689de000b8a1d822a622340230",
      "closedAt": "2025-08-17T15:48:48Z",
      "mergedAt": "2025-08-17T15:48:48Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "1b563ddf86c46b689de000b8a1d822a622340230"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 197,
      "id": "PR_kwDOKRPFO86j_kvu",
      "title": "Piotr editorial #191",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/197",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #191 ",
      "createdAt": "2025-08-17T15:44:35Z",
      "updatedAt": "2025-08-17T15:48:49Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "eb3c35a64aaef569dcaf58badfb2e4a07ab32e36",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_191",
      "headRefOid": "60c340d954754fb5ba7083bda729f9094f80e108",
      "closedAt": "2025-08-17T15:48:46Z",
      "mergedAt": "2025-08-17T15:48:46Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "0512f9fcdfe219ce23384974e3c3a504dd882570"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 202,
      "id": "PR_kwDOKRPFO86mS02K",
      "title": "Restricts encoding of RSPrivateKey, ECPoint and ECPrivateKey. ",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/202",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In line with issue #244, encoding of RSAPrivateKey is changed to a fix version number and prohibits use of otherPrimeInfos field. ECPoint only allows uncompressed format now and ECPrivateKey prohibits NamedCurve and publicKey. Also its made clear DER encoding of components is used if applicable. Changes ECPrivateKey test vectors to restricted encoding by removing namedCurve and publicKey fields from ECPrivateKey encodings for all ECDSA components.\r\n\r\nCloses #173 ",
      "createdAt": "2025-09-01T14:02:48Z",
      "updatedAt": "2025-09-03T14:36:51Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6afe372f793aef353865587150cb96312446a388",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "184-private-key-serialization-is-under-specified",
      "headRefOid": "63a2d49d1b4e26dc154e8d8fbd3dd1598b9bbc65",
      "closedAt": "2025-09-03T14:36:46Z",
      "mergedAt": "2025-09-03T14:36:46Z",
      "mergedBy": "janklaussner",
      "mergeCommit": {
        "oid": "c86730c640dd35058969155ae42fc1610c5e13b5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 203,
      "id": "PR_kwDOKRPFO86meHeB",
      "title": "Changes size table calculation to maximum values with fixed length hint.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/203",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": " Closes #176",
      "createdAt": "2025-09-02T14:32:31Z",
      "updatedAt": "2025-09-03T18:30:37Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "6afe372f793aef353865587150cb96312446a388",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "176-approximate-key-sizes",
      "headRefOid": "2e8dd67bd0fe288bd711bc6e5569b34ea37e7ad9",
      "closedAt": "2025-09-03T18:30:30Z",
      "mergedAt": "2025-09-03T18:30:30Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "524341e0bdd8a59e12ae746d3f8df09b1c44ee0a"
      },
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "merge PR #202 first! This PR relies on the changes made there...",
          "createdAt": "2025-09-02T14:33:11Z",
          "updatedAt": "2025-09-02T14:33:11Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "- [x] Before merging this, I will take an action to modify the script to test the actual test vectors against the calculated maximum:\r\n\r\n* If the value is variable, then check that the test vector is <=\r\n* If the value is not variable, then check that the test vector is ==",
          "createdAt": "2025-09-03T14:40:31Z",
          "updatedAt": "2025-09-03T18:29:18Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO869qKwf",
          "commit": {
            "abbreviatedOid": "2e8dd67"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I added test code to check the generated test vectors against the expected size table.\r\n\r\nEverything looks good:\r\n\r\n> DEBUG: all sizes matched expected!",
          "createdAt": "2025-09-03T18:30:21Z",
          "updatedAt": "2025-09-03T18:30:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "PR_kwDOKRPFO86mei7k",
      "title": "Fixes ECDH Public Key encoding.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/204",
      "state": "CLOSED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "OCTET STRING wrapper is added to the X9.62 encoded EC public key as\r\nspecified in RFC 5480.\r\n\r\nCloses #200 ",
      "createdAt": "2025-09-02T15:06:50Z",
      "updatedAt": "2025-09-10T14:52:34Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "524341e0bdd8a59e12ae746d3f8df09b1c44ee0a",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "200-ec-public-key-is-encoded-as-raw-needs-to-be-ecpoint",
      "headRefOid": "7ed3589304a61069d2f09df82dfe4c65f59c0777",
      "closedAt": "2025-09-10T14:52:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "merge PR #203 first.",
          "createdAt": "2025-09-02T15:07:29Z",
          "updatedAt": "2025-09-02T15:07:29Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "Cleaned up the PR and added the modified Size Table not included yet. Be aware that the TradPK is included in the CompositeSK also, hence all ECDH composite SKs also increase.\r\n@ounsworth @johngray-dev  please review again",
          "createdAt": "2025-09-04T09:03:08Z",
          "updatedAt": "2025-09-04T09:03:08Z"
        },
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "On more careful reading of RFC 5480, even though `ECPoint ::= OCTET STRING`, it has wording that when you put it into a SubjectPublicKeyInfo, you put it directly into the SPKI BIT STRING _without_ the OS wrapper. We checked a publicly-trusted EC root to confirm.\r\n\r\nSo, actually, our test vectors were correct already.\r\n\r\nClosing this PR.",
          "createdAt": "2025-09-10T14:52:33Z",
          "updatedAt": "2025-09-10T14:52:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86_IClY",
          "commit": {
            "abbreviatedOid": "7ed3589"
          },
          "author": "feventura",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-10T14:51:42Z",
          "updatedAt": "2025-09-10T14:51:43Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "backslash is escaping the dot.",
              "createdAt": "2025-09-10T14:51:42Z",
              "updatedAt": "2025-09-10T14:51:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86_ICsh",
          "commit": {
            "abbreviatedOid": "7ed3589"
          },
          "author": "feventura",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-10T14:51:49Z",
          "updatedAt": "2025-09-10T14:51:50Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "backslash is escaping the dot.",
              "createdAt": "2025-09-10T14:51:50Z",
              "updatedAt": "2025-09-10T14:51:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOKRPFO86m2cj9",
      "title": "Adds consolidated algorithm table.",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/205",
      "state": "MERGED",
      "author": "janklaussner",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The major change is to rearrange how per-composite Composite ML-KEM\r\nparameters are presented.  Rather than per-parameter tables, each\r\ncomposite is listed with its OID and all its parameter.  As an\r\nimplementer it is easier to use, there is no bouncing back\r\nand forth between tables.\r\n\r\nAdditionally it fixes nagative indentation issues of code blocks.",
      "createdAt": "2025-09-04T12:39:52Z",
      "updatedAt": "2025-09-21T21:12:47Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "792eb041b44d7d7c69d85013863fa5e207b84f34",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "201-add-consolidated-algorithm-table-for-kem",
      "headRefOid": "cdc60b61149eb2773fa3a6afd624d3a38f608b88",
      "closedAt": "2025-09-21T21:12:44Z",
      "mergedAt": "2025-09-21T21:12:44Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "024e1db362585015a694489a14410559935c4d90"
      },
      "comments": [
        {
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "body": "- Only real comment is to fix the X_Wing combiner label in explanation text (missing escape backslash in code).   \r\n- Copy the explanation text over to sigs and better separate the algorithm text from the table components.\r\n",
          "createdAt": "2025-09-10T14:26:42Z",
          "updatedAt": "2025-09-10T14:26:42Z"
        },
        {
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "body": "> * Only real comment is to fix the X_Wing combiner label in explanation text (missing escape backslash in code).\r\n> \r\n>     * Copy the explanation text over to sigs and better separate the algorithm text from the table components.\r\n\r\nall done",
          "createdAt": "2025-09-16T21:34:33Z",
          "updatedAt": "2025-09-16T21:34:33Z"
        },
        {
          "author": "feventura",
          "authorAssociation": "NONE",
          "body": "@janklaussner did you ran the python script again after your changes? The [kemCombiner_MLKEM768_X25519_SHA3_256.md](https://github.com/lamps-wg/draft-composite-kem/blob/31ac8d44f51a8bcfeb077b493c3077b355cee4fe/src/kemCombiner_MLKEM768_X25519_SHA3_256.md) last commit was 2 weeks ago and the backslash still escaping the dot.",
          "createdAt": "2025-09-17T19:29:48Z",
          "updatedAt": "2025-09-17T19:29:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOKRPFO86_HpU_",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This looks good. We should merge it as soon as those editorial changes are made.",
          "createdAt": "2025-09-10T14:27:22Z",
          "updatedAt": "2025-09-10T14:27:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOKRPFO86_Io0R",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "feventura",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-10T15:26:44Z",
          "updatedAt": "2025-09-10T15:26:45Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "backslash is escaping the dot.",
              "createdAt": "2025-09-10T15:26:44Z",
              "updatedAt": "2025-09-10T15:26:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO86_Io8D",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "feventura",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-10T15:26:52Z",
          "updatedAt": "2025-09-10T15:26:52Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "backslash is escaping the dot.",
              "createdAt": "2025-09-10T15:26:52Z",
              "updatedAt": "2025-09-10T15:26:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87AoI9D",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-16T21:21:11Z",
          "updatedAt": "2025-09-16T21:21:11Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Fixed",
              "createdAt": "2025-09-16T21:21:11Z",
              "updatedAt": "2025-09-16T21:21:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87AoJOI",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "janklaussner",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-16T21:21:29Z",
          "updatedAt": "2025-09-16T21:21:29Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Fixed",
              "createdAt": "2025-09-16T21:21:29Z",
              "updatedAt": "2025-09-16T21:21:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87A0QKy",
          "commit": {
            "abbreviatedOid": "31ac8d4"
          },
          "author": "johngray-dev",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-17T14:59:15Z",
          "updatedAt": "2025-09-17T14:59:15Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Author Discussion:  The python code needs to convert the KDF Input to Hex (including the starship label).",
              "createdAt": "2025-09-17T14:59:15Z",
              "updatedAt": "2025-09-17T14:59:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BEJff",
          "commit": {
            "abbreviatedOid": "eca25eb"
          },
          "author": "danvangeest",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-18T11:38:17Z",
          "updatedAt": "2025-09-18T11:49:37Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "From a quick scan, `oid` is never used and should be removed from all classes to avoid confusion.",
              "createdAt": "2025-09-18T11:38:18Z",
              "updatedAt": "2025-09-18T11:49:37Z"
            },
            {
              "originalPosition": 51,
              "body": "Similar to the X-wing label, the \"QSF-MLKEM1024-P384-HMACSHA512\" portion of this should be in hexadecimal (presumably there's a way to fix this globally, just commenting here so it's easy to verify later)",
              "createdAt": "2025-09-18T11:48:18Z",
              "updatedAt": "2025-09-18T11:49:37Z"
            },
            {
              "originalPosition": 42,
              "body": "Similar to the X-wing label, the \"QSF-MLKEM768-P256-HMACSHA256\" portion of this should be in hexadecimal (presumably there's a way to fix this globally, just commenting here so it's easy to verify later)",
              "createdAt": "2025-09-18T11:48:35Z",
              "updatedAt": "2025-09-18T11:49:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BuTE0",
          "commit": {
            "abbreviatedOid": "eca25eb"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-21T19:48:42Z",
          "updatedAt": "2025-09-21T19:48:42Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Fixed.",
              "createdAt": "2025-09-21T19:48:42Z",
              "updatedAt": "2025-09-21T19:48:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BuTGR",
          "commit": {
            "abbreviatedOid": "eca25eb"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-21T19:48:54Z",
          "updatedAt": "2025-09-21T19:48:54Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "Fixed.",
              "createdAt": "2025-09-21T19:48:54Z",
              "updatedAt": "2025-09-21T19:48:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOKRPFO87BuTTS",
          "commit": {
            "abbreviatedOid": "eca25eb"
          },
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-21T19:52:21Z",
          "updatedAt": "2025-09-21T19:52:21Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "Removed.",
              "createdAt": "2025-09-21T19:52:21Z",
              "updatedAt": "2025-09-21T19:52:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 207,
      "id": "PR_kwDOKRPFO86ocRaY",
      "title": "Remove unreferenced references",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/207",
      "state": "MERGED",
      "author": "danvangeest",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-09-13T22:01:12Z",
      "updatedAt": "2025-09-17T14:54:39Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "524341e0bdd8a59e12ae746d3f8df09b1c44ee0a",
      "headRepository": "danvangeest/draft-composite-kem",
      "headRefName": "dvg/unreferenced-references",
      "headRefOid": "59cbff80d834b10c926ad0e196eca6722dfb986c",
      "closedAt": "2025-09-17T14:54:38Z",
      "mergedAt": "2025-09-17T14:54:38Z",
      "mergedBy": "johngray-dev",
      "mergeCommit": {
        "oid": "d488497f16fe36be8bc09ba4b8e6711814efa9c0"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 210,
      "id": "PR_kwDOKRPFO86pmJW9",
      "title": "Tweaked the wording of the Encoding to DER section",
      "url": "https://github.com/lamps-wg/draft-composite-kem/pull/210",
      "state": "MERGED",
      "author": "ounsworth",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #192 ",
      "createdAt": "2025-09-19T22:26:22Z",
      "updatedAt": "2025-09-21T21:13:29Z",
      "baseRepository": "lamps-wg/draft-composite-kem",
      "baseRefName": "main",
      "baseRefOid": "d488497f16fe36be8bc09ba4b8e6711814efa9c0",
      "headRepository": "lamps-wg/draft-composite-kem",
      "headRefName": "mikeo_der",
      "headRefOid": "2c5175d86ac26c102143fc7ff4eda034e149ccd5",
      "closedAt": "2025-09-21T21:13:26Z",
      "mergedAt": "2025-09-21T21:13:26Z",
      "mergedBy": "ounsworth",
      "mergeCommit": {
        "oid": "e15f5d5018e52a932a4147b249cded2864841f89"
      },
      "comments": [
        {
          "author": "ounsworth",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I got confused about branches. So this PR also contains a tweak to the 65537 text.",
          "createdAt": "2025-09-19T22:38:55Z",
          "updatedAt": "2025-09-19T22:38:55Z"
        }
      ],
      "reviews": []
    }
  ]
}